set positional-arguments

# default recipe to display help information
default:
  @just --list

clean:
  rm -rf out/*

prep l1='' l2='':
  #!/usr/bin/env bash
  set -euo pipefail
  mkdir -p out
  sed -e 's/<L2_CHAIN>/{{l2}}/g' -e 's/<L1_CHAIN>/{{l1}}/g' templates/README.md > out/README.md
  cp templates/input.json out/input.json
  cp templates/VALIDATION.md out/VALIDATION.md
  cp templates/NestedSignFromJson.s.sol out/NestedSignFromJson.s.sol

  if [[ "{{l1}}" == "sepolia" ]]; then
    cat > out/.env << EOF
  ETH_RPC_URL="https://ethereum-sepolia.publicnode.com"
  COUNCIL_SAFE=0xf64bc17485f0B4Ea5F06A96514182FC4cB561977
  FOUNDATION_SAFE=0xDEe57160aAfCF04c34C887B5962D0a69676d3C8B
  EOF
  elif [[ "{{l1}}" == "mainnet" ]]; then
    cat > out/.env << EOF
  ETH_RPC_URL="https://ethereum.publicnode.com"
  COUNCIL_SAFE=0xc2819DC788505Aac350142A7A707BF9D03E3Bd03
  FOUNDATION_SAFE=0x847B5c174615B1B7fDF770882256e2D3E95b9D92
  EOF
  else
    echo "Unknown L1 chain. Must be 'mainnet' or 'sepolia'"
    exit 1
  fi

  CONFIG_URL="https://raw.githubusercontent.com/ethereum-optimism/superchain-registry/refs/heads/main/superchain/configs/{{l1}}/{{l2}}.toml"
  CONFIG_TOML=$(curl -s --show-error --fail "${CONFIG_URL}")
  SYSTEM_CONFIG=$(echo "${CONFIG_TOML}" | yq -p toml .addresses.SystemConfigProxy)
  OWNER_SAFE=$(echo "${CONFIG_TOML}" | yq -p toml .addresses.ProxyAdminOwner)
  PROXY_ADMIN=$(echo "${CONFIG_TOML}" | yq -p toml .addresses.ProxyAdmin)

  cat >> out/.env << EOF
  SAFE_NONCE=""
  L1_CHAIN_NAME="{{l1}}"
  L2_CHAIN_NAME="{{l2}}"
  SYSTEM_CONFIG="${SYSTEM_CONFIG}"
  OWNER_SAFE="${OWNER_SAFE}"
  PROXY_ADMIN="${PROXY_ADMIN}"
  EOF

# Generate the `input.json` with the game type and implementation to set.
set-implementation gameType='' implAddr='':
  #!/usr/bin/env bash
  set -euo pipefail
  unset ETH_RPC_URL
  . out/.env
  export ETH_RPC_URL # Make available to cast since the .env file is in the out subdir.
  SET_GAME_TYPE_SIG="setImplementation(uint32,address)"
  ENCODED_CALL=$(cast calldata "${SET_GAME_TYPE_SIG}" "{{gameType}}" "{{implAddr}}")

  DGF_ADDR=$(cast call "${SYSTEM_CONFIG}" "disputeGameFactory()(address)")

  TX_DESC="Sets the implementation for game type {{gameType}} to {{implAddr}} in the \`DisputeGameFactory\`."
  TX=$(jq --arg desc "${TX_DESC}" "(.metadata.description = \$desc) |
                (.data = \"$ENCODED_CALL\") |
                (.to = \"${DGF_ADDR}\") |
                (.contractInputsValues._gameType = \"{{gameType}}\") |
                (.contractInputsValues._impl = \"{{implAddr}}\")" ./templates/tx/setImplementation.json)
  jq --argjson tx "${TX}" --arg desc "${TX_DESC} " '(.metadata.description += $desc) | (.transactions += [$tx])' ./out/input.json > ./out/input.tmp.json
  mv ./out/input.tmp.json ./out/input.json

  # Add pre and post checks for this implementation change
  sed \
    -e 's|// INSERT NEW PRE CHECKS HERE|_precheckDisputeGameImplementation(GameType.wrap({{gameType}}), {{implAddr}});\n        // INSERT NEW PRE CHECKS HERE|' \
    -e 's|// INSERT NEW POST CHECKS HERE|_checkDisputeGameImplementation(GameType.wrap({{gameType}}), {{implAddr}});\n        // INSERT NEW POST CHECKS HERE|' \
    out/NestedSignFromJson.s.sol > out/NestedSignFromJson.s.sol.tmp
  mv out/NestedSignFromJson.s.sol.tmp out/NestedSignFromJson.s.sol

  # Update the validation instructions
  GAME_IMPLS_SLOT="101"
  STORAGE_SLOT=$(cast index uint32 "{{gameType}}" "${GAME_IMPLS_SLOT}")
  BEFORE=$(cast storage "${DGF_ADDR}" "${STORAGE_SLOT}")
  AFTER=$(cast concat-hex 0x000000000000000000000000 "{{implAddr}}")
  cat >> out/VALIDATION.md << EOF

  ### \`${DGF_ADDR}\` (\`DisputeGameFactoryProxy\`)

  - **Key**: \`${STORAGE_SLOT}\` <br/>
    **Before**: \`${BEFORE}\` <br/>
    **After**: \`${AFTER}\` <br/>
    **Meaning**: Updates the implementation for game type {{gameType}}. Verify that the new implementation is set using
    \`cast call ${DGF_ADDR} "gameImpls(uint32)(address)" {{gameType}}\`.
  EOF

  # Update the README
  INFO="* Set implementation for game type {{gameType}} to {{implAddr}} in \`DisputeGameFactory\` ${DGF_ADDR}: \`setImplementation({{gameType}}, {{implAddr}})\`"
  sed -e "s|<!--NEXT TASK DESCRIPTION-->|${INFO}\n<!--NEXT TASK DESCRIPTION-->|" out/README.md > out/README.md.tmp
  mv out/README.md.tmp out/README.md

copy-anchor-state fromGameType='' toGameTypes='':
  #!/usr/bin/env bash
  set -euo pipefail
  unset ETH_RPC_URL
  . out/.env
  export ETH_RPC_URL # Make available to cast since the .env file is in the out subdir.

  DGF_ADDR=$(cast call "${SYSTEM_CONFIG}" "disputeGameFactory()(address)")

  # Find the anchor state registry for the source game.
  SOURCE_IMPL=$(cast call "${DGF_ADDR}" 'gameImpls(uint32)(address)' '{{fromGameType}}')
  REGISTRY_PROXY=$(cast call "${SOURCE_IMPL}" 'anchorStateRegistry()(address)' "${SOURCE_IMPL}")
  REGISTRY_IMPL=$(cast call "${REGISTRY_PROXY}" 'implementation()(address)')
  SUPERCHAIN_CONFIG=$(cast call "${REGISTRY_PROXY}" 'superchainConfig()(address)')

  # Load the current anchor state
  ANCHOR_JSON=$(cast call -j "${REGISTRY_PROXY}" 'anchors(uint32)(bytes32,uint256)' '{{fromGameType}}')
  ANCHOR_ROOT=$(echo "${ANCHOR_JSON}" | jq -r '.[0]')
  ANCHOR_BLOCK=$(echo "${ANCHOR_JSON}" | jq -r '.[1]')

  STORAGE_SETTER_ADDR="0x54F8076f4027e21A010b4B3900C86211Dd2C2DEB"
  UPGRADE_AND_CALL_SIG="upgradeAndCall(address,address,bytes)"
  RESET_CALL=$(cast calldata "setBytes32(bytes32,bytes32)" 0x0000000000000000000000000000000000000000000000000000000000000000 0x0000000000000000000000000000000000000000000000000000000000000000)
  ENCODED_RESET_CALL=$(cast calldata "${UPGRADE_AND_CALL_SIG}" "${REGISTRY_PROXY}" "${STORAGE_SETTER_ADDR}" "${RESET_CALL}")

  GAME_TYPES_WITH_COMMAS=""
  ANCHORS=""
  for GAME_TYPE in {{toGameTypes}}
  do
    ANCHORS="${ANCHORS}, ($GAME_TYPE, (${ANCHOR_ROOT}, ${ANCHOR_BLOCK}))"
    GAME_TYPES_WITH_COMMAS="${GAME_TYPES_WITH_COMMAS}, ${GAME_TYPE}"
  done
  ANCHORS="${ANCHORS#, }"
  GAME_TYPES_WITH_COMMAS="${GAME_TYPES_WITH_COMMAS#, }"

  INIT_CALL=$(cast calldata "initialize((uint32,(bytes32,uint256))[],address)" "[${ANCHORS}]" "${SUPERCHAIN_CONFIG}")
  ENCODED_UPGRADE_AND_INIT_CALL=$(cast calldata "${UPGRADE_AND_CALL_SIG}" "${REGISTRY_PROXY}" "${REGISTRY_IMPL}" "${INIT_CALL}")

  TX_DESC="Re-initialize with anchor states for game types ${GAME_TYPES_WITH_COMMAS} set to ${ANCHOR_ROOT}, ${ANCHOR_BLOCK}"
  TXS=$(jq "(.[0].data = \"${ENCODED_RESET_CALL}\") |
                  (.[0].to = \"${PROXY_ADMIN}\") |
                  (.[0].contractInputsValues._proxy = \"${REGISTRY_PROXY}\") |
                  (.[0].contractInputsValues._implementation = \"${STORAGE_SETTER_ADDR}\") |
                  (.[0].contractInputsValues._data = \"${RESET_CALL}\") |
                  (.[1].data = \"${ENCODED_UPGRADE_AND_INIT_CALL}\") |
                  (.[1].to = \"${PROXY_ADMIN}\") |
                  (.[1].metadata.description = \"${TX_DESC}\") |
                  (.[1].contractInputsValues._proxy = \"${REGISTRY_PROXY}\") |
                  (.[1].contractInputsValues._implementation = \"${REGISTRY_IMPL}\") |
                  (.[1].contractInputsValues._data = \"${INIT_CALL}\")
                  " ./templates/tx/setAnchorState.json)
  jq --argjson tx "${TXS}" --arg desc "${TX_DESC} " '(.metadata.description += $desc) | (.transactions += $tx)' ./out/input.json > ./out/input.tmp.json
  mv ./out/input.tmp.json ./out/input.json

  # Allow state access for the AnchorStateRegistry

  sed \
    -e "s|// INSERT NEW PRE CHECKS HERE|extraStorageAccessAddresses.push(${REGISTRY_PROXY});\n        // INSERT NEW PRE CHECKS HERE|" \
    out/NestedSignFromJson.s.sol > out/NestedSignFromJson.s.sol.tmp
  mv out/NestedSignFromJson.s.sol.tmp out/NestedSignFromJson.s.sol

  # Add pre and post checks
  for GAME_TYPE in {{toGameTypes}}
  do
      sed \
        -e "s|// INSERT NEW PRE CHECKS HERE|_precheckAnchorStateCopy(GameType.wrap({{fromGameType}}), GameType.wrap(${GAME_TYPE}));\n        // INSERT NEW PRE CHECKS HERE|" \
        -e "s|// INSERT NEW POST CHECKS HERE|_postcheckAnchorStateCopy(GameType.wrap(${GAME_TYPE}), bytes32(${ANCHOR_ROOT}), ${ANCHOR_BLOCK});\n        // INSERT NEW POST CHECKS HERE|" \
        -e "s|// INSERT NEW POST CHECKS HERE|_postcheckHasAnchorState(GameType.wrap({{fromGameType}}));\n        // INSERT NEW POST CHECKS HERE|" \
        out/NestedSignFromJson.s.sol > out/NestedSignFromJson.s.sol.tmp
      mv out/NestedSignFromJson.s.sol.tmp out/NestedSignFromJson.s.sol
  done

  # Update the validation instructions
  ANCHORS_SLOT="1"
  echo >> out/VALIDATION.md # Add blank line
  echo "### \`${REGISTRY_PROXY}\` (\`AnchorStateRegistryProxy\`)" >> out/VALIDATION.md
  for GAME_TYPE in {{toGameTypes}}
  do
      STORAGE_SLOT1=$(cast index uint32 "${GAME_TYPE}" "${ANCHORS_SLOT}")
      BEFORE1=$(cast storage "${REGISTRY_PROXY}" "${STORAGE_SLOT1}")
      AFTER1="${ANCHOR_ROOT}"

      # Block number storage slot is one after the anchor state root slot
      STORAGE_SLOT1_BASE10=$(echo "${STORAGE_SLOT1}" | cast 2d)
      STORAGE_SLOT2=$(echo "${STORAGE_SLOT1_BASE10} + 1" | BC_LINE_LENGTH=0 bc | cast 2h -i 10)
      BEFORE2=$(cast storage "${REGISTRY_PROXY}" "${STORAGE_SLOT2}")
      AFTER2=$(cast 2h "${ANCHOR_BLOCK}")
      cat >> out/VALIDATION.md << EOF

  - **Key**: \`${STORAGE_SLOT1}\`<br/>
    **Before**: \`${BEFORE1}\` (Note this may have changed if games of this type resolved)<br/>
    **After**: \`${AFTER1}\` <br/>
    **Meaning**: Set the anchor state output root for game type ${GAME_TYPE} to ${ANCHOR_ROOT}.

  - **Key**: \`${STORAGE_SLOT2}\`<br/>
    **Before**: \`${BEFORE2}\` (Note this may have changed if games of this type resolved)<br/>
    **After**: \`${AFTER2}\` <br/>
    **Meaning**: Set the anchor state L2 block number for game type ${GAME_TYPE} to ${ANCHOR_BLOCK}.
  EOF
  done

  # Update the README
  INFO="* Re-initialize \`AnchorStateRegistry\` ${REGISTRY_PROXY} with the anchor state for game types ${GAME_TYPES_WITH_COMMAS} set to ${ANCHOR_ROOT}, ${ANCHOR_BLOCK}"
  sed -e "s|<!--NEXT TASK DESCRIPTION-->|${INFO}\n<!--NEXT TASK DESCRIPTION-->|" out/README.md > out/README.md.tmp
  mv out/README.md.tmp out/README.md
