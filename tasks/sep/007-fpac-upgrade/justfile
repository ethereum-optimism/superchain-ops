set dotenv-load

export rpcUrl := env_var('ETH_RPC_URL')
export signatures := env_var_or_default('SIGNATURES', '')
export bundle := "input"
export location := `pwd`
export OWNER_SAFE := env_var('OWNER_SAFE')

# Default recipe to list all available recipes
default:
  just --list

# Generates the `input.json` file from the addresses in the `meta.json` file.
generate-input:
  #!/usr/bin/env bash
  PORTAL_PROXY=$(jq -r .optimismPortalProxyAddr ./meta.json)
  PORTAL2_IMPL=$(jq -r .optimismPortal2ImplAddr ./meta.json)
  SYSTEM_CONFIG=$(jq -r .systemConfigAddr ./meta.json)
  SUPERCHAIN_CONFIG=$(jq -r .superchainConfigAddr ./meta.json)
  DGF_PROXY=$(jq -r .disputeGameFactoryProxyAddr ./meta.json)
  DGF_IMPL=$(jq -r .disputeGameFactoryImplAddr ./meta.json)
  PROXY_ADMIN=$(jq -r .proxyAdminAddr ./meta.json)
  FDG_IMPL=$(jq -r .fdgImplAddr ./meta.json)
  SOY_FDG_IMPL=$(jq -r .soyFdgImplAddr ./meta.json)
  STORAGE_SETTER=$(jq -r .storageSetterAddr ./meta.json)

  UPGRADE_TO_AND_CALL_SIG="upgradeAndCall(address,address,bytes)"
  SET_IMPLEMENTATION_DGF_SIG="setImplementation(uint32,address)"

  SET_BOOL_SIG="setBool(bytes32,bool)"
  SET_BOOL_ARGS=$(cast abi-encode $SET_BOOL_SIG $(cast 2b 0) false)
  ENCODED_SET_BOOL="$(cast sig $SET_BOOL_SIG)${SET_BOOL_ARGS:2}"

  # Tx 1: Upgrade the `DisputeGameFactory` proxy to the `StorageSetter` implementation, and clear the `initialized` slot.
  STORAGE_SETTER_UPGRADE_ARGS_DGF=$(cast abi-encode $UPGRADE_TO_AND_CALL_SIG $DGF_PROXY $STORAGE_SETTER $ENCODED_SET_BOOL)
  ENCODED_STORAGE_SETTER_UPGRADE_DGF="$(cast sig $UPGRADE_TO_AND_CALL_SIG)${STORAGE_SETTER_UPGRADE_ARGS_DGF:2}"

  # Tx 2: Upgrade the `DisputeGameFactory` proxy to the final implementation, and transfer ownership of the DGF to the new
  #       owner safe.
  INITIALIZE_SIG_DGF="initialize(address)"
  INITIALIZE_ARGS_DGF=$(cast abi-encode $INITIALIZE_SIG_DGF $OWNER_SAFE)
  ENCODED_INITIALIZE_DGF="$(cast sig $INITIALIZE_SIG_DGF)${INITIALIZE_ARGS_DGF:2}"
  UPGRADE_TO_AND_CALL_ARGS_DGF=$(cast abi-encode $UPGRADE_TO_AND_CALL_SIG $DGF_PROXY $DGF_IMPL $ENCODED_INITIALIZE_DGF)
  ENCODED_UPGRADE_TO_AND_CALL_DGF="$(cast sig $UPGRADE_TO_AND_CALL_SIG)${UPGRADE_TO_AND_CALL_ARGS_DGF:2}"

  # Tx 3: Upgrade the implementation of `GameType=0` in the DGF 
  SET_IMPL_GT0_ARGS=$(cast abi-encode $SET_IMPLEMENTATION_DGF_SIG 0 $FDG_IMPL)
  ENCODED_SET_IMPL_GT0_DGF=$(cast sig $SET_IMPLEMENTATION_DGF_SIG)${SET_IMPL_GT0_ARGS:2}

  # Tx 4: Upgrade the implementation of `GameType=1` in the DGF 
  SET_IMPL_GT1_ARGS=$(cast abi-encode $SET_IMPLEMENTATION_DGF_SIG 1 $SOY_FDG_IMPL)
  ENCODED_SET_IMPL_GT1_DGF=$(cast sig $SET_IMPLEMENTATION_DGF_SIG)${SET_IMPL_GT1_ARGS:2}

  # Tx 5: Upgrade the `OptimismPortal` proxy to the `StorageSetter` implementation.
  STORAGE_SETTER_UPGRADE_ARGS_PORTAL=$(cast abi-encode $UPGRADE_TO_AND_CALL_SIG $PORTAL_PROXY $STORAGE_SETTER $ENCODED_SET_BOOL)
  ENCODED_STORAGE_SETTER_UPGRADE_PORTAL="$(cast sig $UPGRADE_TO_AND_CALL_SIG)${STORAGE_SETTER_UPGRADE_ARGS_PORTAL:2}"

  # Tx 6: Upgrade the `OptimismPortal` proxy to the `OptimismPortal2` implementation.
  INITIALIZE_SIG_PORTAL="initialize(address,address,address,uint32)"
  INITIALIZE_ARGS_PORTAL=$(cast abi-encode $INITIALIZE_SIG_PORTAL $DGF_PROXY $SYSTEM_CONFIG $SUPERCHAIN_CONFIG 0)
  ENCODED_INITIALIZE_PORTAL="$(cast sig $INITIALIZE_SIG_PORTAL)${INITIALIZE_ARGS_PORTAL:2}"
  UPGRADE_TO_AND_CALL_ARGS=$(cast abi-encode $UPGRADE_TO_AND_CALL_SIG $PORTAL_PROXY $PORTAL2_IMPL $ENCODED_INITIALIZE_PORTAL)
  ENCODED_UPGRADE_TO_AND_CALL_PORTAL="$(cast sig $UPGRADE_TO_AND_CALL_SIG)${UPGRADE_TO_AND_CALL_ARGS:2}"

  cp ./input-template.json ./input.json
  jq "(.transactions[0].to = \"$PROXY_ADMIN\") |
          (.transactions[0].data = \"$ENCODED_STORAGE_SETTER_UPGRADE_DGF\") |
          (.transactions[0].contractInputsValues._proxy = \"$DGF_PROXY\") |
          (.transactions[0].contractInputsValues._implementation = \"$STORAGE_SETTER\") |
          (.transactions[0].contractInputsValues._data = \"$ENCODED_SET_BOOL\") |
          (.transactions[1].to = \"$PROXY_ADMIN\") |
          (.transactions[1].data = \"$ENCODED_UPGRADE_TO_AND_CALL_DGF\") |
          (.transactions[1].contractInputsValues._proxy = \"$DGF_PROXY\") |
          (.transactions[1].contractInputsValues._implementation = \"$DGF_IMPL\") |
          (.transactions[1].contractInputsValues._data = \"$ENCODED_INITIALIZE_DGF\") |
          (.transactions[2].to = \"$DGF_PROXY\") |
          (.transactions[2].data = \"$ENCODED_SET_IMPL_GT0_DGF\") |
          (.transactions[2].contractInputsValues._impl = \"$FDG_IMPL\") |
          (.transactions[3].to = \"$DGF_PROXY\") |
          (.transactions[3].data = \"$ENCODED_SET_IMPL_GT1_DGF\") |
          (.transactions[3].contractInputsValues._impl = \"$SOY_FDG_IMPL\") |
          (.transactions[4].to = \"$PROXY_ADMIN\") |
          (.transactions[4].data = \"$ENCODED_STORAGE_SETTER_UPGRADE_PORTAL\") |
          (.transactions[4].contractInputsValues._proxy = \"$PORTAL_PROXY\") |
          (.transactions[4].contractInputsValues._implementation = \"$STORAGE_SETTER\") |
          (.transactions[4].contractInputsValues._data = \"$ENCODED_SET_BOOL\") |
          (.transactions[5].to = \"$PROXY_ADMIN\") |
          (.transactions[5].data = \"$ENCODED_UPGRADE_TO_AND_CALL_PORTAL\") |
          (.transactions[5].contractInputsValues._proxy = \"$PORTAL_PROXY\") |
          (.transactions[5].contractInputsValues._implementation = \"$PORTAL2_IMPL\") |
          (.transactions[5].contractInputsValues._data = \"$ENCODED_INITIALIZE_PORTAL\")" ./input.json > ./input.tmp.json && mv ./input.tmp.json ./input.json
