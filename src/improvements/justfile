# Create a new template or task
# e.g. just new [template|task]
new COMMAND="" TASK_TYPE="":
    #!/usr/bin/env bash
    set -euo pipefail

    echo -e "\033[42m                          \033[0m"
    echo -e "\033[42m    superchain-ops cli    \033[0m"
    echo -e "\033[42m                          \033[0m"

    show_usage() {
        echo
        echo "Usage: just new [template|task]"
        echo "Available commands:"
        echo "  • template  - Create a new template"
        echo "  • task      - Create a new task"
        echo
    }

    show_task_types() {
        echo
        echo "Available task types:"
        echo "  • l2taskbase - 'L2TaskBase' task type, these tasks require a superchain address registry and can iterate over multiple L2 chains"
        echo "    eg: https://github.com/ethereum-optimism/superchain-ops/blob/main/test/tasks/mock/template/GasConfigTemplate.sol"
        echo "  • simpletaskbase - 'SimpleTaskBase' task type, these tasks require simple key value registry and are independent of the L2 chains"
        echo "    eg: https://github.com/ethereum-optimism/superchain-ops/blob/main/src/improvements/template/FinanceTemplate.sol"
        echo "  • opcmtaskbase - 'OPCMTaskBase' task type, these tasks are used to make delegate calls to the Optimism Contracts Manager and are"
        echo "    dependent on the L2 chains and inherit from L2TaskBase"
        echo "    e.g.: https://github.com/ethereum-optimism/superchain-ops/blob/main/src/improvements/template/OPCMUpgradeV200.sol"
        echo
    }

    # shellcheck disable=SC2050
    case "{{COMMAND}}" in
        "")
            echo -e "\n\033[31mError: No command specified\033[0m"
            show_usage
            exit 1
            ;;
        template)
            if [ -z "{{TASK_TYPE}}" ]; then
                echo -e "\n\033[31mError: No task type specified\033[0m"
                show_task_types
                exit 1
            fi

            case "$(echo {{TASK_TYPE}} | tr '[:upper:]' '[:lower:]')" in
                l2taskbase)
                    TASK_TYPE="L2TaskBase"
                    ;;
                simpletaskbase)
                    TASK_TYPE="SimpleTaskBase"
                    ;;
                opcmtaskbase)
                    TASK_TYPE="OPCMTaskBase"
                    ;;
                *)
                    echo -e "\n\033[31mError: Invalid task type '{{TASK_TYPE}}'\033[0m"
                    show_task_types
                    exit 1
                    ;;
            esac
            echo -e "\nSelected task type: \033[33m $TASK_TYPE \033[0m"
            ./script/create-template.sh "$TASK_TYPE"
            ;;
        task)
            if [ -n "{{TASK_TYPE}}" ]; then
                echo -e "\n\033[31mError: Task type should not be specified for 'task' command\033[0m"
                exit 1
            fi
            ./script/create-task.sh
            ;;
        *)
            echo -e "\n\033[31mError: Invalid command '{{COMMAND}}'\033[0m"
            show_usage
            exit 1
            ;;
    esac

task COMMAND="" NETWORK="":
    #!/usr/bin/env bash
    set -euo pipefail

    echo -e "\033[42m                          \033[0m"
    echo -e "\033[42m    superchain-ops cli    \033[0m"
    echo -e "\033[42m                          \033[0m"

    if [ "{{COMMAND}}" = "" ]; then
        echo -e "\n\033[31mError: No command specified\033[0m\n"
        exit 1
    fi

    # shellcheck disable=SC2194
    case "{{COMMAND}}" in
        ls)
            echo ""
            ./script/sorted-tasks.sh {{NETWORK}}
            ;;
        *)
            echo -e "\n\033[31mError: Invalid command '{{COMMAND}}'\033[0m\n"
            exit 1
            ;;
    esac

check-superchain-registry-latest:
    #!/usr/bin/env bash
    set -euo pipefail
    root_dir=$(git rev-parse --show-toplevel)
    bash ${root_dir}/src/improvements/script/check-superchain-latest.sh

# This command simulates tasks in the example directory. There should be a corresponding task for each template.
simulate-all-templates:
    #!/usr/bin/env bash
    set -euo pipefail
    root_dir=$(git rev-parse --show-toplevel)
    forge build
    simulation_count=0

    # Collect PIDs of each background simulation.
    declare -a pids=()

    for task in "${root_dir}/test/tasks/example/"*/*; do
        if [ -d "$task" ]; then
            # Extract nested_safe_name with fail-safe default of foundation.
            nested_safe_name="foundation"
            if [ -f "$task/.env" ]; then
                # Check if NESTED_SAFE_NAME exists in the file and extract it
                if grep -q "NESTED_SAFE_NAME" "$task/.env"; then
                    extracted_value=$(grep "NESTED_SAFE_NAME" "$task/.env" | cut -d '=' -f 2)
                    # Only use the extracted value if its not empty and not null
                    if [ -n "$extracted_value" ] && [ "$extracted_value" != "null" ]; then
                        nested_safe_name="$extracted_value"
                    fi
                fi
            fi

            # Launch each simulation in background.
            "${root_dir}/src/improvements/script/simulate-task.sh" "$task" "$nested_safe_name" & pids+=( "$!" )
        fi
    done

    # Wait for every simulation to finish, count successes.
    for pid in "${pids[@]}"; do
        wait "$pid"
        simulation_count=$((simulation_count + 1))
    done

    echo "$simulation_count simulations run."

    # Count template files (excluding *.template.sol and boilerplate dir).
    template_count=$(find "${root_dir}/src/improvements/template" -type f ! -name "*.template.sol" ! -path "*/boilerplate/*" | wc -l | xargs)

    # Verify that every template file is referenced by at least one example task config.
    missing_templates=()
    while IFS= read -r template_file; do
        tmpl_name=$(basename "$template_file" .sol)
        if ! grep -R --quiet "templateName = \"${tmpl_name}\"" "${root_dir}/test/tasks/example"/*/*/config.toml 2>/dev/null; then
            missing_templates+=("$tmpl_name")
        fi
    done < <(find "${root_dir}/src/improvements/template" -type f ! -name "*.template.sol" ! -path "*/boilerplate/*")

    echo ""
    if [ ${#missing_templates[@]} -ne 0 ]; then
        echo -e "\033[31mError: The following template(s) do not have an example task referencing them:\033[0m" >&2
        for t in "${missing_templates[@]}"; do
            echo -e "\033[31m  • $t\033[0m" >&2
        done
        echo -e "\033[32mSuccess: All templates have a corresponding task.\033[0m"
        exit 1
    fi

simulate-stack NETWORK="" TASK="" OWNER_ADDRESSES="[]":
    #!/usr/bin/env bash
    set -euo pipefail
    root_dir=$(git rev-parse --show-toplevel)

    echo -e "\033[42m                                         \033[0m"
    echo -e "\033[42m    superchain-ops stacked simulation    \033[0m"
    echo -e "\033[42m                                         \033[0m"

    show_usage() {
        echo
        echo "Usage: just simulate-stack <network> [task] [owner-addresses]"
        echo "Available arguments:"
        echo "  • <network> - The network to simulate the stack for (e.g. 'sep', 'eth')"
        echo "  • [task]    - The task to simulate the stack for (e.g. '001-task-name')"
        echo "  • [owner-addresses] - A comma-separated list of parent-multisig owner addresses. The list must match the number of tasks being simulated. Use the zero address (0x0000000000000000000000000000000000000000) to simulate the task using the first owner on the parent multisig. If the list is left empty, each task will default to its first owner. For example, use '[0x0000000000000000000000000000000000000000,0xDEe57160aAfCF04c34C887B5962D0a69676d3C8B,0x0000000000000000000000000000000000000000]' to explicitly simulate the second task as a specific owner, while defaulting the first and third."
        echo
    }

    ETH_RPC_URL=$(just _fetch-rpc-url "{{NETWORK}}")

    echo -e "\n⏳ Stacked Task simulation in progress. This may take a while..."
    if [ -z "{{TASK}}" ]; then
        echo -e "⏳ You are simulating all tasks for network: {{NETWORK}}\n"
        just list-stack {{NETWORK}}
        forge script ${root_dir}/src/improvements/tasks/StackedSimulator.sol:StackedSimulator --sig "simulateStack(string)" {{NETWORK}} --ffi --rpc-url $ETH_RPC_URL
    else
        echo -e "⏳ You are simulating the task: {{TASK}} for network: {{NETWORK}}\n"
        just list-stack {{NETWORK}} {{TASK}}
        forge script ${root_dir}/src/improvements/tasks/StackedSimulator.sol:StackedSimulator --sig "simulateStack(string,string,address[])" "{{NETWORK}}" "{{TASK}}" "{{OWNER_ADDRESSES}}" --ffi --rpc-url $ETH_RPC_URL
    fi
    echo -e "\n⚠️ Please note: Some Tenderly links may not work when running a stacked simulation. Check out Tenderly's Virtual TestNets as a workaround.⚠️"

sign NETWORK="" TASK="" OWNER_SAFE_NAME="" HD_PATH="0":
    #!/usr/bin/env bash
    set -euo pipefail
    root_dir=$(git rev-parse --show-toplevel)
    root_just_file="${root_dir}/src/improvements/justfile"
    
    echo -e "\033[42m                                         \033[0m"
    echo -e "\033[42m       superchain-ops sign task          \033[0m"
    echo -e "\033[42m                                         \033[0m"

    show_usage() {
        echo
        echo "Usage: just sign <network> <task> [owner-safe-name] [hd-path]"
        echo "Available arguments:"
        echo "  • <network>         - The network to sign the stack for (e.g. 'sep', 'eth')"
        echo "  • <task>            - The task to sign the stack for (e.g. '001-task-name')"
        echo "  • [owner-safe-name] - The owner safe name to sign the task for (e.g. 'foundation', 'council', 'foundation-operations', 'chain-governor' etc.) - may be left empty for single safes."
        echo "  • [hd-path]         - This is the hd path of the signer. If not provided, the default is 0."
        echo
    }

    if [ -z "{{NETWORK}}" ] || [ -z "{{TASK}}" ]; then
        show_usage
        exit 0
    fi
    
    export SIGNING_MODE_IN_PROGRESS=true # This environment variable is typically used to reduce logging. TODO: Should consolidate this in the future.
    export STACKED_SIGNING_MODE=true # This environment variable is only ever set to true in this sign command. 

    ETH_RPC_URL=$(just --justfile "$root_just_file" _fetch-rpc-url "{{NETWORK}}")
    safe=$(just --justfile "$root_just_file" _fetch-safe "{{NETWORK}}" "{{TASK}}" "{{OWNER_SAFE_NAME}}")

    echo -e "⏳ You are signing the task: {{TASK}} for network: {{NETWORK}}\n"
    just --justfile "$root_just_file" list-stack {{NETWORK}} {{TASK}}
    count=$(just --justfile "$root_just_file" _count-pending-tasks {{NETWORK}} {{TASK}}) # return the count of tasks.
    formatted_addresses=$(just --justfile "$root_just_file" _get-owner-addresses-string "$count" "$safe")

    # We only support signing with ledger for now.
    signer_args=$(just --justfile "$root_just_file" _get-signer-args {{HD_PATH}})
    ${root_dir}/bin/eip712sign ${signer_args} -- \
     forge script ${root_dir}/src/improvements/tasks/StackedSimulator.sol:StackedSimulator --sig "simulateStack(string,string,address[])" "{{NETWORK}}" "{{TASK}}" "$formatted_addresses" --ffi --rpc-url $ETH_RPC_URL

list-stack NETWORK="" TASK="":
    #!/usr/bin/env bash
    set -euo pipefail
    root_dir=$(git rev-parse --show-toplevel)

    show_usage() {
        echo
        echo "Usage: just list-stack <network> [task]"
        echo "This command will list all the tasks that can be simulated for a given network."
        echo "Available arguments:"
        echo "  • <network> - The network to simulate the stack for (e.g. 'sep', 'eth')"
        echo "  • [task]    - The task to simulate the stack for (e.g. '001-task-name')"
        echo
    }

    # Check if network arg exists
    if [ -z "{{NETWORK}}" ]; then
        echo -e "\n\033[31mError: No network specified\033[0m"
        show_usage
        exit 1
    fi

    if [ -z "{{TASK}}" ]; then
        echo "Listing all tasks for network: {{NETWORK}}"
        forge script ${root_dir}/src/improvements/tasks/StackedSimulator.sol:StackedSimulator --sig "listStack(string)" {{NETWORK}}
    else
        echo "Listing all tasks for network: {{NETWORK}} up to task: {{TASK}}"
        forge script ${root_dir}/src/improvements/tasks/StackedSimulator.sol:StackedSimulator --sig "listStack(string,string)" {{NETWORK}} {{TASK}}
    fi

test:
    forge build
    forge test
    just simulate-all-templates


########################
### Helper functions ###
########################
# not intended for end users
_fetch-rpc-url NETWORK="":
    #!/usr/bin/env bash
    set -euo pipefail
    profile="${FOUNDRY_PROFILE:-default}"
    case "{{NETWORK}}" in
      sep)  yq eval ".profile.\"${profile}\".rpc_endpoints.sepolia" "$(git rev-parse --show-toplevel)/foundry.toml" ;;
      eth)  yq eval ".profile.\"${profile}\".rpc_endpoints.mainnet" "$(git rev-parse --show-toplevel)/foundry.toml" ;;
      *)    echo "Error: Must provide a valid network, '{{NETWORK}}' is not valid." >&2; exit 1 ;;
    esac

# Helper function to fetch the safe address for a given network and task.
[no-cd] 
_fetch-safe NETWORK TASK OWNER_SAFE_NAME:
    #!/usr/bin/env bash
    set -euo pipefail
    root_dir=$(git rev-parse --show-toplevel)
    safe="0x0000000000000000000000000000000000000000" # Default to zero address for non-nested safes
    taskPath=${root_dir}/src/improvements/tasks/{{NETWORK}}/{{TASK}}
    if [ -n "{{OWNER_SAFE_NAME}}" ]; then
        safe=$(bash ${root_dir}/src/improvements/script/get-safe.sh $taskPath "{{OWNER_SAFE_NAME}}")
        echo "⏳ You're signing as safe: $safe ({{OWNER_SAFE_NAME}})" >&2
    fi
    echo "${safe}"

# Helper function to count the number of pending tasks for a given network.
[no-cd] 
_count-pending-tasks NETWORK TASK="":
    #!/usr/bin/env bash
    set -euo pipefail
    root_dir=$(git rev-parse --show-toplevel)
    if [ -z "{{TASK}}" ]; then
        count=$(forge script ${root_dir}/src/improvements/tasks/StackedSimulator.sol:StackedSimulator --sig "listStack(string)" {{NETWORK}} --json | jq -r '.returns["0"].value')
    else
        count=$(forge script ${root_dir}/src/improvements/tasks/StackedSimulator.sol:StackedSimulator --sig "listStack(string,string)" {{NETWORK}} {{TASK}} --json | jq -r '.returns["0"].value')
    fi
    echo "$count"

# Helper function to get the signer arguments for a given hdPath. We do not need to support signing with keystores.
[no-cd]
_get-signer-args hdPath='0':
    #!/usr/bin/env bash
    set -euo pipefail
    root_dir=$(git rev-parse --show-toplevel)
    hdpaths="m/44'/60'/{{hdPath}}'/0/0"
    signer=$(cast wallet address --ledger --mnemonic-derivation-path $hdpaths)
    signer_args="--ledger --hd-paths $hdpaths"
    echo $signer_args

# Helper function to get the owner addresses string for a given count and safe address.
[no-cd]
_get-owner-addresses-string COUNT SAFE_ADDRESS:
    #!/usr/bin/env bash
    set -euo pipefail
    
    owner_addresses=()
    if (( {{COUNT}} > 1 )); then
      for i in $(seq 1 $(({{COUNT}}-1))); do
          owner_addresses+=("0x0000000000000000000000000000000000000000")
      done
    fi
    owner_addresses+=("{{SAFE_ADDRESS}}")
    
    # Format the bash array into a string for forge script
    formatted_addresses=$(IFS=,; echo "[${owner_addresses[*]}]")
    echo "$formatted_addresses"