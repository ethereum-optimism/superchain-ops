# Create a new template or task
# e.g. just new [template|task]
new COMMAND="":
    #!/usr/bin/env bash
    set -euo pipefail
    
    echo -e "\033[42m                          \033[0m"
    echo -e "\033[42m    superchain-ops cli    \033[0m"
    echo -e "\033[42m                          \033[0m"

    show_usage() {
        echo
        echo "Usage: just new [template|task]"
        echo "Available commands:"
        echo "  • template  - Create a new template"
        echo "  • task      - Create a new task"
        echo
    }
    
    # shellcheck disable=SC2050
    if [ "{{COMMAND}}" = "" ]; then
        echo -e "\n\033[31mError: No command specified\033[0m"
        show_usage
        exit 1
    fi
    
    # shellcheck disable=SC2194
    case "{{COMMAND}}" in
        template)
            ./script/create-template.sh
            ;;
        task)    
            ./script/create-task.sh
            ;;
        *)
            echo -e "\n\033[31mError: Invalid command '{{COMMAND}}'\033[0m"
            show_usage
            exit 1
            ;;
    esac

task COMMAND="" NETWORK="":
    #!/usr/bin/env bash
    set -euo pipefail

    echo -e "\033[42m                          \033[0m"
    echo -e "\033[42m    superchain-ops cli    \033[0m"
    echo -e "\033[42m                          \033[0m"

    if [ "{{COMMAND}}" = "" ]; then
        echo -e "\n\033[31mError: No command specified\033[0m\n"
        exit 1
    fi

    # shellcheck disable=SC2194
    case "{{COMMAND}}" in
        ls)
            echo ""
            ./script/sorted-tasks.sh {{NETWORK}}
            ;;
        *)
            echo -e "\n\033[31mError: Invalid command '{{COMMAND}}'\033[0m\n"
            exit 1
            ;;
    esac
    
monorepo-integration-test COMMAND="":
    #!/usr/bin/env bash
    set -euo pipefail

    # Set FOUNDRY_PROFILE, defaulting to 'default' if not already set.
    export FOUNDRY_PROFILE="${FOUNDRY_PROFILE:-default}"
    echo "Currently running with FOUNDRY_PROFILE: ${FOUNDRY_PROFILE}"

    root_dir=$(git rev-parse --show-toplevel)
    allocs_path="${root_dir}/lib/optimism/packages/contracts-bedrock/allocs.json"

    # Running this command with mainnet RPC URL.
    ETH_RPC_URL=$(yq eval ".profile.\"${FOUNDRY_PROFILE}\".rpc_endpoints.mainnet" "${root_dir}/foundry.toml")
    export ETH_RPC_URL
    echo "Using mainnet RPC: ${ETH_RPC_URL}"
    
    # For now, we are running monorepo integration tests for the example eth tasks only.
    mainnet_network_task_dir="eth" 

    forge build
    forge script ${root_dir}/src/improvements/tasks/TaskRunner.sol:TaskRunner --sig "run(string,string)" ${allocs_path} ${mainnet_network_task_dir} --ffi --rpc-url $ETH_RPC_URL
    export SUPERCHAIN_OPS_ALLOCS_PATH=./allocs.json
    cd ${root_dir}/lib/optimism/packages/contracts-bedrock/

    export NO_MATCH_CONTRACTS="OptimismPortal2WithMockERC20_Test\|OptimismPortal2_FinalizeWithdrawal_Test\|AnchorStateRegistry_*\|FaultDisputeGame_Test\|PermissionedDisputeGame_Test\|FaultDispute_1v1_Actors_Test\|DelayedWETH_Hold_Test"
    # shellcheck disable=SC2194
    case "{{COMMAND}}" in
        rerun)
            just test-upgrade-rerun --no-match-contract "${NO_MATCH_CONTRACTS}"
            ;;
        *)
            just test-upgrade --no-match-contract "${NO_MATCH_CONTRACTS}"
            ;;
    esac
    rm -f ${allocs_path} # clean up

check-superchain-registry-latest:
    #!/usr/bin/env bash
    set -euo pipefail
    root_dir=$(git rev-parse --show-toplevel)
    bash ${root_dir}/src/improvements/script/check-superchain-latest.sh

# this is command is mainly for CI testing purposes and not task developers
# task developers can run this locally, however it is expected that this
# command will be run mostly by CI.
simulate-all-templates:
    #!/usr/bin/env bash
    set -euo pipefail
    root_dir=$(git rev-parse --show-toplevel)
    forge build

    # If the task is nested then we only simulate as the foundation.
    # In the future we could simulate as other nested safes. 
    # For testing purposes, we do not gain anything by simulating as other nested safes.
    nested_safe_name="foundation"
    simulation_count=0
    for task in ${root_dir}/test/tasks/example/*/*; do
        if [ -d "$task" ]; then
            ${root_dir}/src/improvements/script/simulate-task.sh $task $nested_safe_name
            simulation_count=$((simulation_count + 1))
        fi
    done
    echo "$simulation_count simulations run."
    template_count=$(find "${root_dir}/src/improvements/template" -type f ! -name "*.template.sol" | wc -l)

    if [ "$simulation_count" -ne "$template_count" ]; then
        echo "Not all templates files have a corresponding task. Please add a task for a template in ${root_dir}/src/improvements/tasks/example" >&2
        exit 1
    fi

simulate-verify-task TASK="":
    #!/usr/bin/env bash
    set -euo pipefail
    root_dir=$(git rev-parse --show-toplevel)

    forge build

    # If the task is nested then we only simulate as the foundation.
    # In the future we could simulate as other nested safes. 
    # For testing purposes, we do not gain anything by simulating as other nested safes.
    nested_safe_name="foundation"

    ${root_dir}/src/improvements/script/simulate-verify-task.sh {{TASK}} $nested_safe_name
