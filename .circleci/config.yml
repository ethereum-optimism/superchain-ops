version: 2.1

parameters:
  ci_builder_image:
    type: string
    default: us-docker.pkg.dev/oplabs-tools-artifacts/images/ci-builder:v0.47.3
  l1_mainnet_rpc_url:
    type: string
    default: "https://ci-mainnet-l1.optimism.io"
  l1_sepolia_rpc_url:
    type: string
    default: "https://ci-sepolia-l1.optimism.io"
  l2_mainnet_rpc_url:
    type: string
    default: "https://mainnet.optimism.io"
  l2_sepolia_rpc_url:
    type: string
    default: "https://sepolia.optimism.io"
  time_diff_threshold:
    type: integer
    default: 5

jobs:
  check_sepolia_rpc_endpoints:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>

    steps:
      - checkout
      - run:
          name: Check Sepolia RPC Endpoints
          command: |
            if ./ops/verify-geth-endpoint.sh "<< pipeline.parameters.l1_sepolia_rpc_url >>"; then
              if ops/verify-geth-endpoint.sh "<< pipeline.parameters.l2_sepolia_rpc_url >>"; then
                echo "Both RPC endpoints are up to date and not syncing."
                echo "L1_RPC_SEPOLIA=<< pipeline.parameters.l1_sepolia_rpc_url >>" >> $BASH_ENV
                echo "L2_RPC_SEPOLIA=<< pipeline.parameters.l2_sepolia_rpc_url >>" >> $BASH_ENV
              else
                echo "L2 RPC endpoint failed the checks."
                exit 1
              fi
            else
              echo "L1 RPC endpoint failed the checks."
              exit 1
            fi
      - run: |
          cp $BASH_ENV bash.env
      - persist_to_workspace:
          root: .
          paths:
            - bash.env

  check_mainnet_rpc_endpoints:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>

    steps:
      - checkout
      - run:
          name: Check Mainnet RPC Endpoints
          command: |
            if ops/verify-geth-endpoint.sh "<< pipeline.parameters.l1_mainnet_rpc_url >>";then
             if ops/verify-geth-endpoint.sh "<< pipeline.parameters.l2_mainnet_rpc_url >>"; then
                echo "Both RPC endpoints are up to date and not syncing."
                echo "L1_RPC_MAINNET=<< pipeline.parameters.l1_mainnet_rpc_url >>" >> $BASH_ENV
                echo "L2_RPC_MAINNET=<< pipeline.parameters.l2_mainnet_rpc_url >>" >> $BASH_ENV
              else
                echo "L2 RPC endpoint failed the checks."
                exit 1
              fi
            else
              echo "L1 RPC endpoint failed the checks."
              exit 1
            fi
      - run: |
          cp $BASH_ENV bash.env
      - persist_to_workspace:
          root: .
          paths:
            - bash.env

  check_task_statuses:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check task statuses
          command: bash ./script/utils/check-task-statuses.sh

  # TODO: remove/replace when there are real consumers of the RPC URLs
  example_mainnet_job:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>

    steps:
      - attach_workspace:
          at: .
      - run: |
          cat bash.env >> $BASH_ENV
      - run:
          name: Use RPC URLs
          command: |
            if [ -z "$L1_RPC_MAINNET" ] || [ -z "$L2_RPC_MAINNET" ]; then
                echo "Required RPC URLs are not available."
            fi
              L1_RPC_URL=$L1_RPC_MAINNET
              L2_RPC_URL=$L2_RPC_MAINNET
              echo "L1 RPC URL: $L1_RPC_URL"
              echo "L2 RPC URL: $L2_RPC_URL"
              # Use L1_RPC_URL and L2_RPC_URL here.

  just_simulate_sc_rehearsal_1:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>

    steps:
      - checkout
      - run:
          name: just simulate r1-hello-council
          command: |
            just install
            cd security-council-rehearsals
            just setup r1-hello-council tmp-ci
            cd *r1-hello-council-tmp-ci
            export SIMULATE_WITHOUT_LEDGER=1
            just simulate
            just prepare-json
            just simulate # simulate again to make sure the json is still valid
  just_simulate_sc_rehearsal_2:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>

    steps:
      - checkout
      - run:
          name: just simulate r2-remove-signer
          command: |
            just install
            cd security-council-rehearsals
            just setup r2-remove-signer tmp-ci
            cd *r2-remove-signer-tmp-ci
            export SIMULATE_WITHOUT_LEDGER=1
            just simulate
            just get-owners
            just prepare
            just simulate # simulate again to make sure the json is still valid
  just_simulate_sc_rehearsal_4:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>

    steps:
      - checkout
      - run:
          name: just simulate r4-jointly-upgrade
          command: |
            just install
            cd security-council-rehearsals
            just setup r4-jointly-upgrade tmp-ci
            cd *r4-jointly-upgrade-tmp-ci
            export SIMULATE_WITHOUT_LEDGER=1
            just simulate-council
            just prepare-json
            just simulate-council # simulate again to make sure the json is still valid

  just_simulate_eth-012-proto-ver-required:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    steps:
      - checkout
      - run:
          name: just simulate eth/012-proto-ver-required
          command: |
            go install github.com/mikefarah/yq/v4@latest
            just install
            cd tasks/eth/012-proto-ver-required
            export SIMULATE_WITHOUT_LEDGER=1
            just \
            --dotenv-path $(pwd)/.env \
            --justfile ../../../single.just \
            simulate

  just_simulate_eth-013-fp-upgrade-fjord:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    steps:
      - checkout
      - run:
          name: just simulate eth/013-fp-upgrade-fjord
          command: |
            just install
            cd tasks/eth/013-fp-upgrade-fjord
            export SIMULATE_WITHOUT_LEDGER=1
            just \
              --dotenv-path .env \
              --justfile ../../../nested.just \
              simulate council
            just \
              --dotenv-path .env \
              --justfile ../../../nested.just \
              simulate foundation

  just_simulate_eth-014-fjord-gas-config:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    steps:
      - checkout
      - run:
          name: just simulate eth/014-fjord-gas-config
          command: |
            go install github.com/mikefarah/yq/v4@latest
            just install
            cd tasks/eth/014-fjord-gas-config
            export SIMULATE_WITHOUT_LEDGER=1
            just \
            --dotenv-path $(pwd)/.env \
            --justfile ../../../single.just \
            simulate

  forge_fmt:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    steps:
      - checkout
      - run:
          name: forge fmt
          command: |
            just install
            forge --version
            forge fmt --check

  print_versions:
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    steps:
      - checkout
      - run:
          name: print versions
          command: |
            just --version
            yq --version
            forge --version

workflows:
  print_versions:
    jobs:
      - print_versions
  forge_checks:
    jobs:
      - forge_fmt
  check_rpc_endpoints:
    jobs:
      - check_sepolia_rpc_endpoints
      - check_mainnet_rpc_endpoints
      - example_mainnet_job:
          requires:
            - check_mainnet_rpc_endpoints
  task_validation:
    jobs:
      - check_task_statuses
  check_just_simulate:
    jobs:
      # Please add an invocation to `just simulate` if a ceremony is
      # active (e.g. it is the next ceremony to perform or you
      # expect the ceremony to work continuously), and remove it once
      # the ceremony is for historical archive only (e.g. the
      # ceremony is done).
      - just_simulate_sc_rehearsal_1
      - just_simulate_sc_rehearsal_2
      - just_simulate_sc_rehearsal_4
      - just_simulate_eth-012-proto-ver-required
      - just_simulate_eth-013-fp-upgrade-fjord
      - just_simulate_eth-014-fjord-gas-config
