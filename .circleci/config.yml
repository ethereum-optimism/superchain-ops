version: 2.1

orbs:
  utils: ethereum-optimism/circleci-utils@1.0.19
  slack: circleci/slack@4.10.1
  github-cli: circleci/github-cli@2.7.0

executors:
  default:
    machine:
      image: ubuntu-2204:2024.08.1

parameters:
  default_docker_image:
    type: string
    default: cimg/base:2024.01
  github-event-type:
    type: string
    default: "__not_set__"
  github-event-action:
    type: string
    default: "__not_set__"
  github-event-base64:
    type: string
    default: "__not_set__"

commands:
  notify-failures-on-main:
    description: "Notify Slack"
    parameters:
      channel:
        type: string
        default: C03N11M0BBN
      mentions:
        type: string
        default: ""
    steps:
      - slack/notify:
          channel: << parameters.channel >>
          event: fail
          template: basic_fail_1
          branch_pattern: main
          mentions: "<< parameters.mentions >>"

jobs:
  check_task_statuses:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - attach_workspace:
          at: .
      - run:
          name: Check task statuses
          command: bash ./src/script/check-task-statuses.sh

  check_superchain_registry:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - attach_workspace:
          at: .
      - run:
          name: Check superchain registry
          command: |
            just install
            (cd src/ && just --justfile ci.just check-superchain-registry-latest)
      - notify-failures-on-main:
          mentions: "@evm-safety-team"

  stacked_simulation:
    description: "Runs a stacked simulation"
    parameters:
      network:
        type: string
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    resource_class: xlarge
    environment:
      FOUNDRY_PROFILE: ci
    steps:
      - utils/checkout-with-mise
      - run:
          name: "Run stacked simulation for network: <<parameters.network>>"
          # This may need to be increased in the future. We should focus on fixing the performance first before bumping this.
          no_output_timeout: 30m 
          command: |
            just install
            cd src/
            just simulate-stack <<parameters.network>> > stack-simulation-output.txt
      - store_artifacts:
          path: src/stack-simulation-output.txt
      - notify-failures-on-main:
          mentions: "@evm-safety-team"

  forge_build:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: forge build
          command: |
            just install
            forge --version
            forge build --deny-warnings

  forge_fmt:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: forge fmt
          command: |
            just install
            forge --version
            forge fmt --check

  forge_test:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    resource_class: xlarge
    environment:
      FOUNDRY_PROFILE: ci
    steps:
      - utils/checkout-with-mise
      - run:
          name: forge test
          max_auto_reruns: 3
          auto_rerun_delay: 10s
          command: |
            just install
            forge --version
            forge test -vvv
      - notify-failures-on-main:
          mentions: "@evm-safety-team"

  template_regression_tests:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    environment:
      FOUNDRY_PROFILE: ci
    steps:
      - utils/checkout-with-mise
      - run:
          name: Make sure all templates can be simulated.
          max_auto_reruns: 3
          auto_rerun_delay: 10s
          command: |
            export L1_MAINNET_RPC=${L1_RPC_ALCHEMY}
            export L1_SEPOLIA_RPC=${L1_RPC_ALCHEMY}

            just --justfile src/ci.just simulate-all-templates
      - notify-failures-on-main:
          mentions: "@evm-safety-team"

  just_new_recipe_tests:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: just new recipe tests
          command: |
            (cd src/ && bash script/test-just-new.sh)

  print_versions:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: print versions
          command: |
            just --version
            yq --version
            forge --version

  shellcheck:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: shellcheck
          command:
            | # Justfiles are not shell scripts and should not be checked with shellcheck
            (cd src/script && shellcheck -x *.sh)
  # Check that all task directories have valid names and there are no duplicate prefixes.
  check_task_names:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: check task names
          command: (cd src/script && ./check-task-names.sh)
  close-issue:
    machine:
      image: ubuntu-2204:2024.08.1
    parameters:
      label_name:
        type: string
      message:
        type: string
    steps:
      - github-cli/install
      - utils/github-event-handler-setup:
          github_event_base64: << pipeline.parameters.github-event-base64 >>
          env_prefix: "github_"
      - run:
          name: Close issue if label is added
          command: |
            echo "Closing issue $github_pull_request_number if label $github_label_name is added on repository ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
            if [ ! -z "$github_pull_request_number" ] && [ "$github_label_name" = "$LABEL_NAME" ]; then
                export GH_TOKEN=$GITHUB_TOKEN_GOVERNANCE
                gh issue close --repo "${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}" "$github_pull_request_number" --comment "$MESSAGE"
            fi
          environment:
            MESSAGE: << parameters.message >>
            LABEL_NAME: << parameters.label_name >>

workflows:
  main:
    when:
      or:
        # Trigger on new commits
        - equal: [webhook, << pipeline.trigger_source >>]
        - equal: ["build_four_hours", <<pipeline.schedule.name>>]
    jobs:
      - print_versions:
          context:
            - circleci-repo-readonly-authenticated-github-token
      # Forge checks.
      - forge_build:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - forge_fmt:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - forge_test:
          context:
            - circleci-repo-readonly-authenticated-github-token
            - circleci-repo-superchain-ops-jan-rpc-debugging
      - template_regression_tests:
          context:
            - circleci-repo-readonly-authenticated-github-token
            - circleci-repo-superchain-ops-jan-rpc-debugging
      # - just_new_recipe_tests
      # - shellcheck:
      #     context:
      #       - circleci-repo-readonly-authenticated-github-token
      # - check_task_names
      # # Verify that all tasks have a valid status in their README.
      # - check_task_statuses:
      #     context:
      #       - circleci-repo-readonly-authenticated-github-token
      # check that superchain-registry is up to date
      # - check_superchain_registry:
      #     context:
      #       - circleci-repo-readonly-authenticated-github-token

      # Stacked simulations for superchain-ops on Mainnet.
      - stacked_simulation:
          name: stacked_simulation_eth
          network: "eth"
          context:
            - circleci-repo-readonly-authenticated-github-token
            - circleci-repo-superchain-ops-jan-rpc-debugging

      # Stacked simulations for superchain-ops on Sepolia.
      - stacked_simulation:
          name: stacked_simulation_sep
          network: "sep"
          context:
            - circleci-repo-readonly-authenticated-github-token
            - circleci-repo-superchain-ops-jan-rpc-debugging

  close-issue-workflow:
    when:
      and:
        - equal: [<< pipeline.trigger_source >>, "api"]
        - equal: [<< pipeline.parameters.github-event-type >>, "pull_request"]
        - equal: [<< pipeline.parameters.github-event-action >>, "labeled"]
    jobs:
      - close-issue:
          label_name: "auto-close-trivial-contribution"
          message: "Thank you for your interest in contributing!
            At this time, we are not accepting contributions that primarily fix spelling, stylistic, or grammatical errors in documentation, code, or elsewhere.
            Please check our [contribution guidelines](https://github.com/ethereum-optimism/optimism/blob/develop/CONTRIBUTING.md#contributions-related-to-spelling-and-grammar) for more information.
            This issue will be closed now."
          context:
            - circleci-repo-superchain-ops
