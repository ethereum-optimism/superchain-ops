version: 2.1

orbs:
  utils: ethereum-optimism/circleci-utils@1.0.19
  slack: circleci/slack@4.10.1
  github-cli: circleci/github-cli@2.7.0

executors:
  default:
    machine:
      image: ubuntu-2204:2024.08.1

parameters:
  default_docker_image:
    type: string
    default: cimg/base:2024.01
  l1_mainnet_rpc_url:
    type: string
    default: "https://ci-mainnet-l1-archive.optimism.io"
  l1_sepolia_rpc_url:
    type: string
    default: "https://ci-sepolia-l1.optimism.io"
  l2_mainnet_rpc_url:
    type: string
    default: "https://mainnet.optimism.io"
  l2_sepolia_rpc_url:
    type: string
    default: "https://sepolia.optimism.io"
  time_diff_threshold:
    type: integer
    default: 5
  github-event-type:
    type: string
    default: "__not_set__"
  github-event-action:
    type: string
    default: "__not_set__"
  github-event-base64:
    type: string
    default: "__not_set__"

commands:
  notify-failures-on-main:
    description: "Notify Slack"
    parameters:
      channel:
        type: string
        default: C03N11M0BBN
      mentions:
        type: string
        default: ""
    steps:
      - slack/notify:
          channel: << parameters.channel >>
          event: fail
          template: basic_fail_1
          branch_pattern: main
          mentions: "<< parameters.mentions >>"

jobs:
  check_task_statuses:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - attach_workspace:
          at: .
      - run:
          name: Check task statuses
          command: bash ./script/utils/check-task-statuses.sh

  check_nonce_overrides:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - attach_workspace:
          at: .
      - run:
          name: Check nonce overrides
          command: bash ./script/utils/check-nonce-overrides.sh

  check_superchain_registry:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - attach_workspace:
          at: .
      - run:
          name: Check superchain registry
          command: |
            just install
            (cd src/improvements && just check-superchain-registry-latest)
      - notify-failures-on-main:
          mentions: "@evm-safety-team"

  just_simulate_sc_rehearsal_1:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: just simulate r1-hello-council
          environment:
            FOUNDRY_PROFILE: ci
          command: |
            just install
            cd security-council-rehearsals
            just setup r1-hello-council tmp-ci
            cd *r1-hello-council-tmp-ci
            export SIMULATE_WITHOUT_LEDGER=1
            just simulate
            just prepare-json
            just simulate # simulate again to make sure the json is still valid

  just_simulate_sc_rehearsal_2:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    environment:
      FOUNDRY_PROFILE: ci
    steps:
      - utils/checkout-with-mise
      - run:
          name: just simulate r2-remove-signer
          command: |
            just install
            cd security-council-rehearsals
            just setup r2-remove-signer tmp-ci
            cd *r2-remove-signer-tmp-ci
            export SIMULATE_WITHOUT_LEDGER=1
            just simulate
            just get-owners
            just prepare
            just simulate # simulate again to make sure the json is still valid

  just_simulate_sc_rehearsal_4:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    environment:
      FOUNDRY_PROFILE: ci
    steps:
      - utils/checkout-with-mise
      - run:
          name: just simulate r4-jointly-upgrade
          command: |
            just install
            cd security-council-rehearsals
            just setup r4-jointly-upgrade tmp-ci
            cd *r4-jointly-upgrade-tmp-ci
            export SIMULATE_WITHOUT_LEDGER=1
            just simulate-council
            just prepare-json
            just simulate-council # simulate again to make sure the json is still valid

  stacked_simulation:
    description: "Runs a stacked simulation"
    parameters:
      network:
        type: string
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    resource_class: xlarge
    environment:
      FOUNDRY_PROFILE: ci
    steps:
      - utils/checkout-with-mise
      - run:
          name: "Run stacked simulation for network: <<parameters.network>>"
          # This may need to be increased in the future. We should focus on fixing the performance first before bumping this.
          no_output_timeout: 30m 
          command: |
            just install
            cd src/improvements
            just simulate-stack <<parameters.network>> > stack-simulation-output.txt
      - store_artifacts:
          path: src/improvements/stack-simulation-output.txt
      - notify-failures-on-main:
          mentions: "@evm-safety-team"

  just_simulate_nested:
    description: "Runs simulations of a nested task"
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    parameters:
      task:
        type: string
    steps:
      - utils/checkout-with-mise
      - run:
          name: "simulate nested << parameters.task >>"
          environment:
            FOUNDRY_PROFILE: ci
          command: |
            just install
            cd tasks/<< parameters.task >>
            SIMULATE_WITHOUT_LEDGER=true just \
              --dotenv-path $(pwd)/.env \
              --justfile ../../../nested.just \
              simulate foundation
            SIMULATE_WITHOUT_LEDGER=true just \
              --dotenv-path $(pwd)/.env \
              --justfile ../../../nested.just \
              simulate council

  just_simulate_op_sep_prestate_update:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - simulate_nested:
          task: "/sep/032-op-pectra-defence"

  simulate_sequence:
    description: "Runs a sequence of simulations"
    parameters:
      network:
        type: string
      tasks:
        type: string
      block_number:
        type: string
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: "Run simulation sequence for network: <<parameters.network>> | tasks: <<parameters.tasks>>"
          command: git submodule update; just clean; just install && echo "yes" | bash ./script/utils/sim-sequence.sh <<parameters.network>> "<<parameters.tasks>>" "<<parameters.block_number>>"

  forge_build:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: forge build
          command: |
            just install
            forge --version
            forge build --deny-warnings

  forge_fmt:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: forge fmt
          command: |
            just install
            forge --version
            forge fmt --check

  forge_test:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    resource_class: xlarge
    environment:
      FOUNDRY_PROFILE: ci
    steps:
      - utils/checkout-with-mise
      - run:
          name: forge test
          command: |
            just install
            forge --version
            forge test -vvv

  template_regression_tests:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    environment:
      FOUNDRY_PROFILE: ci
    steps:
      - utils/checkout-with-mise
      - run:
          name: Make sure all templates can be simulated.
          command: |
            (cd src/improvements && just simulate-all-templates)
      - notify-failures-on-main:
          mentions: "@evm-safety-team"

  just_new_recipe_tests:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: just new recipe tests
          command: |
            (cd src/improvements && bash script/test-just-new.sh)

  print_versions:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: print versions
          command: |
            just --version
            yq --version
            forge --version

  shellcheck:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: shellcheck
          command:
            | # Justfiles are not shell scripts and should not be checked with shellcheck
            (cd src/improvements/script && shellcheck -x *.sh)
  # Check that all task directories have valid names and there are no duplicate prefixes.
  check_task_names:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: check task names
          command: (cd src/improvements/script && ./check-task-names.sh)
  close-issue:
    machine:
      image: ubuntu-2204:2024.08.1
    parameters:
      label_name:
        type: string
      message:
        type: string
    steps:
      - github-cli/install
      - utils/github-event-handler-setup:
          github_event_base64: << pipeline.parameters.github-event-base64 >>
          env_prefix: "github_"
      - run:
          name: Close issue if label is added
          command: |
            echo "Closing issue $github_pull_request_number if label $github_label_name is added on repository ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
            if [ ! -z "$github_pull_request_number" ] && [ "$github_label_name" = "$LABEL_NAME" ]; then
                export GH_TOKEN=$GITHUB_TOKEN_GOVERNANCE
                gh issue close --repo "${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}" "$github_pull_request_number" --comment "$MESSAGE"
            fi
          environment:
            MESSAGE: << parameters.message >>
            LABEL_NAME: << parameters.label_name >>

workflows:
  main:
    when:
      or:
        # Trigger on new commits
        - equal: [webhook, << pipeline.trigger_source >>]
        - equal: ["build_four_hours", <<pipeline.schedule.name>>]
    jobs:
      - print_versions:
          context:
            - circleci-repo-readonly-authenticated-github-token
      # Forge checks.
      - forge_build:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - forge_fmt:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - forge_test:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - template_regression_tests:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - just_new_recipe_tests
      - shellcheck:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - check_task_names
      # Verify that all tasks have a valid status in their README.
      - check_task_statuses:
          context:
            - circleci-repo-readonly-authenticated-github-token
      # Verify that all tasks have correctly uppercased nonce overrides.
      - check_nonce_overrides:
          context:
            - circleci-repo-readonly-authenticated-github-token
      # check that superchain-registry is up to date
      - check_superchain_registry:
          context:
            - circleci-repo-readonly-authenticated-github-token
      # Task simulations.
      # Please add an invocation to `just simulate` if a ceremony is
      # active (e.g. it is the next ceremony to perform or you
      # expect the ceremony to work continuously), and remove it once
      # the ceremony is for historical archive only (e.g. the
      # ceremony is done).
      #
      # We skip rehearsal 1 because we already have completed this rehearsal (https://github.com/ethereum-optimism/superchain-ops/pull/459),
      # and now it fails with stack too deep after https://github.com/ethereum-optimism/superchain-ops/pull/528.
      # We wll need to rewrite the rehearsals with the new superchain-ops structure anyway, so this is ok.
      # - just_simulate_sc_rehearsal_1

      - just_simulate_sc_rehearsal_2:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - just_simulate_sc_rehearsal_4:
          context:
            - circleci-repo-readonly-authenticated-github-token

      - simulate_sequence:
          name: simulate_sequence_eth
          network: "eth"
          tasks: ""
          block_number: "" # If not specified, the latest block number is used.
          context:
            - circleci-repo-readonly-authenticated-github-token

      - simulate_sequence:
          name: simulate_sequence_sep
          network: "sep"
          tasks: ""
          block_number: "" # If not specified, the latest block number is used.
          context:
            - circleci-repo-readonly-authenticated-github-token

      # Stacked simulations for superchain-ops on Mainnet.
      - stacked_simulation:
          name: stacked_simulation_eth
          network: "eth"
          context:
            - circleci-repo-readonly-authenticated-github-token

      # Stacked simulations for superchain-ops on Sepolia.
      - stacked_simulation:
          name: stacked_simulation_sep
          network: "sep"
          context:
            - circleci-repo-readonly-authenticated-github-token

  close-issue-workflow:
    when:
      and:
        - equal: [<< pipeline.trigger_source >>, "api"]
        - equal: [<< pipeline.parameters.github-event-type >>, "pull_request"]
        - equal: [<< pipeline.parameters.github-event-action >>, "labeled"]
    jobs:
      - close-issue:
          label_name: "auto-close-trivial-contribution"
          message: "Thank you for your interest in contributing!
            At this time, we are not accepting contributions that primarily fix spelling, stylistic, or grammatical errors in documentation, code, or elsewhere.
            Please check our [contribution guidelines](https://github.com/ethereum-optimism/optimism/blob/develop/CONTRIBUTING.md#contributions-related-to-spelling-and-grammar) for more information.
            This issue will be closed now."
          context:
            - circleci-repo-superchain-ops
