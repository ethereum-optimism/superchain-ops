version: 2.1

parameters:
  default_docker_image:
    type: string
    default: cimg/base:2024.01
  l1_mainnet_rpc_url:
    type: string
    default: "https://ci-mainnet-l1.optimism.io"
  l1_sepolia_rpc_url:
    type: string
    default: "https://ci-sepolia-l1.optimism.io"
  l2_mainnet_rpc_url:
    type: string
    default: "https://mainnet.optimism.io"
  l2_sepolia_rpc_url:
    type: string
    default: "https://sepolia.optimism.io"
  time_diff_threshold:
    type: integer
    default: 5

commands:
  checkout-with-mise:
    steps:
      - checkout
      - run:
          name: Initialize mise environment
          command: |
            # This is used to create a per-user cache key to preserve permissions across different
            # executor types.
            user=$(whoami)
            echo "$user" > .executor-user
            echo "Set executor user to $user."

            if [[ "$user" == "root" ]]; then
              # Self-hosted runners will persist this cache between runs. Cleaning it up means that we
              # preserve the semantics of the cache regardless of executor type. It's also much faster
              # to delete the cache and recreate it than it is to overwrite it in place.
              rm -rf /data/mise-data
              echo "Cleaned up cache data."

              mkdir -p /data/mise-data
              echo "Created Mise data dir."
              mkdir -p ~/.cache
              echo "Created Mise cache dir."
            else
              sudo rm -rf /data/mise-data
              echo "Cleaned up cache data."
              sudo mkdir -p /data/mise-data
              sudo chown -R "$user:$user" /data/mise-data
              echo "Created Mise data dir."
              sudo mkdir -p ~/.cache
              sudo chown -R "$user:$user" ~/.cache
              echo "Created Mise cache dir."
            fi
      - restore_cache:
          name: Restore mise cache
          keys:
            - mise-v5-{{ checksum ".executor-user" }}-{{ checksum "mise.toml" }}
      - run:
          name: Install mise
          command: |
            if command -v mise &> /dev/null; then
              echo "mise already installed at $(command -v mise)"
            else
              curl https://mise.run | sh
            fi

            echo "export PATH=\"$HOME/.local/bin:\$PATH\"" >> "$BASH_ENV"
            echo "export MISE_DATA_DIR=/data/mise-data" >> "$BASH_ENV"
            echo "export MISE_JOBS=$(nproc)" >> "$BASH_ENV"
            echo "eval \"\$($HOME/.local/bin/mise activate --shims)\"" >> "$BASH_ENV"
      - run:
          name: Install mise deps
          command: |
            mise install -v -y
      - save_cache:
          name: Save mise cache
          key: mise-v5-{{ checksum ".executor-user" }}-{{ checksum "mise.toml" }}
          paths:
            - /data/mise-data
  
  simulate:
    description: "Runs simulations of a task"
    parameters:
      task:
        type: string
    steps:
      - checkout
      - run:
          name: "simulate << parameters.task >>"
          command: |
            just install
            cd tasks/<< parameters.task >>
            SIMULATE_WITHOUT_LEDGER=true just \
              --dotenv-path $(pwd)/.env \
              --justfile ../../../single.just \
              simulate

  simulate_nested:
    description: "Runs simulations of a nested task"
    parameters:
      task:
        type: string
    steps:
      - checkout
      - run:
          name: "simulate nested << parameters.task >>"
          command: |
            just install
            cd tasks/<< parameters.task >>
            SIMULATE_WITHOUT_LEDGER=true just \
              --dotenv-path $(pwd)/.env \
              --justfile ../../../nested.just \
              simulate foundation
            SIMULATE_WITHOUT_LEDGER=true just \
              --dotenv-path $(pwd)/.env \
              --justfile ../../../nested.just \
              simulate council

jobs:
  check_sepolia_rpc_endpoints:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - checkout-with-mise
      - run:
          name: Check Sepolia RPC Endpoints
          command: |
            if ./ops/verify-geth-endpoint.sh "<< pipeline.parameters.l1_sepolia_rpc_url >>"; then
              if ops/verify-geth-endpoint.sh "<< pipeline.parameters.l2_sepolia_rpc_url >>"; then
                echo "Both RPC endpoints are up to date and not syncing."
                echo "L1_RPC_SEPOLIA=<< pipeline.parameters.l1_sepolia_rpc_url >>" >> $BASH_ENV
                echo "L2_RPC_SEPOLIA=<< pipeline.parameters.l2_sepolia_rpc_url >>" >> $BASH_ENV
              else
                echo "L2 RPC endpoint failed the checks."
                exit 1
              fi
            else
              echo "L1 RPC endpoint failed the checks."
              exit 1
            fi
      - run: |
          cp $BASH_ENV bash.env
      - persist_to_workspace:
          root: .
          paths:
            - bash.env

  check_mainnet_rpc_endpoints:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - checkout-with-mise
      - run:
          name: Check Mainnet RPC Endpoints
          command: |
            if ops/verify-geth-endpoint.sh "<< pipeline.parameters.l1_mainnet_rpc_url >>"; then
              if ops/verify-geth-endpoint.sh "<< pipeline.parameters.l2_mainnet_rpc_url >>"; then
                echo "Both RPC endpoints are up to date and not syncing."
                echo "L1_RPC_MAINNET=<< pipeline.parameters.l1_mainnet_rpc_url >>" >> $BASH_ENV
                echo "L2_RPC_MAINNET=<< pipeline.parameters.l2_mainnet_rpc_url >>" >> $BASH_ENV
              else
                echo "L2 RPC endpoint failed the checks."
                exit 1
              fi
            else
              echo "L1 RPC endpoint failed the checks."
              exit 1
            fi
      - run: |
          cp $BASH_ENV bash.env
      - persist_to_workspace:
          root: .
          paths:
            - bash.env

  check_task_statuses:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - checkout-with-mise
      - attach_workspace:
          at: .
      - run:
          name: Check task statuses
          command: bash ./script/utils/check-task-statuses.sh

  check_nonce_overrides:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - checkout-with-mise
      - attach_workspace:
          at: .
      - run:
          name: Check nonce overrides
          command: bash ./script/utils/check-nonce-overrides.sh

  # TODO: remove/replace when there are real consumers of the RPC URLs
  example_mainnet_job:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - attach_workspace:
          at: .
      - run: |
          cat bash.env >> $BASH_ENV
      - run:
          name: Use RPC URLs
          command: |
            if [ -z "$L1_RPC_MAINNET" ] || [ -z "$L2_RPC_MAINNET" ]; then
                echo "Required RPC URLs are not available."
            fi
              L1_RPC_URL=$L1_RPC_MAINNET
              L2_RPC_URL=$L2_RPC_MAINNET
              echo "L1 RPC URL: $L1_RPC_URL"
              echo "L2 RPC URL: $L2_RPC_URL"
              # Use L1_RPC_URL and L2_RPC_URL here.

  just_simulate_sc_rehearsal_1:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - checkout-with-mise
      - run:
          name: just simulate r1-hello-council
          command: |
            just install
            cd security-council-rehearsals
            just setup r1-hello-council tmp-ci
            cd *r1-hello-council-tmp-ci
            export SIMULATE_WITHOUT_LEDGER=1
            just simulate
            just prepare-json
            just simulate # simulate again to make sure the json is still valid

  just_simulate_sc_rehearsal_2:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - checkout-with-mise
      - run:
          name: just simulate r2-remove-signer
          command: |
            just install
            cd security-council-rehearsals
            just setup r2-remove-signer tmp-ci
            cd *r2-remove-signer-tmp-ci
            export SIMULATE_WITHOUT_LEDGER=1
            just simulate
            just get-owners
            just prepare
            just simulate # simulate again to make sure the json is still valid

  just_simulate_sc_rehearsal_4:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - checkout-with-mise
      - run:
          name: just simulate r4-jointly-upgrade
          command: |
            just install
            cd security-council-rehearsals
            just setup r4-jointly-upgrade tmp-ci
            cd *r4-jointly-upgrade-tmp-ci
            export SIMULATE_WITHOUT_LEDGER=1
            just simulate-council
            just prepare-json
            just simulate-council # simulate again to make sure the json is still valid

  just_simulate_ink_respected_game_type:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - checkout-with-mise
      - simulate:
          task: "/eth/ink-002-set-respected-game-type"

  just_simulate_eth_029_holocene_system_config_upgrade_and_init_base:
    docker:
      - image: << pipeline.parameters.default_docker_image >>
    steps:
      - checkout-with-mise
      - simulate_nested:
          task: "/eth/029-holocene-system-config-upgrade-and-init-base"

  forge_build:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - checkout-with-mise
      - run:
          name: forge build
          command: |
            just install
            forge --version
            forge build --deny-warnings

  forge_fmt:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - checkout-with-mise
      - run:
          name: forge fmt
          command: |
            just install
            forge --version
            forge fmt --check
  
  forge_test:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - checkout-with-mise
      - run:
          name: forge test
          command: |
            forge --version
            forge test -vvv

  print_versions:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - checkout-with-mise
      - run:
          name: print versions
          command: |
            just --version
            yq --version
            forge --version

workflows:
  main:
    jobs:
      - print_versions
      # Forge checks.
      - forge_build
      - forge_fmt
      - forge_test
      # RPC endpoint checks.
      - check_sepolia_rpc_endpoints
      - check_mainnet_rpc_endpoints
      - example_mainnet_job:
          requires:
            - check_mainnet_rpc_endpoints
      # Verify that all tasks have a valid status in their README.
      - check_task_statuses
      # Verify that all tasks have correctly uppercased nonce overrides.
      - check_nonce_overrides
      # Task simulations.
      # Please add an invocation to `just simulate` if a ceremony is
      # active (e.g. it is the next ceremony to perform or you
      # expect the ceremony to work continuously), and remove it once
      # the ceremony is for historical archive only (e.g. the
      # ceremony is done).
      #
      # We skip rehearsal 1 because we already have completed this rehearsal (https://github.com/ethereum-optimism/superchain-ops/pull/459),
      # and now it fails with stack too deep after https://github.com/ethereum-optimism/superchain-ops/pull/528.
      # We wll need to rewrite the rehearsals with the new superchain-ops structure anyway, so this is ok.
      # - just_simulate_sc_rehearsal_1
      - just_simulate_sc_rehearsal_2
      - just_simulate_sc_rehearsal_4
      - just_simulate_ink_respected_game_type
      - just_simulate_eth_029_holocene_system_config_upgrade_and_init_base
      # sepolia
