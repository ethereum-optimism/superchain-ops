version: 2.1

orbs:
  utils: ethereum-optimism/circleci-utils@1.0.8
  slack: circleci/slack@4.10.1

parameters:
  default_docker_image:
    type: string
    default: cimg/base:2024.01
  l1_mainnet_rpc_url:
    type: string
    default: "https://ci-mainnet-l1-archive.optimism.io"
  l1_sepolia_rpc_url:
    type: string
    default: "https://ci-sepolia-l1.optimism.io"
  l2_mainnet_rpc_url:
    type: string
    default: "https://mainnet.optimism.io"
  l2_sepolia_rpc_url:
    type: string
    default: "https://sepolia.optimism.io"
  time_diff_threshold:
    type: integer
    default: 5

commands:  
  simulate:
    description: "Runs simulations of a task"
    parameters:
      task:
        type: string
    steps:
      - utils/checkout-with-mise
      - run:
          name: "simulate << parameters.task >>"
          environment:
            FOUNDRY_PROFILE: ci
          command: |
            just install
            cd tasks/<< parameters.task >>
            SIMULATE_WITHOUT_LEDGER=true just \
              --dotenv-path $(pwd)/.env \
              --justfile ../../../single.just \
              simulate

  simulate_nested:
    description: "Runs simulations of a nested task"
    parameters:
      task:
        type: string
    steps:
      - utils/checkout-with-mise
      - run:
          name: "simulate nested << parameters.task >>"
          environment:
            FOUNDRY_PROFILE: ci
          command: |
            just install
            cd tasks/<< parameters.task >>
            SIMULATE_WITHOUT_LEDGER=true just \
              --dotenv-path $(pwd)/.env \
              --justfile ../../../nested.just \
              simulate foundation
            SIMULATE_WITHOUT_LEDGER=true just \
              --dotenv-path $(pwd)/.env \
              --justfile ../../../nested.just \
              simulate council

  notify-failures-on-develop:
    description: "Notify Slack"
    parameters:
      channel:
        type: string
        default: C03N11M0BBN
      mentions:
        type: string
        default: ""
    steps:
      - slack/notify:
          channel: << parameters.channel >>
          event: fail
          template: basic_fail_1
          branch_pattern: main
          mentions: "<< parameters.mentions >>"

jobs:
  check_sepolia_rpc_endpoints:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: Check Sepolia RPC Endpoints
          command: |
            if ./ops/verify-geth-endpoint.sh "<< pipeline.parameters.l1_sepolia_rpc_url >>"; then
              if ops/verify-geth-endpoint.sh "<< pipeline.parameters.l2_sepolia_rpc_url >>"; then
                echo "Both RPC endpoints are up to date and not syncing."
                echo "L1_RPC_SEPOLIA=<< pipeline.parameters.l1_sepolia_rpc_url >>" >> $BASH_ENV
                echo "L2_RPC_SEPOLIA=<< pipeline.parameters.l2_sepolia_rpc_url >>" >> $BASH_ENV
              else
                echo "L2 RPC endpoint failed the checks."
                exit 1
              fi
            else
              echo "L1 RPC endpoint failed the checks."
              exit 1
            fi
      - run: |
          cp $BASH_ENV bash.env
      - persist_to_workspace:
          root: .
          paths:
            - bash.env

  check_mainnet_rpc_endpoints:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: Check Mainnet RPC Endpoints
          command: |
            if ops/verify-geth-endpoint.sh "<< pipeline.parameters.l1_mainnet_rpc_url >>"; then
              if ops/verify-geth-endpoint.sh "<< pipeline.parameters.l2_mainnet_rpc_url >>"; then
                echo "Both RPC endpoints are up to date and not syncing."
                echo "L1_RPC_MAINNET=<< pipeline.parameters.l1_mainnet_rpc_url >>" >> $BASH_ENV
                echo "L2_RPC_MAINNET=<< pipeline.parameters.l2_mainnet_rpc_url >>" >> $BASH_ENV
              else
                echo "L2 RPC endpoint failed the checks."
                exit 1
              fi
            else
              echo "L1 RPC endpoint failed the checks."
              exit 1
            fi
      - run: |
          cp $BASH_ENV bash.env
      - persist_to_workspace:
          root: .
          paths:
            - bash.env

  check_task_statuses:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - attach_workspace:
          at: .
      - run:
          name: Check task statuses
          command: bash ./script/utils/check-task-statuses.sh

  check_nonce_overrides:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - attach_workspace:
          at: .
      - run:
          name: Check nonce overrides
          command: bash ./script/utils/check-nonce-overrides.sh

  check_superchain_registry:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - attach_workspace:
          at: .
      - run:
          name: Check superchain registry
          command: |
            just install
            (cd src/improvements && just check-superchain-registry-latest)
      - notify-failures-on-develop:
          mentions: "@security-team"

  # TODO: remove/replace when there are real consumers of the RPC URLs
  example_mainnet_job:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - attach_workspace:
          at: .
      - run: |
          cat bash.env >> $BASH_ENV
      - run:
          name: Use RPC URLs
          command: |
            if [ -z "$L1_RPC_MAINNET" ] || [ -z "$L2_RPC_MAINNET" ]; then
                echo "Required RPC URLs are not available."
            fi
              L1_RPC_URL=$L1_RPC_MAINNET
              L2_RPC_URL=$L2_RPC_MAINNET
              echo "L1 RPC URL: $L1_RPC_URL"
              echo "L2 RPC URL: $L2_RPC_URL"
              # Use L1_RPC_URL and L2_RPC_URL here.

  just_simulate_sc_rehearsal_1:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: just simulate r1-hello-council
          environment:
            FOUNDRY_PROFILE: ci
          command: |
            just install
            cd security-council-rehearsals
            just setup r1-hello-council tmp-ci
            cd *r1-hello-council-tmp-ci
            export SIMULATE_WITHOUT_LEDGER=1
            just simulate
            just prepare-json
            just simulate # simulate again to make sure the json is still valid

  just_simulate_sc_rehearsal_2:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: just simulate r2-remove-signer
          environment:
            FOUNDRY_PROFILE: ci
          command: |
            just install
            cd security-council-rehearsals
            just setup r2-remove-signer tmp-ci
            cd *r2-remove-signer-tmp-ci
            export SIMULATE_WITHOUT_LEDGER=1
            just simulate
            just get-owners
            just prepare
            just simulate # simulate again to make sure the json is still valid

  just_simulate_sc_rehearsal_4:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: just simulate r4-jointly-upgrade
          environment:
            FOUNDRY_PROFILE: ci
          command: |
            just install
            cd security-council-rehearsals
            just setup r4-jointly-upgrade tmp-ci
            cd *r4-jointly-upgrade-tmp-ci
            export SIMULATE_WITHOUT_LEDGER=1
            just simulate-council
            just prepare-json
            just simulate-council # simulate again to make sure the json is still valid

  just_simulate_ink_respected_game_type:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - simulate:
          task: "/eth/ink-002-set-respected-game-type"

  just_simulate_zora_002_fp_upgrade:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - simulate_nested:
          task: "/sep/zora-002-fp-upgrade"

  forge_build:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: forge build
          command: |
            just install
            forge --version
            forge build --deny-warnings

  forge_fmt:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: forge fmt
          command: |
            just install
            forge --version
            forge fmt --check
  
  forge_test:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: forge test
          environment:
            FOUNDRY_PROFILE: ci
          command: |
            forge --version
            forge test -vvv
  
  monorepo_integration_test:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    environment:
      FOUNDRY_PROFILE: ci
    steps:
      - utils/checkout-with-mise
      - run:
          name: monorepo integration tests
          command: |
            (cd src/improvements && just monorepo-integration-test)
      - notify-failures-on-develop:
          mentions: "@security-team"
      - run:
          name: Print failed test traces
          command: (cd src/improvements && just monorepo-integration-test rerun)
          when: on_fail

  print_versions:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: print versions
          command: |
            just --version
            yq --version
            forge --version

  shellcheck:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: shellcheck
          command: | # Justfiles are not shell scripts and should not be checked with shellcheck
            (cd src/improvements/script && shellcheck -x *.sh)

workflows:
  main:
    when:
      or:
        # Trigger on new commits
        - equal: [webhook, << pipeline.trigger_source >>]
        - equal: ["build_four_hours", <<pipeline.schedule.name>>]
    jobs:
      - print_versions:
          context:
            - circleci-repo-readonly-authenticated-github-token
      # Forge checks.
      - forge_build:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - forge_fmt:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - forge_test:
          context:
            - circleci-repo-readonly-authenticated-github-token
      # This is a long running job, so we only run it on the main branch.
      - monorepo_integration_test:
          context:
            - circleci-repo-readonly-authenticated-github-token
          filters:
            branches:
              only: main
      - shellcheck:
          context:
            - circleci-repo-readonly-authenticated-github-token
      # RPC endpoint checks.
      - check_sepolia_rpc_endpoints:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - check_mainnet_rpc_endpoints:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - example_mainnet_job:
          context:
            - circleci-repo-readonly-authenticated-github-token
          requires:
            - check_mainnet_rpc_endpoints
      # Verify that all tasks have a valid status in their README.
      - check_task_statuses:
          context:
            - circleci-repo-readonly-authenticated-github-token
      # Verify that all tasks have correctly uppercased nonce overrides.
      - check_nonce_overrides:
          context:
            - circleci-repo-readonly-authenticated-github-token
      # check that superchain-registry is up to date
      - check_superchain_registry:
          context:
            - circleci-repo-readonly-authenticated-github-token
      # Task simulations.
      # Please add an invocation to `just simulate` if a ceremony is
      # active (e.g. it is the next ceremony to perform or you
      # expect the ceremony to work continuously), and remove it once
      # the ceremony is for historical archive only (e.g. the
      # ceremony is done).
      #
      # We skip rehearsal 1 because we already have completed this rehearsal (https://github.com/ethereum-optimism/superchain-ops/pull/459),
      # and now it fails with stack too deep after https://github.com/ethereum-optimism/superchain-ops/pull/528.
      # We wll need to rewrite the rehearsals with the new superchain-ops structure anyway, so this is ok.
      # - just_simulate_sc_rehearsal_1
      - just_simulate_sc_rehearsal_2:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - just_simulate_sc_rehearsal_4:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - just_simulate_ink_respected_game_type:
          context:
            - circleci-repo-readonly-authenticated-github-token
      # sepolia
      - just_simulate_zora_002_fp_upgrade:
          context:
            - circleci-repo-readonly-authenticated-github-token
       
