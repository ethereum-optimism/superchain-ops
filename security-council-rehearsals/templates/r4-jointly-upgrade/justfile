set dotenv-load

export rpcUrl := env_var_or_default('ETH_RPC_URL', "https://ethereum.publicnode.com")
export signatures := env_var_or_default('SIGNATURES', '')
export councilSafe := env_var('COUNCIL_SAFE')
export foundationSafe := env_var('FOUNDATION_SAFE')
export ownerSafe := env_var('OWNER_SAFE')
export bundle := "input"
export location := `pwd`
export randomPersonEoa := "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"

simulate-council hdPath='0':
  #!/usr/bin/env bash
  cd ../..
  echo "getting signer address..."
  signer=$(cast wallet address --ledger --mnemonic-derivation-path "m/44'/60'/{{hdPath}}'/0/0")
  echo "Simulating with: ${signer}"
  echo ""
  forge script NestedSignFromJson \
    --rpc-url ${rpcUrl} \
    --sender ${signer} \
    --sig "signJson(string,address)" \
    "${location}/${bundle}.json" \
    "${councilSafe}"

sign-council hdPath='0':
  #!/usr/bin/env bash
  cd ../..
  echo "getting signer address..."
  signer=$(cast wallet address --ledger --mnemonic-derivation-path "m/44'/60'/{{hdPath}}'/0/0")
  echo "Signing with: ${signer}"
  echo ""
  $(go env GOPATH)/bin/eip712sign --ledger --hd-paths "m/44'/60'/{{hdPath}}'/0/0" -- \
  forge script NestedSignFromJson \
    --rpc-url ${rpcUrl} \
    --sig "signJson(string,address)" \
    "${location}/${bundle}.json" \
    "${councilSafe}"

execute-council hdPath='0':
  #!/usr/bin/env bash
  cd ../..
  sender=$(cast wallet address --ledger --mnemonic-derivation-path "m/44'/60'/{{hdPath}}'/0/0")
  forge script NestedSignFromJson \
    --fork-url ${rpcUrl} \
    --ledger --hd-paths "m/44'/60'/{{hdPath}}'/0/0" \
    --broadcast \
    --sender ${sender} \
    --sig "approveJson(string,address,bytes)" \
    ${location}/${bundle}.json \
    "${councilSafe}" \
    ${signatures}

simulated-run hdPath='0':
  #!/usr/bin/env bash
  cd ../..
  forge script NestedSignFromJson \
    --fork-url ${rpcUrl} \
    --sender ${randomPersonEoa} \
    --sig "runJson(string)" \
    ${location}/${bundle}.json

deploy-contracts hdPath='0':
  #!/usr/bin/env bash
  cd ../..
  sender=$(cast wallet address --ledger --mnemonic-derivation-path "m/44'/60'/{{hdPath}}'/0/0")
  forge script DeployRehearsalContracts \
    --fork-url ${rpcUrl} \
    --ledger --hd-paths "m/44'/60'/{{hdPath}}'/0/0" \
    --broadcast \
    --sender ${sender}

prepare-json:
  #!/usr/bin/env bash

  implementation_0="0x3311aC7F72bb4108d9f4D5d50E7623B1498A9eC0"
  jq ".transactions[0].to |= \"${ProxyAdmin_ADDRESS}\"" ./input.json > ./input.tmp && mv input.tmp input.json
  jq ".transactions[0].contractInputsValues._proxy |= \"${L1ERC721BridgeProxy_ADDRESS}\"" ./input.json > ./input.tmp && mv input.tmp input.json
  jq ".transactions[0].contractInputsValues._implementation |= \"${implementation_0}\"" ./input.json > ./input.tmp && mv input.tmp input.json
  calldata_0=$(cast calldata "upgrade(address,address)" ${L1ERC721BridgeProxy_ADDRESS} ${implementation_0})
  jq ".transactions[0].data |= \"${calldata_0}\"" ./input.json > ./input.tmp && mv input.tmp input.json

  implementation_1="0x0A9d47e531825FaaA2863D4d10DC8E5E0B91BfB0"
  init_calldata="0xfecf9734000000000000000000000000dfe97868233d1aa22e815a266982f2cf17685a270000000000000000000000009BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A000000000000000000000000229047fed2591dbec1eF1118d64F7aF3dB9EB2900000000000000000000000000000000000000000000000000000000000000000"
  jq ".transactions[1].to |= \"${ProxyAdmin_ADDRESS}\"" ./input.json > ./input.tmp && mv input.tmp input.json
  jq ".transactions[1].contractInputsValues._proxy |= \"${OptimismPortalProxy_ADDRESS}\"" ./input.json > ./input.tmp && mv input.tmp input.json
  jq ".transactions[1].contractInputsValues._implementation |= \"${implementation_1}\"" ./input.json > ./input.tmp && mv input.tmp input.json
  jq ".transactions[1].contractInputsValues._data |= \"${init_calldata}\"" ./input.json > ./input.tmp && mv input.tmp input.json
  calldata_1=$(cast calldata "upgradeAndCall(address,address,bytes)" ${OptimismPortalProxy_ADDRESS} ${implementation_1} ${init_calldata})
  jq ".transactions[1].data |= \"${calldata_1}\"" ./input.json > ./input.tmp && mv input.tmp input.json
