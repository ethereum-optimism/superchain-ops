set dotenv-load

export rpcUrl := env_var('ETH_RPC_URL')
export signatures := env_var_or_default('SIGNATURES', '')
export bundle := "input"
export location := `pwd`
export OWNER_SAFE := env_var('COUNCIL_SAFE')

simulate hdPath='0':
  #!/usr/bin/env bash
  cd ../..
  echo "getting signer address..."
  signer=$(cast wallet address --ledger --mnemonic-derivation-path "m/44'/60'/{{hdPath}}'/0/0")
  echo "Simulating with: ${signer}"
  echo ""
  forge script SignFromJson \
    --rpc-url ${rpcUrl} \
    --sig "signJson(string)" \
    "${location}/${bundle}.json" \
    --sender ${signer}

sign hdPath='0':
  #!/usr/bin/env bash
  cd ../..
  echo "getting signer address..."
  signer=$(cast wallet address --ledger --mnemonic-derivation-path "m/44'/60'/{{hdPath}}'/0/0")
  echo "Signing with: ${signer}"
  echo ""
  $(go env GOPATH)/bin/eip712sign --ledger --hd-paths "m/44'/60'/{{hdPath}}'/0/0" -- \
  forge script SignFromJson \
    --rpc-url ${rpcUrl} \
    --sig "signJson(string)" \
    "${location}/${bundle}.json"

execute hdPath='0':
  #!/usr/bin/env bash
  cd ../..
  sender=0xa67399981087005085e632a02F49Eb73dD0AC54A # $(cast wallet address --ledger --mnemonic-derivation-path "m/44'/60'/{{hdPath}}'/0/0")
  forge script SignFromJson \
    --fork-url ${rpcUrl} \
    --sender ${sender} \
    --sig "runJson(string,bytes)" ${location}/${bundle}.json ${signatures}

prepare:
  #!/usr/bin/env bash
  threshold=$(cast call -r ${rpcUrl} ${COUNCIL_SAFE} "getThreshold()(uint256)")
  echo "Safe: ${COUNCIL_SAFE}, Threshold: ${threshold}."
  jq ".transactions[0].to |= \"${COUNCIL_SAFE}\"" ./input.json > ./input.tmp && mv input.tmp input.json
  jq ".transactions[0].contractInputsValues.prevOwner |= \"${PREVIOUS_OWNER}\"" ./input.json > ./input.tmp && mv input.tmp input.json
  jq ".transactions[0].contractInputsValues.owner |= \"${SIGNER_TO_REMOVE}\"" ./input.json > ./input.tmp && mv input.tmp input.json
  jq ".transactions[0].contractInputsValues._threshold |= \"${threshold}\"" ./input.json > ./input.tmp && mv input.tmp input.json
  calldata=$(cast calldata "removeOwner(address,address,uint256)" ${PREVIOUS_OWNER} ${SIGNER_TO_REMOVE} ${threshold})
  jq ".transactions[0].data |= \"${calldata}\"" ./input.json > ./input.tmp && mv input.tmp input.json
