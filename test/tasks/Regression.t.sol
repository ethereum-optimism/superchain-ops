// SPDX-License-Identifier: MIT
pragma solidity 0.8.15;

import {Test} from "forge-std/Test.sol";
import {IGnosisSafe} from "@base-contracts/script/universal/IGnosisSafe.sol";

import {MultisigTask} from "src/improvements/tasks/MultisigTask.sol";
import {GasConfigTemplate} from "test/tasks/mock/template/GasConfigTemplate.sol";
import {DisputeGameUpgradeTemplate} from "test/tasks/mock/template/DisputeGameUpgradeTemplate.sol";
import {EnableDeputyPauseModuleTemplate} from "src/improvements/template/EnableDeputyPauseModuleTemplate.sol";
import {FinanceTemplate} from "src/improvements/template/FinanceTemplate.sol";
import {OPCMUpgradeV200} from "src/improvements/template/OPCMUpgradeV200.sol";
import {OPCMUpgradeV300} from "src/improvements/template/OPCMUpgradeV300.sol";
import {OPCMUpgradeV400} from "src/improvements/template/OPCMUpgradeV400.sol";
import {OPCMUpdatePrestateV300} from "src/improvements/template/OPCMUpdatePrestateV300.sol";
import {SetRespectedGameTypeTemplate} from "src/improvements/template/SetRespectedGameTypeTemplate.sol";
import {UpdateRetirementTimestampTemplate} from "src/improvements/template/UpdateRetirementTimestampTemplate.sol";
import {SystemConfigGasParams} from "src/improvements/template/SystemConfigGasParams.sol";
import {MultisigTaskTestHelper} from "test/tasks/MultisigTask.t.sol";
import {DelayedWETHOwnershipTemplate} from "src/improvements/template/DelayedWETHOwnershipTemplate.sol";
import {TransferOwners} from "src/improvements/template/TransferOwners.sol";
import {TransferL2PAOFromL1} from "src/improvements/template/TransferL2PAOFromL1.sol";
import {DisableModule} from "src/improvements/template/DisableModule.sol";
import {Action} from "src/libraries/MultisigTypes.sol";
import {GnosisSafeApproveHash} from "src/improvements/template/GnosisSafeApproveHash.sol";
import {SetDisputeGameImpl} from "src/improvements/template/SetDisputeGameImpl.sol";
import {GnosisSafeHashes} from "src/libraries/GnosisSafeHashes.sol";

/// @notice Ensures that simulating the task consistently produces the same call data and data to sign.
/// This guarantees determinism if a bug is introduced in the task logic, the call data or data to sign
/// would differ for the same block, causing these tests to fail.
contract RegressionTest is Test {
    /// @notice expected call data and data to sign generated by manually running the GasConfigTemplate at block 21724199 on mainnet using script:
    /// forge script test/template/GasConfigTemplate.sol --sig "simulate(string)" test/tasks/mock/configs/SingleMultisigGasConfigTemplate.toml --rpc-url mainnet --fork-block-number 21724199 -vv
    function testRegressionCallDataMatches_SingleMultisigGasConfigTemplate() public {
        address rootSafe = address(0x4a4962275DF8C60a80d3a25faEc5AA7De116A746); // SystemConfigOwner
        string memory taskConfigFilePath = "test/tasks/mock/configs/SingleMultisigGasConfigTemplate.toml";
        // Calldata generated by manually running the gas config template at block 21724199 on mainnet.
        string memory expectedCallData =
            "0x174dea7100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001200000000000000000000000005e6432f18bc5d497b1ab2288a025fbf9d69e22210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024b40a817c0000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000000000000000000000007bd909970b0eedcf078de6aeff23ce571663b8aa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024b40a817c0000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000000000";

        MultisigTask multisigTask = new GasConfigTemplate();

        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);
        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 21724199, "mainnet", multisigTask, allSafes);

        bytes memory rootSafeCalldata =
            _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);
        uint256 rootSafeNonce = allOriginalNonces[allOriginalNonces.length - 1];

        // Data to sign generated by manually running the gas config template at block 21724199 on mainnet.
        string memory expectedDataToSign =
            "0x19010f634ad56005ddbd68dc52233931a858f740b8ab706671c42b055efef561257e5ba28ec1e58ea69211eb8e875f10ae165fb3fb4052b15ca2516486f4b059135f";
        string memory dataToSign = vm.toString(
            GnosisSafeHashes.getEncodedTransactionData(
                multisigTask.root(), rootSafeCalldata, 0, rootSafeNonce, MULTICALL3_ADDRESS
            )
        );
        // assert that the data to sign generated in simulate is the same as the expected data to sign
        assertEq(keccak256(bytes(dataToSign)), keccak256(bytes(expectedDataToSign)));
        _assertDataToSignSingleMultisig(
            rootSafe, rootSafeCalldata, expectedDataToSign, rootSafeNonce, MULTICALL3_ADDRESS
        );
    }

    /// @notice expected call data and data to sign generated by manually running the DisputeGameUpgradeTemplate at block 21724199 on mainnet using script:
    /// forge script test/template/DisputeGameUpgradeTemplate.sol --sig "simulate(string)" test/tasks/mock/configs/NestedMultisigDisputeGameUpgradeTemplate.toml --rpc-url mainnet --fork-block-number 21724199 -vv
    function testRegressionCallDataMatches_NestedMultisigDisputeGameUpgradeTemplate() public {
        string memory taskConfigFilePath = "test/tasks/mock/configs/NestedMultisigDisputeGameUpgradeTemplate.toml";
        // call data generated by manually running the dispute game upgrade template at block 21724199 on mainnet
        string memory expectedCallData =
            "0x174dea71000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000e5965ab5962edc7477c8520243a95517cd252fa9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004414f6b1a30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f691f8a6d908b58c534b624cf16495b491e633ba00000000000000000000000000000000000000000000000000000000";

        MultisigTask multisigTask = new DisputeGameUpgradeTemplate();
        address rootSafe = address(0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A); // L1PAO
        address securityCouncilChildMultisig = 0xc2819DC788505Aac350142A7A707BF9D03E3Bd03;
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, securityCouncilChildMultisig);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 21724199, "mainnet", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        // Data to sign generated by manually running the dispute game upgrade template at block 21724199 on mainnet for each child multisig.
        string[] memory expectedDataToSign = new string[](2);
        expectedDataToSign[0] =
            "0x1901a4a9c312badf3fcaa05eafe5dc9bee8bd9316c78ee8b0bebe3115bb21b732672032d168a6a75092d06448c977c02a33ee3890827ab9cc8a14a57e62494214746";
        expectedDataToSign[1] =
            "0x1901df53d510b56e539b90b369ef08fce3631020fbf921e3136ea5f8747c20bce9677607901a3c2502aa70a9dcd2fa190c27cdd30d74058e9b807c3d32f1ee46100f";

        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS);
    }

    /// @notice expected call data and data to sign generated by manually running the GasConfigTemplate at block 21724199 on mainnet using script:
    /// forge script test/template/GasConfigTemplate.sol --sig "simulate(string)" test/tasks/mock/configs/OPMainnetGasConfigTemplate.toml --rpc-url mainnet --fork-block-number 21724199 -vv
    function testRegressionCallDataMatches_OPMainnetGasConfigTemplate() public {
        string memory taskConfigFilePath = "test/tasks/mock/configs/OPMainnetGasConfigTemplate.toml";
        // call data generated by manually running the gas config template at block 21724199 on mainnet
        string memory expectedCallData =
            "0x174dea71000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000229047fed2591dbec1ef1118d64f7af3db9eb2900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024b40a817c000000000000000000000000000000000000000000000000000000000393870000000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new GasConfigTemplate();
        address rootSafe = address(0x847B5c174615B1B7fDF770882256e2D3E95b9D92); // SystemConfigOwner
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 21724199, "mainnet", multisigTask, allSafes);

        bytes memory rootSafeCalldata =
            _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);
        uint256 rootSafeNonce = allOriginalNonces[allOriginalNonces.length - 1];

        // data to sign generated by manually running the gas config template at block 21724199 on mainnet
        string memory expectedDataToSign =
            "0x1901a4a9c312badf3fcaa05eafe5dc9bee8bd9316c78ee8b0bebe3115bb21b732672c98bc9c1761f2e403be0ad32b16d9c5fedf228f97eb0420c722b511129ebc803";

        _assertDataToSignSingleMultisig(
            rootSafe, rootSafeCalldata, expectedDataToSign, rootSafeNonce, MULTICALL3_ADDRESS
        );
    }

    /// @notice expected call data and data to sign generated by manually running the SetRespectedGameTypeTemplate at block 21724199 on mainnet using script:
    /// forge script src/improvements/template/SetRespectedGameTypeTemplate.sol --sig "simulate(string)" test/tasks/mock/configs/SetRespectedGameTypeTemplate.toml --rpc-url mainnet --fork-block-number 21724199 -vv
    function testRegressionCallDataMatches_SetRespectedGameTypeTemplate() public {
        string memory taskConfigFilePath = "test/tasks/mock/configs/SetRespectedGameTypeTemplate.toml";
        string memory expectedCallData =
            "0x174dea71000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c6901f65369fc59fc1b4d6d6be7a2318ff38db5b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044a1155ed9000000000000000000000000beb5fc579115071764c7423a4f12edde41f106ed000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new SetRespectedGameTypeTemplate();
        address rootSafe = address(0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A); // FoundationOperationSafe
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 21724199, "mainnet", multisigTask, allSafes);

        bytes memory rootSafeCalldata =
            _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);
        uint256 rootSafeNonce = allOriginalNonces[allOriginalNonces.length - 1];

        string memory expectedDataToSign =
            "0x19014e6a6554de0308f5ece8ff736beed8a1b876d16f5c27cac8e466d7de0c7038904a8d9abb28e3fbba3ffc928e3357077c716885b5b1e2c51f2ee976a24f02445d";

        _assertDataToSignSingleMultisig(
            rootSafe, rootSafeCalldata, expectedDataToSign, rootSafeNonce, MULTICALL3_ADDRESS
        );
    }

    /// @notice expected call data and data to sign generated by manually running the UpdateRetirementTimestampTemplate at block 22183268 on mainnet using script:
    /// forge script src/improvements/template/UpdateRetirementTimestampTemplate.sol --sig "simulate(string)" test/tasks/mock/configs/UpdateRetirementTimestampTemplate.toml --rpc-url mainnet --fork-block-number 22183268 -vv
    function testRegressionCallDataMatches_UpdateRetirementTimestampTemplate() public {
        string memory taskConfigFilePath = "test/tasks/mock/configs/UpdateRetirementTimestampTemplate.toml";
        string memory expectedCallData =
            "0x174dea71000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c6901f65369fc59fc1b4d6d6be7a2318ff38db5b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044a1155ed9000000000000000000000000beb5fc579115071764c7423a4f12edde41f106ed00000000000000000000000000000000000000000000000000000000ffffffff00000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new UpdateRetirementTimestampTemplate();
        address rootSafe = address(0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A); // FoundationOperationSafe
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 22183268, "mainnet", multisigTask, allSafes);

        bytes memory rootSafeCalldata =
            _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);
        uint256 rootSafeNonce = allOriginalNonces[allOriginalNonces.length - 1];

        string memory expectedDataToSign =
            "0x19014e6a6554de0308f5ece8ff736beed8a1b876d16f5c27cac8e466d7de0c703890efd5a0cf1fefc641f8d16675981b0640aaba135e5d798cf4a14ad442d3022b86";

        _assertDataToSignSingleMultisig(
            rootSafe, rootSafeCalldata, expectedDataToSign, rootSafeNonce, MULTICALL3_ADDRESS
        );
    }

    /// @notice expected call data and data to sign generated by manually running the EnableDeputyPauseModuleTemplate at block 7745524 on sepolia using script:
    /// forge script src/improvements/template/EnableDeputyPauseModuleTemplate.sol --sig "simulate(string)" test/tasks/mock/configs/EnableDeputyPauseModuleTemplate.toml --rpc-url sepolia --fork-block-number 7745524 -vv
    function testRegressionCallDataMatches_EnableDeputyPauseModuleTemplate() public {
        string memory taskConfigFilePath = "test/tasks/mock/configs/EnableDeputyPauseModuleTemplate.toml";
        string memory expectedCallData =
            "0x174dea71000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000837de453ad5f21e89771e3c06239d8236c0efd5e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024610b592500000000000000000000000062f3972c56733ab078f0764d2414dfcaa99d574c00000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new EnableDeputyPauseModuleTemplate();
        address rootSafe = address(0x837DE453AD5F21E89771e3c06239d8236c0EFd5E);
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 7745524, "sepolia", multisigTask, allSafes);

        bytes memory rootSafeCalldata =
            _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);
        uint256 rootSafeNonce = allOriginalNonces[allOriginalNonces.length - 1];

        string memory expectedDataToSign =
            "0x1901e84ad8db37faa1651b140c17c70e4c48eaa47a635e0db097ddf4ce1cc14b9ecbf55e2ed894ddff4c0045537c8239db1c4b3ac5700049164b5823ecaa045d7334";

        _assertDataToSignSingleMultisig(
            rootSafe, rootSafeCalldata, expectedDataToSign, rootSafeNonce, MULTICALL3_ADDRESS
        );
    }

    /// @notice Expected call data and data to sign generated by manually running the OPCMUpgradeV200 template at block 7757671 on sepolia using script:
    /// forge script OPCMUpgradeV200 --sig "simulate(string)" test/tasks/example/sep/002-opcm-upgrade-v200/config.toml --rpc-url sepolia --fork-block-number 7826712 -vv
    function testRegressionCallDataMatches_OPCMUpgradeV200() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/002-opcm-upgrade-v200/config.toml";
        // Call data generated by manually running the OPCMUpgradeV200 template at block 7826712 on sepolia
        string memory expectedCallData =
            "0x82ad56cb0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001b25f566336f47bc5e0036d66e142237dcf4640b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a4ff2dd5a100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000034edd2a225f7f429a63e0f1d2084b9e0a93b538000000000000000000000000189abaaaa82dfc015a588a7dbad6f13b1d3485bc035ac388b5cb22acf52a2063cfde108d09b1888655d21f02f595f9c3ea6cbdcd00000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new OPCMUpgradeV200();
        address rootSafe = address(0x1Eb2fFc903729a0F03966B917003800b145F56E2);
        address foundationChildMultisig = 0xDEe57160aAfCF04c34C887B5962D0a69676d3C8B; // sepolia
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, foundationChildMultisig);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 7826712, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        // Data to sign generated by manually running the OPCMUpgradeV200 template at block 7826712 on sepolia
        // for each child multisig
        string[] memory expectedDataToSign = new string[](2);
        expectedDataToSign[0] =
            "0x190137e1f5dd3b92a004a23589b741196c8a214629d4ea3a690ec8e41ae45c689cbbc4308e7f6e5e57b1527f2a53444553ecad29ae331fa07bbc0c91e6e73986e250";
        expectedDataToSign[1] =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b8533efa681cff20329f64ecd2a4ec88d618f5e3aaee370a9a4550df3cda85e94352e";

        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS);
    }

    /// @notice Expected call data and data to sign generated by manually running the OPCMUpgradeV300 template at block 8044263 on sepolia.
    /// Simulate from task directory (test/tasks/example/sep/006-opcm-upgrade-v300) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/improvements/nested.just simulate <foundation|council>
    function testRegressionCallDataMatches_OPCMUpgradeV300() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/006-opcm-upgrade-v300/config.toml";
        // Call data generated by manually running the OPCMUpgradeV300 template at block 7972618 on sepolia
        string memory expectedCallData =
            "0x82ad56cb000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000fbceed4de885645fbded164910e10f52febfab350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a4ff2dd5a100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000034edd2a225f7f429a63e0f1d2084b9e0a93b538000000000000000000000000189abaaaa82dfc015a588a7dbad6f13b1d3485bc03ee2917da962ec266b091f4b62121dc9682bb0db534633707325339f99ee40500000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new OPCMUpgradeV300();
        address rootSafe = address(0x1Eb2fFc903729a0F03966B917003800b145F56E2);
        address foundationChildMultisig = 0xDEe57160aAfCF04c34C887B5962D0a69676d3C8B; // sepolia
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, foundationChildMultisig);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 8044263, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        // Data to sign generated by manually running the OPCMUpgradeV300 template at block 8044263 on sepolia for each child multisig.
        string[] memory expectedDataToSign = new string[](2);
        // Foundation data to sign
        expectedDataToSign[0] =
            "0x190137e1f5dd3b92a004a23589b741196c8a214629d4ea3a690ec8e41ae45c689cbb11f6f1f3f232ad28d30230fa28696a442aa331937c8555e31c226b8bf3113539";
        // Security council data to sign
        expectedDataToSign[1] =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b8533e69a8eedc212201257878d96005085a48167c2dd1a817fec01be553c995f5ca4";

        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS);
    }

    /// @notice Expected call data and data to sign generated by manually running the OPCMUpgradeV400 template at block 8368038 on sepolia.
    /// Simulate from task directory (test/tasks/example/sep/008-opcm-upgrade-v400) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/improvements/nested.just simulate <foundation|council>
    function testRegressionCallDataMatches_OPCMUpgradeV400() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/008-opcm-upgrade-v400/config.toml";
        // Call data generated by manually running the OPCMUpgradeV400 template at block 8318585 on sepolia
        string memory expectedCallData =
            "0x82ad56cb00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000044c191ce5ce35131e703532af75fa9ca221e23980000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a4ff2dd5a100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000034edd2a225f7f429a63e0f1d2084b9e0a93b538000000000000000000000000189abaaaa82dfc015a588a7dbad6f13b1d3485bc03eb07101fbdeaf3f04d9fb76526362c1eea2824e4c6e970bdb19675b72e4fc800000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new OPCMUpgradeV400();
        address rootSafe = address(0x1Eb2fFc903729a0F03966B917003800b145F56E2);
        address foundationChildMultisig = 0xDEe57160aAfCF04c34C887B5962D0a69676d3C8B; // sepolia
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, foundationChildMultisig);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 8469737, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        // Data to sign generated by manually running the OPCMUpgradeV400 template at block 8318585 on sepolia
        // for each child multisig.
        string[] memory expectedDataToSign = new string[](2);
        // Foundation data to sign
        expectedDataToSign[0] =
            "0x190137e1f5dd3b92a004a23589b741196c8a214629d4ea3a690ec8e41ae45c689cbb87ee50a37f48a4e4bb87ccbfd4ecaa93fa2d6b160ed09514c341d37808a53ad1";
        // Security council data to sign
        expectedDataToSign[1] =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b853387e1c03a81ed868bb85caef0bc0ce050a1c900d8003e4026e21a55f93b0ab58d";

        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS);
    }

    /// @notice Expected call data and data to sign generated by manually running the SystemConfigGasParams template at block 8044263 on sepolia.
    /// Simulate from task directory (test/tasks/example/eth/006-system-config-gas-params) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/improvements/single.just simulate
    function testRegressionCallDataMatches_SystemConfigGasParams() public {
        string memory taskConfigFilePath = "test/tasks/example/eth/006-system-config-gas-params/config.toml";
        // Call data generated by manually running the SystemConfigGasParams template at block 22283936 on mainnet
        string memory expectedCallData =
            "0x174dea710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000120000000000000000000000000229047fed2591dbec1ef1118d64f7af3db9eb2900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024b40a817c0000000000000000000000000000000000000000000000000000000002625a0000000000000000000000000000000000000000000000000000000000000000000000000000000000229047fed2591dbec1ef1118d64f7af3db9eb2900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044c0fd4b4100000000000000000000000000000000000000000000000000000000000000fa000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new SystemConfigGasParams();
        address rootSafe = address(0x847B5c174615B1B7fDF770882256e2D3E95b9D92); // FoundationUpgradeSafe
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 22283936, "mainnet", multisigTask, allSafes);

        bytes memory rootSafeCalldata =
            _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);
        uint256 rootSafeNonce = allOriginalNonces[allOriginalNonces.length - 1];

        // data to sign generated by manually running the FinanceTemplate at block 7880546 on sepolia
        string memory expectedDataToSign =
            "0x1901a4a9c312badf3fcaa05eafe5dc9bee8bd9316c78ee8b0bebe3115bb21b73267249771935e440b6212f2f0a8302967dcac81b52ea7573563fd25b9b7ee33d8b3e";

        _assertDataToSignSingleMultisig(
            rootSafe, rootSafeCalldata, expectedDataToSign, rootSafeNonce, MULTICALL3_ADDRESS
        );
    }

    /// @notice expected call data and data to sign generated by manually running the DelayedWETHOwnershipTemplate at block 22183268 on mainnet using script:
    /// forge script src/improvements/template/DelayedWETHOwnershipTemplate.sol --sig "simulate(string)" test/tasks/mock/configs/DelayedWETHOwnershipTemplate.toml --rpc-url mainnet --fork-block-number 22183268 -vv
    function testRegressionCallDataMatches_DelayedWETHOwnershipTemplate() public {
        string memory taskConfigFilePath = "test/tasks/example/eth/007-delayedweth-xfer/config.toml";
        // call data generated by manually running the DelayedWETHOwnershipTemplate at block 22183268 on mainnet
        string memory expectedCallData =
            "0x174dea710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000120000000000000000000000000323dfc63c9b83cb83f40325aab74b245937cbdf00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024f2fde38b0000000000000000000000005a0aae59d09fccbddb6c6cceb07b7279367c3d2a0000000000000000000000000000000000000000000000000000000000000000000000000000000021429af66058bc3e4ae4a8f2ec4531aac433ecbc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024f2fde38b0000000000000000000000005a0aae59d09fccbddb6c6cceb07b7279367c3d2a00000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new DelayedWETHOwnershipTemplate();
        address rootSafe = address(0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A);
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 22183268, "mainnet", multisigTask, allSafes);

        bytes memory rootSafeCalldata =
            _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);
        uint256 rootSafeNonce = allOriginalNonces[allOriginalNonces.length - 1];

        // data to sign generated by manually running the DelayedWETHOwnershipTemplate at block 22183268 on mainnet
        string memory expectedDataToSign =
            "0x19014e6a6554de0308f5ece8ff736beed8a1b876d16f5c27cac8e466d7de0c7038908e5dea9945db51a2fd31cc5fa5b253f41b5a48a277d5c22c494851aa42567e8a";

        _assertDataToSignSingleMultisig(
            rootSafe, rootSafeCalldata, expectedDataToSign, rootSafeNonce, MULTICALL3_ADDRESS
        );
    }

    /// @notice expected call data and data to sign generated by manually running the FinanceTemplate at block 7880546 on sepolia using script:
    /// forge script src/improvements/template/FinanceTemplate.sol --sig "simulate(string)" test/tasks/mock/configs/TestFinanceTemplate.toml --rpc-url sepolia --fork-block-number 7880546 -vv
    function testRegressionCallDataMatches_FinanceTemplate() public {
        string memory taskConfigFilePath = "test/tasks/mock/configs/TestFinanceTemplate.toml";
        // call data generated by manually running the FinanceTemplate at block 7880546 on sepolia
        string memory expectedCallData =
            "0x174dea710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000140000000000000000000000000bb4daac11b4446ee1c6146de1e26ecf1ab8b3eb60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000f64bc17485f0b4ea5f06a96514182fc4cb5619770000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000000000000000000000000000000000000000000000000000000000000bb4daac11b4446ee1c6146de1e26ecf1ab8b3eb60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044095ea7b300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new FinanceTemplate();
        address rootSafe = address(0xcBC62730b54BFE94173B1182FA56Db1393451d4e); // 'SafeToSendFrom' value in config.toml file.
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 7880546, "sepolia", multisigTask, allSafes);

        bytes memory rootSafeCalldata =
            _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);
        uint256 rootSafeNonce = allOriginalNonces[allOriginalNonces.length - 1];

        // data to sign generated by manually running the FinanceTemplate at block 7880546 on sepolia
        string memory expectedDataToSign =
            "0x190196c653b6193d04eb71ad87ac1577524661acf1e1e0c492a68c88a1deb059927f5c6e8f9c07df88078080944e37bdee8fabf7e4c4addbfb7c56281712bf386a4a";

        _assertDataToSignSingleMultisig(
            rootSafe, rootSafeCalldata, expectedDataToSign, rootSafeNonce, MULTICALL3_ADDRESS
        );
    }

    /// @notice Expected call data and data to sign generated by manually running the OPCMUpdatePrestateV300 template at block 8098229 on sepolia
    /// Simulate from task directory (test/tasks/example/sep/008-opcm-upgrade-prestate-v300) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/improvements/nested.just simulate <foundation|council>
    function testRegressionCallDataMatches_OPCMUpdatePrestateV300() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/008-opcm-upgrade-prestate-v300/config.toml";
        // Call data generated by manually running the OPCMUpdatePrestateV300 template at block 8098229 on sepolia.
        string memory expectedCallData =
            "0x82ad56cb000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000fbceed4de885645fbded164910e10f52febfab350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a49a72745b00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000034edd2a225f7f429a63e0f1d2084b9e0a93b538000000000000000000000000189abaaaa82dfc015a588a7dbad6f13b1d3485bc03682932cec7ce0a3874b19675a6bbc923054a7b321efc7d3835187b172494b600000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new OPCMUpdatePrestateV300();
        address rootSafe = address(0x1Eb2fFc903729a0F03966B917003800b145F56E2);
        address foundationChildMultisig = 0xDEe57160aAfCF04c34C887B5962D0a69676d3C8B;
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, foundationChildMultisig);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 8098229, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        // Data to sign generated by manually running the OPCMUpdatePrestateV300 template at block 8098229 on sepolia.
        string[] memory expectedDataToSign = new string[](2);
        // Foundation
        expectedDataToSign[0] =
            "0x190137e1f5dd3b92a004a23589b741196c8a214629d4ea3a690ec8e41ae45c689cbbb1f8d34235beb2352fb105844bbe0ddd2f2e940cbf9718fd1cd603f45dd490af";
        // Security council
        expectedDataToSign[1] =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b853381e5ba64d901a287c73ec3c85d7fb1f2e6b629e2450583b6532b301ee6ee5347";
        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS);
    }

    /// @notice Expected call data and data to sign generated by manually running the TransferL2PAOFromL1 template at block 22447773 on mainnet.
    /// Simulate from task directory (test/tasks/example/eth/008-transfer-l2pao) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/improvements/nested.just simulate <foundation|council>
    function testRegressionCallDataMatches_TransferL2PAOFromL1() public {
        string memory taskConfigFilePath = "test/tasks/example/eth/008-transfer-l2pao/config.toml";
        // Call data generated by manually running the TransferL2PAOFromL1 template at block 22447773 on mainnet.
        string memory expectedCallData =
            "0x174dea710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000bd48f6b86a26d3a217d0fa6ffe2b491b956a7a20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000104e9e05c42000000000000000000000000420000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030d40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000024f2fde38b0000000000000000000000006b1bae59d09fccbddb6c6cceb07b7279367c4e3b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new TransferL2PAOFromL1();
        address rootSafe = address(0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A); // L1PAO
        address foundationChildMultisig = 0x847B5c174615B1B7fDF770882256e2D3E95b9D92;
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, foundationChildMultisig);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 22447773, "mainnet", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        // Data to sign generated by manually running the TransferL2PAOFromL1 template at block 22447773 on mainnet.
        string[] memory expectedDataToSign = new string[](3);
        // Chain Governor
        expectedDataToSign[0] =
            "0x19014f0b6efb6c01fa7e127a0ff87beefbeb53e056d30d3216c5ac70371b909ca66dfb594dad0fab2218f67e5dfd7c87902748576e588a07d519f00bad25ed8bf8fa";
        // Foundation
        expectedDataToSign[1] =
            "0x1901a4a9c312badf3fcaa05eafe5dc9bee8bd9316c78ee8b0bebe3115bb21b732672fed866eb0ea2cb397e3221b69f5761605f7362acd36b63b250590620bf5afb9b";
        // Security council
        expectedDataToSign[2] =
            "0x1901df53d510b56e539b90b369ef08fce3631020fbf921e3136ea5f8747c20bce9673ab916bc61b8c632aec6f0c75fb0ad2514dcda3bd2fb7030465b7e02fb7f8764";
        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS);
    }

    /// @notice Expected call data and data to sign generated by manually running the DisableModule template at block 8326814 on sepolia
    /// Simulate from task directory (test/tasks/example/sep/011-disable-module) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/improvements/single.just simulate
    function testRegressionCallDataMatches_DisableModule() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/011-disable-module/config.toml";
        // Call data generated by manually running the DisableModule template at block 8326814 on sepolia.
        string memory expectedCallData =
            "0x174dea710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000007a50f00e8d05b95f98fe38d8bee366a7324dcf7e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044e009cfde0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fd7e6ef1f6c9e4cc34f54065bf8496ce41a4e2e800000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new DisableModule();
        address rootSafe = address(0x7a50f00e8D05b95F98fE38d8BeE366a7324dCf7E);
        address nestedSafe = address(0xf64bc17485f0B4Ea5F06A96514182FC4cB561977);
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, nestedSafe);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 8326814, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        // Data to sign generated by manually running the DisableModule template at block 8326814 on sepolia.
        string[] memory expectedDataToSign = new string[](1);
        // Council
        expectedDataToSign[0] =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b85339654f9ead3f00526f2118928a8d9c125a15e37c6ba8b92430dc207ac54928c2f";
        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS);
    }

    /// @notice Expected call data and data to sign generated by manually running the TransferOwners template at block 22469206 on mainnet.
    /// Simulate from task directory (test/tasks/example/eth/009-transfer-owners) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/improvements/nested.just simulate <foundation|council>
    function testRegressionCallDataMatches_TransferOwners() public {
        string memory taskConfigFilePath = "test/tasks/example/eth/009-transfer-owners/config.toml";
        // Call data generated by manually running the TransferOwners template at block 22469206 on mainnet.
        string memory expectedCallData =
            "0x174dea7100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000004e000000000000000000000000000000000000000000000000000000000000005e000000000000000000000000000000000000000000000000000000000000006e000000000000000000000000000000000000000000000000000000000000007e00000000000000000000000002f12d621a16e2d3285929c9996f478508951dfe40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024f2fde38b0000000000000000000000005a0aae59d09fccbddb6c6cceb07b7279367c3d2a000000000000000000000000000000000000000000000000000000000000000000000000000000003b73fa8d82f511a3cae17b5a26e4e1a2d5e2f2a4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004499a88ec400000000000000000000000084b268a4101a8c8e3ccb33004f81ed08202ba124000000000000000000000000d81f43edbcacb4c29a9ba38a13ee5d79278270cc0000000000000000000000000000000000000000000000000000000000000000000000000000000084b268a4101a8c8e3ccb33004f81ed08202ba12400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000444e91db0800000000000000000000000000000000000000000000000000000000000000330000000000000000000000005a0aae59d09fccbddb6c6cceb07b7279367c3d2a000000000000000000000000000000000000000000000000000000000000000000000000000000003b73fa8d82f511a3cae17b5a26e4e1a2d5e2f2a4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004499a88ec400000000000000000000000084b268a4101a8c8e3ccb33004f81ed08202ba1240000000000000000000000005e40b9231b86984b5150507046e354dbfbed3d9e000000000000000000000000000000000000000000000000000000000000000000000000000000003b73fa8d82f511a3cae17b5a26e4e1a2d5e2f2a4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004499a88ec4000000000000000000000000c9edb4e340f4e9683b4557bd9db8f9d932177c86000000000000000000000000d81f43edbcacb4c29a9ba38a13ee5d79278270cc00000000000000000000000000000000000000000000000000000000000000000000000000000000c9edb4e340f4e9683b4557bd9db8f9d932177c8600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000444e91db0800000000000000000000000000000000000000000000000000000000000000330000000000000000000000005a0aae59d09fccbddb6c6cceb07b7279367c3d2a000000000000000000000000000000000000000000000000000000000000000000000000000000003b73fa8d82f511a3cae17b5a26e4e1a2d5e2f2a4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004499a88ec4000000000000000000000000c9edb4e340f4e9683b4557bd9db8f9d932177c860000000000000000000000005e40b9231b86984b5150507046e354dbfbed3d9e000000000000000000000000000000000000000000000000000000000000000000000000000000003b73fa8d82f511a3cae17b5a26e4e1a2d5e2f2a40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024f2fde38b0000000000000000000000005a0aae59d09fccbddb6c6cceb07b7279367c3d2a00000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new TransferOwners();
        address rootSafe = address(0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A); // L1PAO
        address foundationChildMultisig = 0x847B5c174615B1B7fDF770882256e2D3E95b9D92;
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, foundationChildMultisig);
        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 22469206, "mainnet", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        // Data to sign generated by manually running the TransferOwners template at block 22469206 on mainnet.
        string[] memory expectedDataToSign = new string[](3);
        // Chain governor
        expectedDataToSign[0] =
            "0x19014f0b6efb6c01fa7e127a0ff87beefbeb53e056d30d3216c5ac70371b909ca66deb125b2251625aa3f98d8d46c8d8771105d0475cdda3c35de7672d4945b54498";
        // Foundation
        expectedDataToSign[1] =
            "0x1901a4a9c312badf3fcaa05eafe5dc9bee8bd9316c78ee8b0bebe3115bb21b732672082925b8bf493f10dffb8a3d5ccd8ccce453395061340626ce17ca26d82cf743";
        // Security council
        expectedDataToSign[2] =
            "0x1901df53d510b56e539b90b369ef08fce3631020fbf921e3136ea5f8747c20bce9671941d118233b743265fac6af569f20f3a3ab6f1e82d11bdfd6804395018919ff";
        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS);
    }

    /// @notice Expected call data and data to sign generated by manually running the GnosisSafeApproveHash template at block 8384642 on sepolia
    /// Simulate from task directory (test/tasks/example/sep/013-gnosis-safe-approve-hash) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/improvements/nested.just simulate base
    function testRegressionCallDataMatches_GnosisSafeApproveHash() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/013-gnosis-safe-approve-hash/config.toml";
        string memory expectedCallData =
            "0x174dea710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000fe884546476ddd290ec46318785046ef68a0ba90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024d4d9bdcdffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new GnosisSafeApproveHash();
        address rootSafe = address(0x646132A1667ca7aD00d36616AFBA1A28116C770A);
        address nestedSafe = address(0x6AF0674791925f767060Dd52f7fB20984E8639d8);
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, nestedSafe);
        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 8384642, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        // Data to sign generated by manually running the GnosisSafeApproveHash template at block 8384642 on sepolia.
        string[] memory expectedDataToSign = new string[](2);
        // Base
        expectedDataToSign[0] =
            "0x19016f25427e79742a1eb82c103e2bf43c85fc59509274ec258ad6ed841c4a0048aa2e27e741e14f9f6dec72970055113c8d1ce16a6501494d60c37b62f6ee5cf93d";
        // Council
        expectedDataToSign[1] =
            "0x19010127bbb910536860a0757a9c0ffcdf9e4452220f566ed83af1f27f9e833f0e230465e4668267169d5177270efb72b5bb67c2c926901e3c6b144b2e1c3c6532f4";

        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS);
    }

    /// @notice Expected call data and data to sign generated by manually running the SetDisputeGameImpl template at block 7798424 on sepolia.
    /// Simulate from task directory (test/tasks/example/sep/014-set-dispute-game-impl/config.toml) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/improvements/nested.just simulate <foundation|council>
    function testRegressionCallDataMatches_SetDisputeGameImpl() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/014-set-dispute-game-impl/config.toml";
        string memory expectedCallData =
            "0x174dea71000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000380000000000000000000000000860e626c700af381133d9f4af31412a2d1db3d5d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004414f6b1a30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000323d727a1a147869cec0c02de1d4195d1b71f2eb00000000000000000000000000000000000000000000000000000000000000000000000000000000860e626c700af381133d9f4af31412a2d1db3d5d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004414f6b1a3000000000000000000000000000000000000000000000000000000000000000100000000000000000000000039228e51a12662d78de478bfa1930fc7595337d800000000000000000000000000000000000000000000000000000000000000000000000000000000860e626c700af381133d9f4af31412a2d1db3d5d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000441e3342400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011c37937e08000000000000000000000000000000000000000000000000000000000000000000000000000000000000860e626c700af381133d9f4af31412a2d1db3d5d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000441e3342400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000011c37937e08000000000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new SetDisputeGameImpl();
        address rootSafe = address(0x1Eb2fFc903729a0F03966B917003800b145F56E2);
        address nestedSafe = address(0xDEe57160aAfCF04c34C887B5962D0a69676d3C8B); // sepolia
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, nestedSafe);
        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 7798424, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        string[] memory expectedDataToSign = new string[](2);
        // Foundation
        expectedDataToSign[0] =
            "0x190137e1f5dd3b92a004a23589b741196c8a214629d4ea3a690ec8e41ae45c689cbb1a9de2fedb15bb0ff64bf46c471a46a6316c63f5869e6569f8f278948ba98215";
        // Security Council
        expectedDataToSign[1] =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b8533ca9a17a70e3907304b76eac257ee383fe711c3d859fa473b991887531152e07b";
        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS);
    }

    /// @notice Internal function to set up the fork and run the simulate method
    function _setupAndSimulate(
        string memory taskConfigFilePath,
        uint256 blockNumber,
        string memory network,
        MultisigTask multisigTask,
        address[] memory allSafes
    ) internal returns (Action[] memory actions, uint256[] memory allOriginalNonces) {
        vm.createSelectFork(network, blockNumber);
        if (allSafes.length > 1) {
            // TODO: fix when we support > 1 level of nesting.
            address childSafe = allSafes[0];
            allOriginalNonces = MultisigTaskTestHelper.getAllOriginalNonces(allSafes);
            (, actions,,) = multisigTask.simulate(taskConfigFilePath, childSafe);
        } else {
            allOriginalNonces = MultisigTaskTestHelper.getAllOriginalNonces(allSafes);
            (, actions,,) = multisigTask.simulate(taskConfigFilePath);
        }
    }

    /// @notice Assert that the call data generated by the multisig task matches the expected call data.
    function _assertCallDataMatches(
        MultisigTask multisigTask,
        Action[] memory actions,
        address[] memory allSafes,
        uint256[] memory allOriginalNonces,
        string memory expectedCallData
    ) internal view returns (bytes memory rootSafeCalldata) {
        bytes[] memory allCalldatas = multisigTask.transactionDatas(actions, allSafes, allOriginalNonces);
        rootSafeCalldata = allCalldatas[allCalldatas.length - 1];
        assertEq(keccak256(bytes(vm.toString(rootSafeCalldata))), keccak256(bytes(expectedCallData)));
    }

    /// @notice assert that the data to sign generated by the single multisig task matches the expected data to sign
    function _assertDataToSignSingleMultisig(
        address rootSafe,
        bytes memory rootSafeCalldata,
        string memory expectedDataToSign,
        uint256 originalNonce,
        address multicallAddress
    ) internal view {
        string memory dataToSign = vm.toString(
            GnosisSafeHashes.getEncodedTransactionData(rootSafe, rootSafeCalldata, 0, originalNonce, multicallAddress)
        );
        assertEq(keccak256(bytes(dataToSign)), keccak256(bytes(expectedDataToSign)));
    }

    /// @notice assert that the data to sign generated by the nested multisig task matches the expected data to sign
    /// for each child multisig
    function _assertDataToSignNestedMultisig(
        MultisigTask multisigTask,
        Action[] memory actions,
        string[] memory expectedDataToSign,
        address multicallAddress
    ) internal {
        address[] memory owners = IGnosisSafe(multisigTask.root()).getOwners();
        // Decrement the root safe by 1.
        MultisigTaskTestHelper.decrementNonceAfterSimulation(multisigTask.root());
        for (uint256 i = 0; i < owners.length; i++) {
            // Decrement the nonces by 1 because in the task simulation, child multisig nonces are incremented.
            MultisigTaskTestHelper.decrementNonceAfterSimulation(owners[i]);
            address[] memory tmpAllSafes = MultisigTaskTestHelper.getAllSafes(address(multisigTask.root()), owners[i]);
            uint256[] memory tmpAllOriginalNonces = MultisigTaskTestHelper.getAllOriginalNonces(tmpAllSafes);
            bytes[] memory tmpAllCalldatas = multisigTask.transactionDatas(actions, tmpAllSafes, tmpAllOriginalNonces);
            bytes memory childSafeCalldata = tmpAllCalldatas[0];
            uint256 childSafeNonce = tmpAllOriginalNonces[0];
            string memory dataToSign = vm.toString(
                GnosisSafeHashes.getEncodedTransactionData(
                    owners[i], childSafeCalldata, 0, childSafeNonce, multicallAddress
                )
            );
            assertEq(keccak256(bytes(dataToSign)), keccak256(bytes(expectedDataToSign[i])));
        }
    }
}
