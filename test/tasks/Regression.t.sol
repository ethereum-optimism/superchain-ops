// SPDX-License-Identifier: MIT
pragma solidity 0.8.15;

import {Test} from "forge-std/Test.sol";
import {IGnosisSafe} from "@base-contracts/script/universal/IGnosisSafe.sol";
import {MultisigTask} from "src/improvements/tasks/MultisigTask.sol";
import {GasConfigTemplate} from "test/tasks/mock/template/GasConfigTemplate.sol";
import {DisputeGameUpgradeTemplate} from "test/tasks/mock/template/DisputeGameUpgradeTemplate.sol";
import {EnableDeputyPauseModuleTemplate} from "src/improvements/template/EnableDeputyPauseModuleTemplate.sol";
import {FinanceTemplate} from "src/improvements/template/FinanceTemplate.sol";
import {OPCMUpgradeV200} from "src/improvements/template/OPCMUpgradeV200.sol";

/// @notice test that the call data and data to sign generated in simulateRun for the multisigs
/// are always the same. This means that if there were any bug introduced in the multisig task, or opcm base task,
/// same call data or data to sign will not be generated at the same block and these tests will fail.
contract RegressionTest is Test {
    /// @notice expected call data and data to sign generated by manually running the GasConfigTemplate at block 22131418 on mainnet
    /// using script:
    /// forge script test/tasks/mock/template/GasConfigTemplate.sol --sig "simulateRun(string)" test/tasks/mock/configs/SingleMultisigGasConfigTemplate.toml --rpc-url mainnet --fork-block-number 22131418 -vv
    function testRegressionCallDataMatches_SingleMultisigGasConfigTemplate() public {
        string memory taskConfigFilePath = "test/tasks/mock/configs/SingleMultisigGasConfigTemplate.toml";
        // call data generated by manually running the gas config template at block 22131418 on mainnet
        string memory expectedCallData =
            "0x174dea7100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001200000000000000000000000005e6432f18bc5d497b1ab2288a025fbf9d69e22210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024b40a817c0000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000000000000000000000007bd909970b0eedcf078de6aeff23ce571663b8aa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024b40a817c0000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new GasConfigTemplate();

        MultisigTask.Action[] memory actions =
            _setupAndSimulateRun(taskConfigFilePath, 22131418, "mainnet", multisigTask, address(0));

        _assertCallData(multisigTask, actions, expectedCallData);

        // data to sign generated by manually running the gas config template at block 22131418 on mainnet
        string memory expectedDataToSign =
            "0x19010f634ad56005ddbd68dc52233931a858f740b8ab706671c42b055efef561257e6a9f52f8c110cfd001b61e93a64a3c5c4dde2196c342d28aeb0697b474d0cb66";

        _assertDataToSignSingleMultisig(multisigTask, actions, expectedDataToSign);
    }

    /// @notice expected call data and data to sign generated by manually running the DisputeGameUpgradeTemplate at block 22131418 on mainnet
    /// using script for each child multisig:
    /// for foundation child multisig with address 0x847B5c174615B1B7fDF770882256e2D3E95b9D92:
    /// forge script test/tasks/mock/template/DisputeGameUpgradeTemplate.sol --sig "signFromChildMultisig(string,address)" test/tasks/mock/configs/NestedMultisigDisputeGameUpgradeTemplate.toml 0x847B5c174615B1B7fDF770882256e2D3E95b9D92 --rpc-url mainnet --fork-block-number 22131418 -vv
    /// for security council child multisig with address 0xc2819DC788505Aac350142A7A707BF9D03E3Bd03:
    /// forge script test/tasks/mock/template/DisputeGameUpgradeTemplate.sol --sig "signFromChildMultisig(string,address)" test/tasks/mock/configs/NestedMultisigDisputeGameUpgradeTemplate.toml 0xc2819DC788505Aac350142A7A707BF9D03E3Bd03 --rpc-url mainnet --fork-block-number 22131418 -vv
    function testRegressionCallDataMatches_NestedMultisigDisputeGameUpgradeTemplate() public {
        string memory taskConfigFilePath = "test/tasks/mock/configs/NestedMultisigDisputeGameUpgradeTemplate.toml";
        // call data generated by manually running the dispute game upgrade template at block 22131418 on mainnet
        string memory expectedCallData =
            "0x174dea71000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000e5965ab5962edc7477c8520243a95517cd252fa9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004414f6b1a30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f691f8a6d908b58c534b624cf16495b491e633ba00000000000000000000000000000000000000000000000000000000";

        MultisigTask multisigTask = new DisputeGameUpgradeTemplate();
        address securityCouncilChildMultisig = 0xc2819DC788505Aac350142A7A707BF9D03E3Bd03;

        MultisigTask.Action[] memory actions =
            _setupAndSimulateRun(taskConfigFilePath, 22131418, "mainnet", multisigTask, securityCouncilChildMultisig);

        _assertCallData(multisigTask, actions, expectedCallData);

        // data to sign generated by manually running the dispute game upgrade template at block 22131418 on mainnet
        // for each child multisig
        string[] memory expectedDataToSign = new string[](2);
        expectedDataToSign[0] =
            "0x1901a4a9c312badf3fcaa05eafe5dc9bee8bd9316c78ee8b0bebe3115bb21b732672db4646e66bd6bc678f143cc8efec4dd275b5fd73bae2dfd6767749cb2f682d3f";
        expectedDataToSign[1] =
            "0x1901df53d510b56e539b90b369ef08fce3631020fbf921e3136ea5f8747c20bce9673b8c1d86baec5e7ce2465d4861e50444b756b64cc1c51a588e472a86d79bba79";

        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign);
    }

    /// @notice expected call data and data to sign generated by manually running the GasConfigTemplate at block 22131418 on mainnet
    /// using script:
    /// forge script test/template/GasConfigTemplate.sol --sig "simulateRun(string)" test/tasks/mock/configs/OPMainnetGasConfigTemplate.toml --rpc-url mainnet --fork-block-number 22131418 -vv
    function testRegressionCallDataMatches_OPMainnetGasConfigTemplate() public {
        string memory taskConfigFilePath = "test/tasks/mock/configs/OPMainnetGasConfigTemplate.toml";
        // call data generated by manually running the gas config template at block 22131418 on mainnet
        string memory expectedCallData =
            "0x174dea71000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000229047fed2591dbec1ef1118d64f7af3db9eb2900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024b40a817c000000000000000000000000000000000000000000000000000000000393870000000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new GasConfigTemplate();
        MultisigTask.Action[] memory actions =
            _setupAndSimulateRun(taskConfigFilePath, 22131418, "mainnet", multisigTask, address(0));

        _assertCallData(multisigTask, actions, expectedCallData);

        // data to sign generated by manually running the gas config template at block 21724199 on mainnet
        string memory expectedDataToSign =
            "0x1901a4a9c312badf3fcaa05eafe5dc9bee8bd9316c78ee8b0bebe3115bb21b7326722f0a9a0a0c907a23f40f9921f4e4c5f5683ec0db0fe3e8b9da84481e8af5a713";

        _assertDataToSignSingleMultisig(multisigTask, actions, expectedDataToSign);
    }

    /// @notice expected call data and data to sign generated by manually running the EnableDeputyPauseModuleTemplate at block 7985478 on sepolia
    /// using script:
    /// forge script src/improvements/template/EnableDeputyPauseModuleTemplate.sol --sig "simulateRun(string)" test/tasks/mock/configs/EnableDeputyPauseModuleTemplate.toml --rpc-url sepolia --fork-block-number 7985478 -vv
    function testRegressionCallDataMatches_EnableDeputyPauseModuleTemplate() public {
        string memory taskConfigFilePath = "test/tasks/mock/configs/EnableDeputyPauseModuleTemplate.toml";
        string memory expectedCallData =
            "0x174dea71000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000837de453ad5f21e89771e3c06239d8236c0efd5e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024610b592500000000000000000000000062f3972c56733ab078f0764d2414dfcaa99d574c00000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new EnableDeputyPauseModuleTemplate();
        MultisigTask.Action[] memory actions =
            _setupAndSimulateRun(taskConfigFilePath, 7985478, "sepolia", multisigTask, address(0));

        _assertCallData(multisigTask, actions, expectedCallData);

        string memory expectedDataToSign =
            "0x1901e84ad8db37faa1651b140c17c70e4c48eaa47a635e0db097ddf4ce1cc14b9ecb6b27a65b3b4d30a15a693010c0c6e4afc352d8f358c25c3115b92b3593f77d7f";

        _assertDataToSignSingleMultisig(multisigTask, actions, expectedDataToSign);
    }

    /// @notice Expected call data and data to sign generated by manually running the OPCMUpgradeV200 template at block 7826712 on sepolia
    /// Using script for each child multisig.
    /// For foundation child multisig with address 0xDEe57160aAfCF04c34C887B5962D0a69676d3C8B:
    /// forge script OPCMUpgradeV200 --sig "signFromChildMultisig(string,address)" test/tasks/example/sep/002-opcm-upgrade-v200/config.toml 0xDEe57160aAfCF04c34C887B5962D0a69676d3C8B --rpc-url sepolia --fork-block-number 7826712 -vv
    /// For security council child multisig with address 0xf64bc17485f0B4Ea5F06A96514182FC4cB561977:
    /// forge script OPCMUpgradeV200 --sig "signFromChildMultisig(string,address)" test/tasks/example/sep/002-opcm-upgrade-v200/config.toml 0xf64bc17485f0B4Ea5F06A96514182FC4cB561977 --rpc-url sepolia --fork-block-number 7826712 -vv
    function testRegressionCallDataMatches_OPCMUpgradeV200() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/002-opcm-upgrade-v200/config.toml";
        // Call data generated by manually running the OPCMUpgradeV200 template at block 7826712 on sepolia
        string memory expectedCallData =
            "0x82ad56cb0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001b25f566336f47bc5e0036d66e142237dcf4640b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a4ff2dd5a100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000034edd2a225f7f429a63e0f1d2084b9e0a93b538000000000000000000000000189abaaaa82dfc015a588a7dbad6f13b1d3485bc035ac388b5cb22acf52a2063cfde108d09b1888655d21f02f595f9c3ea6cbdcd00000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new OPCMUpgradeV200();
        address foundationChildMultisig = 0xDEe57160aAfCF04c34C887B5962D0a69676d3C8B; // sepolia
        MultisigTask.Action[] memory actions =
            _setupAndSimulateRun(taskConfigFilePath, 7826712, "sepolia", multisigTask, foundationChildMultisig);

        _assertCallData(multisigTask, actions, expectedCallData);

        // Data to sign generated by manually running the OPCMUpgradeV200 template at block 7826712 on sepolia
        // for each child multisig
        string[] memory expectedDataToSign = new string[](2);
        expectedDataToSign[0] =
            "0x190137e1f5dd3b92a004a23589b741196c8a214629d4ea3a690ec8e41ae45c689cbb99a01662937ca40ac3b95e231c519889a1d124ec3f908d3aac5fb8b8284e3683";
        expectedDataToSign[1] =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b85339e05b17c62a551259679f03f5e9682fac1dfc89b06e7cae11c6e5ca292fc568e";

        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign);
    }

    /// @notice expected call data and data to sign generated by manually running the FinanceTemplate at block 7985478 on sepolia
    /// using script:
    /// forge script src/improvements/template/FinanceTemplate.sol --sig "simulateRun(string)" test/tasks/mock/configs/TestFinanceTemplate.toml --rpc-url sepolia --fork-block-number 7985478 -vv
    function testRegressionCallDataMatches_FinanceTemplate() public {
        string memory taskConfigFilePath = "test/tasks/mock/configs/TestFinanceTemplate.toml";
        // call data generated by manually running the FinanceTemplate at block 7985478 on sepolia
        string memory expectedCallData =
            "0x174dea710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000140000000000000000000000000bb4daac11b4446ee1c6146de1e26ecf1ab8b3eb60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000f64bc17485f0b4ea5f06a96514182fc4cb561977000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000000000000000000000f64bc17485f0b4ea5f06a96514182fc4cb5619770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new FinanceTemplate();
        MultisigTask.Action[] memory actions =
            _setupAndSimulateRun(taskConfigFilePath, 7985478, "sepolia", multisigTask, address(0));

        _assertCallData(multisigTask, actions, expectedCallData);

        // data to sign generated by manually running the FinanceTemplate at block 7985780 on sepolia
        string memory expectedDataToSign =
            "0x190196c653b6193d04eb71ad87ac1577524661acf1e1e0c492a68c88a1deb059927f53587fd95d1b2a2c286103087407ddff16901fbe97ca49dd0704d1f07aa458c3";

        _assertDataToSignSingleMultisig(multisigTask, actions, expectedDataToSign);
    }

    /// @notice Internal function to set up the fork and run the simulateRun method
    function _setupAndSimulateRun(
        string memory taskConfigFilePath,
        uint256 blockNumber,
        string memory network,
        MultisigTask multisigTask,
        address childMultisig
    ) internal returns (MultisigTask.Action[] memory actions) {
        vm.createSelectFork(network, blockNumber);
        if (childMultisig != address(0)) {
            (, actions) = multisigTask.signFromChildMultisig(taskConfigFilePath, childMultisig);
        } else {
            (, actions) = multisigTask.simulateRun(taskConfigFilePath);
        }
    }

    /// @notice assert that the call data generated by the multisig task matches the expected call data
    function _assertCallData(
        MultisigTask multisigTask,
        MultisigTask.Action[] memory actions,
        string memory expectedCallData
    ) internal view {
        assertEq(
            keccak256(bytes(vm.toString(multisigTask.getMulticall3Calldata(actions)))),
            keccak256(bytes(expectedCallData))
        );
    }

    /// @notice assert that the data to sign generated by the single multisig task matches the expected data to sign
    function _assertDataToSignSingleMultisig(
        MultisigTask multisigTask,
        MultisigTask.Action[] memory actions,
        string memory expectedDataToSign
    ) internal view {
        (bytes memory callData, uint256 value) = multisigTask.getMulticall3CalldataAndValue(actions);
        string memory dataToSign =
            vm.toString(multisigTask.getEncodedTransactionData(multisigTask.parentMultisig(), callData, value));
        assertEq(keccak256(bytes(dataToSign)), keccak256(bytes(expectedDataToSign)));
    }

    /// @notice assert that the data to sign generated by the nested multisig task matches the expected data to sign
    /// for each child multisig
    function _assertDataToSignNestedMultisig(
        MultisigTask multisigTask,
        MultisigTask.Action[] memory actions,
        string[] memory expectedDataToSign
    ) internal view {
        address[] memory owners = IGnosisSafe(multisigTask.parentMultisig()).getOwners();
        for (uint256 i = 0; i < owners.length; i++) {
            string memory dataToSign = vm.toString(
                multisigTask.getEncodedTransactionData(owners[i], multisigTask.generateApproveMulticallData(actions), 0)
            );
            assertEq(keccak256(bytes(dataToSign)), keccak256(bytes(expectedDataToSign[i])));
        }
    }
}
