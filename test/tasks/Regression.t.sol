// SPDX-License-Identifier: MIT
pragma solidity 0.8.15;

import {Test} from "forge-std/Test.sol";
import {IGnosisSafe} from "@base-contracts/script/universal/IGnosisSafe.sol";

import {MultisigTask} from "src/tasks/MultisigTask.sol";
import {GasConfigTemplate} from "test/tasks/mock/template/GasConfigTemplate.sol";
import {EnableDeputyPauseModuleTemplate} from "src/template/EnableDeputyPauseModuleTemplate.sol";
import {OPCMUpgradeV200} from "src/template/OPCMUpgradeV200.sol";
import {OPCMUpgradeV300} from "src/template/OPCMUpgradeV300.sol";
import {OPCMUpgradeV400} from "src/template/OPCMUpgradeV400.sol";
import {OPCMUpdatePrestateV300} from "src/template/OPCMUpdatePrestateV300.sol";
import {OPCMUpdatePrestateV410} from "src/template/OPCMUpdatePrestateV410.sol";
import {SetRespectedGameTypeTemplate} from "src/template/SetRespectedGameTypeTemplate.sol";
import {UpdateRetirementTimestampV200} from "src/template/UpdateRetirementTimestampV200.sol";
import {UpdateRetirementTimestampV400} from "src/template/UpdateRetirementTimestampV400.sol";
import {SystemConfigGasParams} from "src/template/SystemConfigGasParams.sol";
import {MultisigTaskTestHelper} from "test/tasks/MultisigTask.t.sol";
import {DelayedWETHOwnershipTemplate} from "src/template/DelayedWETHOwnershipTemplate.sol";
import {TransferOwners} from "src/template/TransferOwners.sol";
import {TransferL2PAOFromL1} from "src/template/TransferL2PAOFromL1.sol";
import {DisableModule} from "src/template/DisableModule.sol";
import {TransferL2PAOFromL1ToEOA} from "src/template/TransferL2PAOFromL1ToEOA.sol";
import {Action} from "src/libraries/MultisigTypes.sol";
import {GnosisSafeApproveHash} from "src/template/GnosisSafeApproveHash.sol";
import {SetDisputeGameImpl} from "src/template/SetDisputeGameImpl.sol";
import {GnosisSafeHashes} from "src/libraries/GnosisSafeHashes.sol";
import {WelcomeToSuperchainOps} from "src/template/WelcomeToSuperchainOps.sol";
import {GnosisSafeRemoveOwner} from "src/template/GnosisSafeRemoveOwner.sol";
import {GnosisSafeRotateSigner} from "src/template/GnosisSafeRotateSigner.sol";
import {SetEIP1967Implementation} from "src/template/SetEIP1967Implementation.sol";
import {UnpauseSuperchainConfigV400} from "src/template/UnpauseSuperchainConfigV400.sol";
import {UniFix} from "src/template/UniFix.sol";
import {DeputyPauseKeyRotationTemplate} from "src/template/DeputyPauseKeyRotationTemplate.sol";
import {BlacklistGamesV140} from "src/template/BlacklistGamesV140.sol";
import {BlacklistGamesV400} from "src/template/BlacklistGamesV400.sol";
import {OPCMUpgradeV220toV410} from "src/template/OPCMUpgradeV220toV410.sol";
import {OPCMUpgradeV410} from "src/template/OPCMUpgradeV410.sol";
import {OPCMUpgradeSuperchainConfigV410} from "src/template/OPCMUpgradeSuperchainConfigV410.sol";
import {RevenueShareV100UpgradePath} from "src/template/RevenueShareUpgradePath.sol";
import {DeployFeesDepositor} from "src/template/DeployFeesDepositor.sol";
import {LateOptInRevenueShare} from "src/template/LateOptInRevenueShare.sol";
import {L1PortalExecuteL2Call} from "src/template/L1PortalExecuteL2Call.sol";
import {AddGameTypeTemplate} from "src/template/AddGameTypeTemplate.sol";

/// @notice Ensures that simulating the task consistently produces the same call data and data to sign.
/// This guarantees determinism if a bug is introduced in the task logic, the call data or data to sign
/// would differ for the same block, causing these tests to fail.
contract RegressionTest is Test {
    /// @notice expected call data and data to sign generated by manually running the GasConfigTemplate at block 21724199 on mainnet using script:
    /// forge script test/template/GasConfigTemplate.sol --sig "simulate(string)" test/tasks/mock/configs/SingleMultisigGasConfigTemplate.toml --rpc-url mainnet --fork-block-number 21724199 -vv
    function testRegressionCallDataMatches_SingleMultisigGasConfigTemplate() public {
        address rootSafe = address(0x4a4962275DF8C60a80d3a25faEc5AA7De116A746); // SystemConfigOwner
        string memory taskConfigFilePath = "test/tasks/mock/configs/SingleMultisigGasConfigTemplate.toml";
        // Calldata generated by manually running the gas config template at block 21724199 on mainnet.
        string memory expectedCallData =
            "0x174dea7100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001200000000000000000000000005e6432f18bc5d497b1ab2288a025fbf9d69e22210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024b40a817c0000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000000000000000000000007bd909970b0eedcf078de6aeff23ce571663b8aa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024b40a817c0000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000000000";

        MultisigTask multisigTask = new GasConfigTemplate();

        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);
        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 21724199, "mainnet", multisigTask, allSafes);

        bytes memory rootSafeCalldata =
            _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);
        uint256 rootSafeNonce = allOriginalNonces[allOriginalNonces.length - 1];

        // Data to sign generated by manually running the gas config template at block 21724199 on mainnet.
        string memory expectedDataToSign =
            "0x19010f634ad56005ddbd68dc52233931a858f740b8ab706671c42b055efef561257e5ba28ec1e58ea69211eb8e875f10ae165fb3fb4052b15ca2516486f4b059135f";
        string memory dataToSign = vm.toString(
            GnosisSafeHashes.getEncodedTransactionData(rootSafe, rootSafeCalldata, 0, rootSafeNonce, MULTICALL3_ADDRESS)
        );
        // assert that the data to sign generated in simulate is the same as the expected data to sign
        assertEq(keccak256(bytes(dataToSign)), keccak256(bytes(expectedDataToSign)));
        _assertDataToSignSingleMultisig(
            rootSafe, rootSafeCalldata, expectedDataToSign, rootSafeNonce, MULTICALL3_ADDRESS
        );
    }

    /// @notice expected call data and data to sign generated by manually running the GasConfigTemplate at block 21724199 on mainnet using script:
    /// forge script test/template/GasConfigTemplate.sol --sig "simulate(string)" test/tasks/mock/configs/OPMainnetGasConfigTemplate.toml --rpc-url mainnet --fork-block-number 21724199 -vv
    function testRegressionCallDataMatches_OPMainnetGasConfigTemplate() public {
        string memory taskConfigFilePath = "test/tasks/mock/configs/OPMainnetGasConfigTemplate.toml";
        // call data generated by manually running the gas config template at block 21724199 on mainnet
        string memory expectedCallData =
            "0x174dea71000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000229047fed2591dbec1ef1118d64f7af3db9eb2900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024b40a817c000000000000000000000000000000000000000000000000000000000393870000000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new GasConfigTemplate();
        address rootSafe = address(0x847B5c174615B1B7fDF770882256e2D3E95b9D92); // SystemConfigOwner
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 21724199, "mainnet", multisigTask, allSafes);

        bytes memory rootSafeCalldata =
            _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);
        uint256 rootSafeNonce = allOriginalNonces[allOriginalNonces.length - 1];

        // data to sign generated by manually running the gas config template at block 21724199 on mainnet
        string memory expectedDataToSign =
            "0x1901a4a9c312badf3fcaa05eafe5dc9bee8bd9316c78ee8b0bebe3115bb21b732672c98bc9c1761f2e403be0ad32b16d9c5fedf228f97eb0420c722b511129ebc803";

        _assertDataToSignSingleMultisig(
            rootSafe, rootSafeCalldata, expectedDataToSign, rootSafeNonce, MULTICALL3_ADDRESS
        );
    }

    /// @notice expected call data and data to sign generated by manually running the SetRespectedGameTypeTemplate at block 23591161 on mainnet using script:
    /// cd test/tasks/example/eth/004-fp-set-respected-game-type
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/justfile simulate council
    function testRegressionCallDataMatches_SetRespectedGameTypeTemplate() public {
        string memory taskConfigFilePath = "test/tasks/example/eth/004-fp-set-respected-game-type/config.toml";
        string memory expectedCallData =
            "0x174dea710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000004890928941e62e273da359374b105f803329f47300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000247fc48504000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new SetRespectedGameTypeTemplate();
        address rootSafe = address(0x09f7150D8c019BeF34450d6920f6B3608ceFdAf2); // GuardianSafe
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 23591161, "mainnet", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        string[] memory expectedDataToSign = new string[](1);
        expectedDataToSign[0] =
            "0x1901df53d510b56e539b90b369ef08fce3631020fbf921e3136ea5f8747c20bce96784a424304de6939f40116e6a55f5653b172e5aa34a67b95ea28feb3d8c507528";

        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice expected call data and data to sign generated by manually running the example task test/tasks/example/sep/020-blacklist-games-v140:
    /// cd test/tasks/example/sep/020-blacklist-games-v140
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/justfile simulate council
    function testRegressionCallDataMatches_BlacklistGamesV140() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/020-blacklist-games-v140/config.toml";
        string memory expectedCallData =
            "0x174dea710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000120000000000000000000000000ff6eba109271fe6d4237eeed4bab1dd9a77dd1a400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000247d6be8dc00000000000000000000000078f0d900f1cd8fa4d60227ffead39d48f173a50500000000000000000000000000000000000000000000000000000000000000000000000000000000ff6eba109271fe6d4237eeed4bab1dd9a77dd1a400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000247d6be8dc0000000000000000000000002c0df6439425cf3ef5e7482a22caa8c4648024d700000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new BlacklistGamesV140();
        address rootSafe = address(0x7a50f00e8D05b95F98fE38d8BeE366a7324dCf7E); // GuardianSafe
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 9012773, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        string[] memory expectedDataToSign = new string[](1);
        expectedDataToSign[0] =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b8533c8fdcc1b217b04c31388ed0840379310995cf02a324ef3972cf356a69ce43d1d";

        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice expected call data and data to sign generated by manually running the example task test/tasks/example/sep/021-blacklist-games-v400:
    /// cd test/tasks/example/sep/021-blacklist-games-v400
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/justfile simulate council
    function testRegressionCallDataMatches_BlacklistGamesV400() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/021-blacklist-games-v400/config.toml";
        string memory expectedCallData =
            "0x174dea710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000120000000000000000000000000a1cec548926eb5d69aa3b7b57d371edbdd03e64b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000247d6be8dc000000000000000000000000b723b7a3e95d10c5bb997be18cffcd48c90ecb6800000000000000000000000000000000000000000000000000000000000000000000000000000000a1cec548926eb5d69aa3b7b57d371edbdd03e64b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000247d6be8dc0000000000000000000000004ef511afa4d8e3ebae1e9ee4a97d51f8c79f481300000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new BlacklistGamesV400();
        address rootSafe = address(0x7a50f00e8D05b95F98fE38d8BeE366a7324dCf7E); // GuardianSafe
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 9020234, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        string[] memory expectedDataToSign = new string[](1);
        expectedDataToSign[0] =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b85332b1cdfb86d9f2f7e657e8a83ee84b1dc9648a35500de5f2dd57c1629a5dfac9e";

        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice expected call data and data to sign generated by manually running the UpdateRetirementTimestampV200 at block 22183268 on mainnet using script:
    /// forge script src/template/UpdateRetirementTimestampV200.sol --sig "simulate(string)" test/tasks/mock/configs/UpdateRetirementTimestampV200.toml --rpc-url mainnet --fork-block-number 22183268 -vv
    function testRegressionCallDataMatches_UpdateRetirementTimestampV200() public {
        string memory taskConfigFilePath = "test/tasks/mock/configs/UpdateRetirementTimestampV200.toml";
        string memory expectedCallData =
            "0x174dea71000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c6901f65369fc59fc1b4d6d6be7a2318ff38db5b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044a1155ed9000000000000000000000000beb5fc579115071764c7423a4f12edde41f106ed00000000000000000000000000000000000000000000000000000000ffffffff00000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new UpdateRetirementTimestampV200();
        address rootSafe = address(0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A); // FoundationOperationSafe
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 22183268, "mainnet", multisigTask, allSafes);

        bytes memory rootSafeCalldata =
            _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);
        uint256 rootSafeNonce = allOriginalNonces[allOriginalNonces.length - 1];

        string memory expectedDataToSign =
            "0x19014e6a6554de0308f5ece8ff736beed8a1b876d16f5c27cac8e466d7de0c703890efd5a0cf1fefc641f8d16675981b0640aaba135e5d798cf4a14ad442d3022b86";

        _assertDataToSignSingleMultisig(
            rootSafe, rootSafeCalldata, expectedDataToSign, rootSafeNonce, MULTICALL3_ADDRESS
        );
    }

    /// @notice expected call data and data to sign generated by manually running the example task test/tasks/example/sep/022-update-retirement-timestamp-v400:
    /// cd test/tasks/example/sep/022-update-retirement-timestamp-v400
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/justfile simulate council
    function testRegressionCallDataMatches_UpdateRetirementTimestampV400() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/022-update-retirement-timestamp-v400/config.toml";
        string memory expectedCallData =
            "0x174dea71000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000a1cec548926eb5d69aa3b7b57d371edbdd03e64b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000004d5a3e12e00000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new UpdateRetirementTimestampV400();
        address rootSafe = address(0x7a50f00e8D05b95F98fE38d8BeE366a7324dCf7E); // GuardianSafe
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 9020234, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        string[] memory expectedDataToSign = new string[](1);
        expectedDataToSign[0] =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b85337a9149cf89f7f968d83010b63fe03a3f3946ff40e51fe9f2d3980817d3222c5d";

        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice expected call data and data to sign generated by manually running the EnableDeputyPauseModuleTemplate at block 7745524 on sepolia using script:
    /// forge script src/template/EnableDeputyPauseModuleTemplate.sol --sig "simulate(string)" test/tasks/mock/configs/EnableDeputyPauseModuleTemplate.toml --rpc-url sepolia --fork-block-number 7745524 -vv
    function testRegressionCallDataMatches_EnableDeputyPauseModuleTemplate() public {
        string memory taskConfigFilePath = "test/tasks/mock/configs/EnableDeputyPauseModuleTemplate.toml";
        string memory expectedCallData =
            "0x174dea71000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000837de453ad5f21e89771e3c06239d8236c0efd5e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024610b592500000000000000000000000062f3972c56733ab078f0764d2414dfcaa99d574c00000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new EnableDeputyPauseModuleTemplate();
        address rootSafe = address(0x837DE453AD5F21E89771e3c06239d8236c0EFd5E);
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 7745524, "sepolia", multisigTask, allSafes);

        bytes memory rootSafeCalldata =
            _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);
        uint256 rootSafeNonce = allOriginalNonces[allOriginalNonces.length - 1];

        string memory expectedDataToSign =
            "0x1901e84ad8db37faa1651b140c17c70e4c48eaa47a635e0db097ddf4ce1cc14b9ecbf55e2ed894ddff4c0045537c8239db1c4b3ac5700049164b5823ecaa045d7334";

        _assertDataToSignSingleMultisig(
            rootSafe, rootSafeCalldata, expectedDataToSign, rootSafeNonce, MULTICALL3_ADDRESS
        );
    }

    /// @notice Expected call data and data to sign generated by manually running the OPCMUpgradeV200 template at block 7757671 on sepolia using script:
    /// forge script OPCMUpgradeV200 --sig "simulate(string)" test/tasks/example/sep/002-opcm-upgrade-v200/config.toml --rpc-url sepolia --fork-block-number 7826712 -vv
    function testRegressionCallDataMatches_OPCMUpgradeV200() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/002-opcm-upgrade-v200/config.toml";
        // Call data generated by manually running the OPCMUpgradeV200 template at block 7826712 on sepolia
        string memory expectedCallData =
            "0x82ad56cb0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001b25f566336f47bc5e0036d66e142237dcf4640b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a4ff2dd5a100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000034edd2a225f7f429a63e0f1d2084b9e0a93b538000000000000000000000000189abaaaa82dfc015a588a7dbad6f13b1d3485bc035ac388b5cb22acf52a2063cfde108d09b1888655d21f02f595f9c3ea6cbdcd00000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new OPCMUpgradeV200();
        address rootSafe = address(0x1Eb2fFc903729a0F03966B917003800b145F56E2);
        address foundationChildMultisig = 0xDEe57160aAfCF04c34C887B5962D0a69676d3C8B; // sepolia
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, foundationChildMultisig);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 7826712, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        // Data to sign generated by manually running the OPCMUpgradeV200 template at block 7826712 on sepolia
        // for each child multisig
        string[] memory expectedDataToSign = new string[](2);
        expectedDataToSign[0] =
            "0x190137e1f5dd3b92a004a23589b741196c8a214629d4ea3a690ec8e41ae45c689cbbc4308e7f6e5e57b1527f2a53444553ecad29ae331fa07bbc0c91e6e73986e250";
        expectedDataToSign[1] =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b8533efa681cff20329f64ecd2a4ec88d618f5e3aaee370a9a4550df3cda85e94352e";

        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice Expected call data and data to sign generated by manually running the OPCMUpgradeV300 template at block 8044263 on sepolia.
    /// Simulate from task directory (test/tasks/example/sep/006-opcm-upgrade-v300) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/nested.just simulate <foundation|council>
    function testRegressionCallDataMatches_OPCMUpgradeV300() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/006-opcm-upgrade-v300/config.toml";
        // Call data generated by manually running the OPCMUpgradeV300 template at block 7972618 on sepolia
        string memory expectedCallData =
            "0x82ad56cb000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000fbceed4de885645fbded164910e10f52febfab350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a4ff2dd5a100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000034edd2a225f7f429a63e0f1d2084b9e0a93b538000000000000000000000000189abaaaa82dfc015a588a7dbad6f13b1d3485bc03ee2917da962ec266b091f4b62121dc9682bb0db534633707325339f99ee40500000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new OPCMUpgradeV300();
        address rootSafe = address(0x1Eb2fFc903729a0F03966B917003800b145F56E2);
        address foundationChildMultisig = 0xDEe57160aAfCF04c34C887B5962D0a69676d3C8B; // sepolia
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, foundationChildMultisig);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 8044263, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        // Data to sign generated by manually running the OPCMUpgradeV300 template at block 8044263 on sepolia for each child multisig.
        string[] memory expectedDataToSign = new string[](2);
        // Foundation data to sign
        expectedDataToSign[0] =
            "0x190137e1f5dd3b92a004a23589b741196c8a214629d4ea3a690ec8e41ae45c689cbb11f6f1f3f232ad28d30230fa28696a442aa331937c8555e31c226b8bf3113539";
        // Security council data to sign
        expectedDataToSign[1] =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b8533e69a8eedc212201257878d96005085a48167c2dd1a817fec01be553c995f5ca4";

        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice Expected call data and data to sign generated by manually running the OPCMUpgradeV400 template at block 8368038 on sepolia.
    /// Simulate from task directory (test/tasks/example/sep/008-opcm-upgrade-v400) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/nested.just simulate <foundation|council>
    function testRegressionCallDataMatches_OPCMUpgradeV400() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/008-opcm-upgrade-v400/config.toml";
        // Call data generated by manually running the OPCMUpgradeV400 template at block 8318585 on sepolia
        string memory expectedCallData =
            "0x82ad56cb00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000044c191ce5ce35131e703532af75fa9ca221e23980000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a4ff2dd5a100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000034edd2a225f7f429a63e0f1d2084b9e0a93b538000000000000000000000000189abaaaa82dfc015a588a7dbad6f13b1d3485bc03eb07101fbdeaf3f04d9fb76526362c1eea2824e4c6e970bdb19675b72e4fc800000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new OPCMUpgradeV400();
        address rootSafe = address(0x1Eb2fFc903729a0F03966B917003800b145F56E2);
        address foundationChildMultisig = 0xDEe57160aAfCF04c34C887B5962D0a69676d3C8B; // sepolia
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, foundationChildMultisig);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 8469737, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        // Data to sign generated by manually running the OPCMUpgradeV400 template at block 8318585 on sepolia
        // for each child multisig.
        string[] memory expectedDataToSign = new string[](2);
        // Foundation data to sign
        expectedDataToSign[0] =
            "0x190137e1f5dd3b92a004a23589b741196c8a214629d4ea3a690ec8e41ae45c689cbb87ee50a37f48a4e4bb87ccbfd4ecaa93fa2d6b160ed09514c341d37808a53ad1";
        // Security council data to sign
        expectedDataToSign[1] =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b853387e1c03a81ed868bb85caef0bc0ce050a1c900d8003e4026e21a55f93b0ab58d";

        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice Expected call data and data to sign generated by manually running the SystemConfigGasParams template at block 22283936 on mainnet.
    /// Simulate from task directory (test/tasks/example/eth/006-system-config-gas-params) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/single.just simulate
    function testRegressionCallDataMatches_SystemConfigGasParams() public {
        string memory taskConfigFilePath = "test/tasks/example/eth/006-system-config-gas-params/config.toml";
        // Call data generated by manually running the SystemConfigGasParams template at block 22283936 on mainnet
        string memory expectedCallData =
            "0x174dea710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000120000000000000000000000000229047fed2591dbec1ef1118d64f7af3db9eb2900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024b40a817c0000000000000000000000000000000000000000000000000000000002625a0000000000000000000000000000000000000000000000000000000000000000000000000000000000229047fed2591dbec1ef1118d64f7af3db9eb2900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044c0fd4b4100000000000000000000000000000000000000000000000000000000000000fa000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new SystemConfigGasParams();
        address rootSafe = address(0x847B5c174615B1B7fDF770882256e2D3E95b9D92); // FoundationUpgradeSafe
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 22283936, "mainnet", multisigTask, allSafes);

        bytes memory rootSafeCalldata =
            _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);
        uint256 rootSafeNonce = allOriginalNonces[allOriginalNonces.length - 1];

        string memory expectedDataToSign =
            "0x1901a4a9c312badf3fcaa05eafe5dc9bee8bd9316c78ee8b0bebe3115bb21b73267249771935e440b6212f2f0a8302967dcac81b52ea7573563fd25b9b7ee33d8b3e";

        _assertDataToSignSingleMultisig(
            rootSafe, rootSafeCalldata, expectedDataToSign, rootSafeNonce, MULTICALL3_ADDRESS
        );
    }

    /// @notice expected call data and data to sign generated by manually running the DelayedWETHOwnershipTemplate at block 22183268 on mainnet using script:
    /// forge script src/template/DelayedWETHOwnershipTemplate.sol --sig "simulate(string)" test/tasks/example/eth/007-delayedweth-xfer/config.toml --rpc-url mainnet --fork-block-number 22183268 -vv
    function testRegressionCallDataMatches_DelayedWETHOwnershipTemplate() public {
        string memory taskConfigFilePath = "test/tasks/example/eth/007-delayedweth-xfer/config.toml";
        // call data generated by manually running the DelayedWETHOwnershipTemplate at block 22183268 on mainnet
        string memory expectedCallData =
            "0x174dea710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000120000000000000000000000000323dfc63c9b83cb83f40325aab74b245937cbdf00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024f2fde38b0000000000000000000000005a0aae59d09fccbddb6c6cceb07b7279367c3d2a0000000000000000000000000000000000000000000000000000000000000000000000000000000021429af66058bc3e4ae4a8f2ec4531aac433ecbc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024f2fde38b0000000000000000000000005a0aae59d09fccbddb6c6cceb07b7279367c3d2a00000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new DelayedWETHOwnershipTemplate();
        address rootSafe = address(0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A);
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 22183268, "mainnet", multisigTask, allSafes);

        bytes memory rootSafeCalldata =
            _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);
        uint256 rootSafeNonce = allOriginalNonces[allOriginalNonces.length - 1];

        // data to sign generated by manually running the DelayedWETHOwnershipTemplate at block 22183268 on mainnet
        string memory expectedDataToSign =
            "0x19014e6a6554de0308f5ece8ff736beed8a1b876d16f5c27cac8e466d7de0c7038908e5dea9945db51a2fd31cc5fa5b253f41b5a48a277d5c22c494851aa42567e8a";

        _assertDataToSignSingleMultisig(
            rootSafe, rootSafeCalldata, expectedDataToSign, rootSafeNonce, MULTICALL3_ADDRESS
        );
    }

    /// @notice Expected call data and data to sign generated by manually running the OPCMUpdatePrestateV300 template at block 8098229 on sepolia
    /// Simulate from task directory (test/tasks/example/sep/008-opcm-upgrade-prestate-v300) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/nested.just simulate <foundation|council>
    function testRegressionCallDataMatches_OPCMUpdatePrestateV300() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/008-opcm-upgrade-prestate-v300/config.toml";
        // Call data generated by manually running the OPCMUpdatePrestateV300 template at block 8098229 on sepolia.
        string memory expectedCallData =
            "0x82ad56cb000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000fbceed4de885645fbded164910e10f52febfab350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a49a72745b00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000034edd2a225f7f429a63e0f1d2084b9e0a93b538000000000000000000000000189abaaaa82dfc015a588a7dbad6f13b1d3485bc03682932cec7ce0a3874b19675a6bbc923054a7b321efc7d3835187b172494b600000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new OPCMUpdatePrestateV300();
        address rootSafe = address(0x1Eb2fFc903729a0F03966B917003800b145F56E2);
        address foundationChildMultisig = 0xDEe57160aAfCF04c34C887B5962D0a69676d3C8B;
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, foundationChildMultisig);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 8098229, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        // Data to sign generated by manually running the OPCMUpdatePrestateV300 template at block 8098229 on sepolia.
        string[] memory expectedDataToSign = new string[](2);
        // Foundation
        expectedDataToSign[0] =
            "0x190137e1f5dd3b92a004a23589b741196c8a214629d4ea3a690ec8e41ae45c689cbbb1f8d34235beb2352fb105844bbe0ddd2f2e940cbf9718fd1cd603f45dd490af";
        // Security council
        expectedDataToSign[1] =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b853381e5ba64d901a287c73ec3c85d7fb1f2e6b629e2450583b6532b301ee6ee5347";
        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice Expected call data and data to sign generated by manually running the OPCMUpdatePrestateV410 template at block 9327881 on sepolia
    /// Simulate from task directory (test/tasks/example/sep/028-opcm-update-prestate-v410) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path "$(pwd)/.env" --justfile ../../../../../src/justfile simulate <foundation|council>
    function testRegressionCallDataMatches_OPCMUpdatePrestateV410() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/028-opcm-update-prestate-v410/config.toml";
        // Call data generated by manually running the OPCMUpdatePrestateV410 template at block 9327881 on sepolia.
        string memory expectedCallData =
            "0x82ad56cb0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000003bb6437aba031afbf9cb3538fa064161e2bf2d780000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a49a72745b00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000034edd2a225f7f429a63e0f1d2084b9e0a93b538000000000000000000000000189abaaaa82dfc015a588a7dbad6f13b1d3485bcdead00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new OPCMUpdatePrestateV410();
        address rootSafe = address(0x1Eb2fFc903729a0F03966B917003800b145F56E2);
        address foundationChildMultisig = 0xDEe57160aAfCF04c34C887B5962D0a69676d3C8B;
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, foundationChildMultisig);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 9327881, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        // Data to sign generated by manually running the OPCMUpdatePrestateV410 template at block 9327881 on sepolia.
        string[] memory expectedDataToSign = new string[](2);
        // Foundation
        expectedDataToSign[0] =
            "0x190137e1f5dd3b92a004a23589b741196c8a214629d4ea3a690ec8e41ae45c689cbb08ad152c64b380ea271693325a628e4a7aa2d70ff311f22cc0ceff34c34d9877";
        // Security council
        expectedDataToSign[1] =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b8533766facb22395ca23edfd1485fd285bfeb3c25354a43ebd02ef6f8d072c69aa14";
        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice Expected call data and data to sign generated by manually running the TransferL2PAOFromL1 template at block 22447773 on mainnet.
    /// Simulate from task directory (test/tasks/example/eth/008-transfer-l2pao) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/nested.just simulate <foundation|council>
    function testRegressionCallDataMatches_TransferL2PAOFromL1() public {
        string memory taskConfigFilePath = "test/tasks/example/eth/008-transfer-l2pao/config.toml";
        // Call data generated by manually running the TransferL2PAOFromL1 template at block 22447773 on mainnet.
        string memory expectedCallData =
            "0x174dea710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000bd48f6b86a26d3a217d0fa6ffe2b491b956a7a20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000104e9e05c42000000000000000000000000420000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030d40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000024f2fde38b0000000000000000000000006b1bae59d09fccbddb6c6cceb07b7279367c4e3b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new TransferL2PAOFromL1();
        address currentRootSafe = address(0x6d5B183F538ABB8572F5cD17109c617b994D5833);
        address foundationChildMultisig = 0x847B5c174615B1B7fDF770882256e2D3E95b9D92;
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(currentRootSafe, foundationChildMultisig);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 22447773, "mainnet", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        // Data to sign generated by manually running the TransferL2PAOFromL1 template at block 22447773 on mainnet.
        string[] memory expectedDataToSign = new string[](3);
        // Chain Governor
        expectedDataToSign[0] =
            "0x19014f0b6efb6c01fa7e127a0ff87beefbeb53e056d30d3216c5ac70371b909ca66dfb594dad0fab2218f67e5dfd7c87902748576e588a07d519f00bad25ed8bf8fa";
        // Foundation
        expectedDataToSign[1] =
            "0x1901a4a9c312badf3fcaa05eafe5dc9bee8bd9316c78ee8b0bebe3115bb21b732672fed866eb0ea2cb397e3221b69f5761605f7362acd36b63b250590620bf5afb9b";
        // Security council
        expectedDataToSign[2] =
            "0x1901df53d510b56e539b90b369ef08fce3631020fbf921e3136ea5f8747c20bce9673ab916bc61b8c632aec6f0c75fb0ad2514dcda3bd2fb7030465b7e02fb7f8764";
        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, currentRootSafe);
    }

    /// @notice Expected call data and data to sign generated by manually running the DisableModule template at block 8326814 on sepolia
    /// Simulate from task directory (test/tasks/example/sep/011-disable-module) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/single.just simulate
    function testRegressionCallDataMatches_DisableModule() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/011-disable-module/config.toml";
        // Call data generated by manually running the DisableModule template at block 8326814 on sepolia.
        string memory expectedCallData =
            "0x174dea710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000007a50f00e8d05b95f98fe38d8bee366a7324dcf7e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044e009cfde0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fd7e6ef1f6c9e4cc34f54065bf8496ce41a4e2e800000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new DisableModule();
        address rootSafe = address(0x7a50f00e8D05b95F98fE38d8BeE366a7324dCf7E);
        address nestedSafe = address(0xf64bc17485f0B4Ea5F06A96514182FC4cB561977);
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, nestedSafe);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 8326814, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        // Data to sign generated by manually running the DisableModule template at block 8326814 on sepolia.
        string[] memory expectedDataToSign = new string[](1);
        // Council
        expectedDataToSign[0] =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b85339654f9ead3f00526f2118928a8d9c125a15e37c6ba8b92430dc207ac54928c2f";
        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice Expected call data and data to sign generated by manually running the UnpauseSuperchainConfigV400 template at block 8792870 on sepolia
    /// Simulate from task directory (test/tasks/example/sep/019-unpause-superchainConfig) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/nested.just simulate council
    function testRegressionCallDataMatches_UnpauseSuperchainConfigV400() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/019-unpause-superchainConfig/config.toml";
        // Call data generated by manually running the UnpauseSuperchainConfigV400 template at block 8792870 on sepolia.
        string memory expectedCallData =
            "0x174dea71000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c2be75506d5724086deb7245bd260cc9753911be000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000002457b001f9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new UnpauseSuperchainConfigV400();
        address rootSafe = address(0x7a50f00e8D05b95F98fE38d8BeE366a7324dCf7E);
        address nestedSafe = address(0xf64bc17485f0B4Ea5F06A96514182FC4cB561977);
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, nestedSafe);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 8792870, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        // Data to sign generated by manually running the UnpauseSuperchainConfigV400 template at block 8792870 on sepolia.
        string[] memory expectedDataToSign = new string[](1);
        // Council
        expectedDataToSign[0] =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b8533568ef7810386d4be5591ed8d616b84789847e5f27d993f4f40ce1540579c0abe";
        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice Expected call data and data to sign generated by manually running the TransferOwners template at block 22469206 on mainnet.
    /// Simulate from task directory (test/tasks/example/eth/009-transfer-owners) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/nested.just simulate <foundation|council>
    function testRegressionCallDataMatches_TransferOwners() public {
        string memory taskConfigFilePath = "test/tasks/example/eth/009-transfer-owners/config.toml";
        // Call data generated by manually running the TransferOwners template at block 22469206 on mainnet.
        string memory expectedCallData =
            "0x174dea7100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000004e000000000000000000000000000000000000000000000000000000000000005e000000000000000000000000000000000000000000000000000000000000006e000000000000000000000000000000000000000000000000000000000000007e00000000000000000000000002f12d621a16e2d3285929c9996f478508951dfe40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024f2fde38b0000000000000000000000005a0aae59d09fccbddb6c6cceb07b7279367c3d2a000000000000000000000000000000000000000000000000000000000000000000000000000000003b73fa8d82f511a3cae17b5a26e4e1a2d5e2f2a4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004499a88ec400000000000000000000000084b268a4101a8c8e3ccb33004f81ed08202ba124000000000000000000000000d81f43edbcacb4c29a9ba38a13ee5d79278270cc0000000000000000000000000000000000000000000000000000000000000000000000000000000084b268a4101a8c8e3ccb33004f81ed08202ba12400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000444e91db0800000000000000000000000000000000000000000000000000000000000000330000000000000000000000005a0aae59d09fccbddb6c6cceb07b7279367c3d2a000000000000000000000000000000000000000000000000000000000000000000000000000000003b73fa8d82f511a3cae17b5a26e4e1a2d5e2f2a4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004499a88ec400000000000000000000000084b268a4101a8c8e3ccb33004f81ed08202ba1240000000000000000000000005e40b9231b86984b5150507046e354dbfbed3d9e000000000000000000000000000000000000000000000000000000000000000000000000000000003b73fa8d82f511a3cae17b5a26e4e1a2d5e2f2a4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004499a88ec4000000000000000000000000c9edb4e340f4e9683b4557bd9db8f9d932177c86000000000000000000000000d81f43edbcacb4c29a9ba38a13ee5d79278270cc00000000000000000000000000000000000000000000000000000000000000000000000000000000c9edb4e340f4e9683b4557bd9db8f9d932177c8600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000444e91db0800000000000000000000000000000000000000000000000000000000000000330000000000000000000000005a0aae59d09fccbddb6c6cceb07b7279367c3d2a000000000000000000000000000000000000000000000000000000000000000000000000000000003b73fa8d82f511a3cae17b5a26e4e1a2d5e2f2a4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004499a88ec4000000000000000000000000c9edb4e340f4e9683b4557bd9db8f9d932177c860000000000000000000000005e40b9231b86984b5150507046e354dbfbed3d9e000000000000000000000000000000000000000000000000000000000000000000000000000000003b73fa8d82f511a3cae17b5a26e4e1a2d5e2f2a40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024f2fde38b0000000000000000000000005a0aae59d09fccbddb6c6cceb07b7279367c3d2a00000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new TransferOwners();
        address currentRootSafe = address(0x6d5B183F538ABB8572F5cD17109c617b994D5833);
        address foundationChildMultisig = 0x847B5c174615B1B7fDF770882256e2D3E95b9D92;
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(currentRootSafe, foundationChildMultisig);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 22469206, "mainnet", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        // Data to sign generated by manually running the TransferOwners template at block 22469206 on mainnet.
        string[] memory expectedDataToSign = new string[](3);
        // Chain governor
        expectedDataToSign[0] =
            "0x19014f0b6efb6c01fa7e127a0ff87beefbeb53e056d30d3216c5ac70371b909ca66deb125b2251625aa3f98d8d46c8d8771105d0475cdda3c35de7672d4945b54498";
        // Foundation
        expectedDataToSign[1] =
            "0x1901a4a9c312badf3fcaa05eafe5dc9bee8bd9316c78ee8b0bebe3115bb21b732672082925b8bf493f10dffb8a3d5ccd8ccce453395061340626ce17ca26d82cf743";
        // Security council
        expectedDataToSign[2] =
            "0x1901df53d510b56e539b90b369ef08fce3631020fbf921e3136ea5f8747c20bce9671941d118233b743265fac6af569f20f3a3ab6f1e82d11bdfd6804395018919ff";
        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, currentRootSafe);
    }

    /// @notice Expected call data and data to sign generated by manually running the GnosisSafeApproveHash template at block 8384642 on sepolia
    /// Simulate from task directory (test/tasks/example/sep/013-gnosis-safe-approve-hash) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/nested.just simulate base
    function testRegressionCallDataMatches_GnosisSafeApproveHash() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/013-gnosis-safe-approve-hash/config.toml";
        string memory expectedCallData =
            "0x174dea710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000fe884546476ddd290ec46318785046ef68a0ba90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024d4d9bdcdffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new GnosisSafeApproveHash();
        address rootSafe = address(0x646132A1667ca7aD00d36616AFBA1A28116C770A);
        address nestedSafe = address(0x6AF0674791925f767060Dd52f7fB20984E8639d8);
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, nestedSafe);
        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 8384642, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        // Data to sign generated by manually running the GnosisSafeApproveHash template at block 8384642 on sepolia.
        string[] memory expectedDataToSign = new string[](2);
        // Base
        expectedDataToSign[0] =
            "0x19016f25427e79742a1eb82c103e2bf43c85fc59509274ec258ad6ed841c4a0048aa2e27e741e14f9f6dec72970055113c8d1ce16a6501494d60c37b62f6ee5cf93d";
        // Council
        expectedDataToSign[1] =
            "0x19010127bbb910536860a0757a9c0ffcdf9e4452220f566ed83af1f27f9e833f0e230465e4668267169d5177270efb72b5bb67c2c926901e3c6b144b2e1c3c6532f4";

        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice Expected call data and data to sign generated by manually running the TransferL2PAOFromL1ToEOA template
    /// Simulate from task directory (test/tasks/example/sep/027-transfer-l2pao-to-eoa) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path "$(pwd)/.env" --justfile ../../../../../src/justfile simulate
    function testRegressionCallDataMatches_TransferL2PAOFromL1ToEOA() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/027-transfer-l2pao-to-eoa/config.toml";
        // Call data generated by manually running the TransferL2PAOFromL1ToEOA template on sepolia
        string memory expectedCallData =
            "0x174dea71000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000ff6eba109271fe6d4237eeed4bab1dd9a77dd1a40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000104e9e05c42000000000000000000000000420000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030d40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000024f2fde38b000000000000000000000000e78a0a96c5d6ae6c606418ed4a9ced378cb030a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new TransferL2PAOFromL1ToEOA();
        // Using the Worldchain sepolia challenger safe from the actual simulation
        address rootSafe = address(0x945185C01fb641bA3E63a9bdF66575e35a407837);
        address[] memory allSafes = new address[](1);
        allSafes[0] = rootSafe;
        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 9000000, "sepolia", multisigTask, allSafes);
        bytes memory rootSafeCalldata =
            _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        // Data to sign generated by manually running the TransferL2PAOFromL1ToEOA template on sepolia
        uint256 rootSafeNonce = allOriginalNonces[allOriginalNonces.length - 1];
        string memory expectedDataToSign =
            "0x19016faec9c52949ba8274340008df12c69faedd5c44e77f77c956d2ca8e4bcd877ece8dfc106d22fd21fc65bfa3fe41c4943eb0f02cfb831d03cd4a15934b5fe163";
        _assertDataToSignSingleMultisig(
            rootSafe, rootSafeCalldata, expectedDataToSign, rootSafeNonce, MULTICALL3_ADDRESS
        );
    }

    /// @notice Expected call data and data to sign generated by manually running the SetDisputeGameImpl template at block 7798424 on sepolia.
    /// Simulate from task directory (test/tasks/example/sep/014-set-dispute-game-impl/config.toml) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/nested.just simulate <foundation|council>
    function testRegressionCallDataMatches_SetDisputeGameImpl() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/014-set-dispute-game-impl/config.toml";
        string memory expectedCallData =
            "0x174dea71000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000380000000000000000000000000860e626c700af381133d9f4af31412a2d1db3d5d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004414f6b1a30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000323d727a1a147869cec0c02de1d4195d1b71f2eb00000000000000000000000000000000000000000000000000000000000000000000000000000000860e626c700af381133d9f4af31412a2d1db3d5d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004414f6b1a3000000000000000000000000000000000000000000000000000000000000000100000000000000000000000039228e51a12662d78de478bfa1930fc7595337d800000000000000000000000000000000000000000000000000000000000000000000000000000000860e626c700af381133d9f4af31412a2d1db3d5d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000441e3342400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011c37937e08000000000000000000000000000000000000000000000000000000000000000000000000000000000000860e626c700af381133d9f4af31412a2d1db3d5d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000441e3342400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000011c37937e08000000000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new SetDisputeGameImpl();
        address rootSafe = address(0x1Eb2fFc903729a0F03966B917003800b145F56E2);
        address nestedSafe = address(0xDEe57160aAfCF04c34C887B5962D0a69676d3C8B); // sepolia
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, nestedSafe);
        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 7798424, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        string[] memory expectedDataToSign = new string[](2);
        // Foundation
        expectedDataToSign[0] =
            "0x190137e1f5dd3b92a004a23589b741196c8a214629d4ea3a690ec8e41ae45c689cbb1a9de2fedb15bb0ff64bf46c471a46a6316c63f5869e6569f8f278948ba98215";
        // Security Council
        expectedDataToSign[1] =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b8533ca9a17a70e3907304b76eac257ee383fe711c3d859fa473b991887531152e07b";
        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice Expected call data and data to sign generated by manually running the OPCMUpgradeV220toV410 template at block 9216877 on sepolia.
    /// Simulate from task directory (test/tasks/example/sep/023-u13-to-u16a) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/justfile simulate <foundation|council>
    function testRegressionCallDataMatches_OPCMUpgradeV220toV410() public {
        // Particularly gas guzzling template that can sometimes error with OOG. Manually pausing gas usage to circumvent OOG errors.
        // Note: Running 'forge test' alone usually passes but when ran with verbosity flags ('-vvv'), errors occur.
        vm.pauseGasMetering();
        string memory taskConfigFilePath = "test/tasks/example/sep/023-u13-to-u16a/config.toml";
        string memory expectedCallData =
            "0x82ad56cb00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004400000000000000000000000006b6f9129efb1b7a48f84e3b787333d1dca02ee340000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a4ff2dd5a10000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000015cd4f6e0ce3b4832b33cb9c6f6fe6fc246754c2000000000000000000000000e7413127f29e050df65ac3fc9335f85bb10091ae039facea52b20c605c05efb0a33560a92de7074218998f75bcdf61e8989cb5d900000000000000000000000000000000000000000000000000000000000000000000000000000000fbceed4de885645fbded164910e10f52febfab350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a4ff2dd5a10000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000015cd4f6e0ce3b4832b33cb9c6f6fe6fc246754c2000000000000000000000000e7413127f29e050df65ac3fc9335f85bb10091ae03ee2917da962ec266b091f4b62121dc9682bb0db534633707325339f99ee40500000000000000000000000000000000000000000000000000000000000000000000000000000000fbceed4de885645fbded164910e10f52febfab350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a49a72745b0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000015cd4f6e0ce3b4832b33cb9c6f6fe6fc246754c2000000000000000000000000e7413127f29e050df65ac3fc9335f85bb10091ae03682932cec7ce0a3874b19675a6bbc923054a7b321efc7d3835187b172494b6000000000000000000000000000000000000000000000000000000000000000000000000000000003bb6437aba031afbf9cb3538fa064161e2bf2d780000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a4ff2dd5a10000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000015cd4f6e0ce3b4832b33cb9c6f6fe6fc246754c2000000000000000000000000e7413127f29e050df65ac3fc9335f85bb10091ae03eb07101fbdeaf3f04d9fb76526362c1eea2824e4c6e970bdb19675b72e4fc800000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new OPCMUpgradeV220toV410();
        address rootSafe = address(0x1Eb2fFc903729a0F03966B917003800b145F56E2);
        address nestedSafe = address(0xDEe57160aAfCF04c34C887B5962D0a69676d3C8B); // sepolia
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, nestedSafe);
        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 9216877, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        string[] memory expectedDataToSign = new string[](2);
        // Foundation
        expectedDataToSign[0] =
            "0x190137e1f5dd3b92a004a23589b741196c8a214629d4ea3a690ec8e41ae45c689cbba5cafe700f789415656d7083117f4bac8a4d0810190eb7b476c6a76d6a18c922";
        // Security Council
        expectedDataToSign[1] =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b85339e2cbd43f4e7012cbc1aae98fa97604dc06acea1e17c3a73b7a0bdb66c83df7b";
        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
        vm.resumeGasMetering();
    }

    /// @notice expected call data and data to sign generated by manually running the WelcomeToSuperchainOps at block 22884610 on mainnet using script:
    /// forge script test/template/WelcomeToSuperchainOps.sol --sig "simulate(string)" test/tasks/example/eth/011-welcome-to-superchain-ops/config.toml --rpc-url mainnet --fork-block-number 22884610 -vv
    function testRegressionCallDataMatches_WelcomeToSuperchainOps() public {
        address rootSafe = address(0xc2819DC788505Aac350142A7A707BF9D03E3Bd03); // SecurityCouncil
        string memory taskConfigFilePath = "test/tasks/example/eth/011-welcome-to-superchain-ops/config.toml";
        // Calldata generated by manually running the WelcomeToSuperchainOps template at block 21724199 on mainnet.
        string memory expectedCallData =
            "0x174dea710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000fb11b4164894912f079de62699f4cc5a2271f0c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000064c47f0027000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000075361746f7368690000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        MultisigTask multisigTask = new WelcomeToSuperchainOps();

        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);
        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 22884610, "mainnet", multisigTask, allSafes);

        bytes memory rootSafeCalldata =
            _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);
        uint256 rootSafeNonce = allOriginalNonces[allOriginalNonces.length - 1];

        // Data to sign generated by manually running the gas config template at block 21724199 on mainnet.
        string memory expectedDataToSign =
            "0x1901df53d510b56e539b90b369ef08fce3631020fbf921e3136ea5f8747c20bce967403a740666390f395a1b6c8e6c4647b4fc82a84c1c46579df5920cd8dd1e8557";
        string memory dataToSign = vm.toString(
            GnosisSafeHashes.getEncodedTransactionData(rootSafe, rootSafeCalldata, 0, rootSafeNonce, MULTICALL3_ADDRESS)
        );
        // assert that the data to sign generated in simulate is the same as the expected data to sign
        assertEq(keccak256(bytes(dataToSign)), keccak256(bytes(expectedDataToSign)));
        _assertDataToSignSingleMultisig(
            rootSafe, rootSafeCalldata, expectedDataToSign, rootSafeNonce, MULTICALL3_ADDRESS
        );
    }

    /// @notice Expected call data and data to sign generated by manually running the GnosisSafeRemoveOwner at block 8764394 on mainnet using script:
    /// forge script GnosisSafeRemoveOwner --sig "simulate(string)" test/tasks/example/sep/016-gnosis-safe-remove-owner/config.toml --rpc-url sepolia --fork-block-number 8764394 -vv
    function testRegressionCallDataMatches_GnosisSafeRemoveOwner() public {
        address rootSafe = address(0xf64bc17485f0B4Ea5F06A96514182FC4cB561977); // SecurityCouncil
        string memory taskConfigFilePath = "test/tasks/example/sep/016-gnosis-safe-remove-owner/config.toml";
        // Calldata generated by manually running the WelcomeToSuperchainOps template at block 21724199 on mainnet.
        string memory expectedCallData =
            "0x174dea71000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f64bc17485f0b4ea5f06a96514182fc4cb5619770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000064f8dc5dd900000000000000000000000000000000000000000000000000000000000000010000000000000000000000001084092ac2f04c866806cf3d4a385afa4f6a6c97000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000";

        MultisigTask multisigTask = new GnosisSafeRemoveOwner();

        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);
        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 8764394, "sepolia", multisigTask, allSafes);

        bytes memory rootSafeCalldata =
            _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);
        uint256 rootSafeNonce = allOriginalNonces[allOriginalNonces.length - 1];

        // Data to sign generated by manually running the gas config template at block 8764394 on sepolia.
        string memory expectedDataToSign =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b8533b3f87e97e0fb7d9d4d4aac3b90da9f4d380c27f9a91e1e883083ced5395e3ab9";
        string memory dataToSign = vm.toString(
            GnosisSafeHashes.getEncodedTransactionData(rootSafe, rootSafeCalldata, 0, rootSafeNonce, MULTICALL3_ADDRESS)
        );
        // assert that the data to sign generated in simulate is the same as the expected data to sign
        assertEq(keccak256(bytes(dataToSign)), keccak256(bytes(expectedDataToSign)));
        _assertDataToSignSingleMultisig(
            rootSafe, rootSafeCalldata, expectedDataToSign, rootSafeNonce, MULTICALL3_ADDRESS
        );
    }

    /// @notice Expected call data and data to sign generated by manually running the SetEIP1967Implementation template at block 8772255 on sepolia.
    /// Simulate from task directory (test/tasks/example/sep/018-set-eip1967-impl/config.toml) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/nested.just simulate <test-rehearsal-council|test-rehearsal-foundation>
    function testRegressionCallDataMatches_SetEIP1967Implementation() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/018-set-eip1967-impl/config.toml";
        string memory expectedCallData =
            "0x174dea710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000003f096542fa6f082d09748eb43cb2fb4394e211a1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004499a88ec4000000000000000000000000a88d1b67dee50d0f1465868628a145fe828694f70000000000000000000000002d7e764a0d9919e16983a46595cfa81fc34fa7cd00000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new SetEIP1967Implementation();
        address rootSafe = address(0x22A8dA5cC81B0e8FbcD80bf5632fC37748AA54B9); // Fake Rehearsal L1ProxyAdminOwner
        address nestedSafe = address(0xa05269513e77a322Da08ca426f8F49100b033303); // Fake Rehearsal SecurityCouncil
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, nestedSafe);
        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 8772255, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        string[] memory expectedDataToSign = new string[](2);
        // Foundation
        expectedDataToSign[0] =
            "0x1901941a0a47624c2804b10868bc413d50f87fef63bcc73aa69b47eb2f78d9f96eabc6eba853efcf7498489671d5ab8a3d68ad6a41d91e4720feac6b4eb5bf40fe64";
        // Security Council
        expectedDataToSign[1] =
            "0x1901f9191d330010bd7cb341b53e974f501dfeeb2ecab306ab589e62ba5988abb193c6eba853efcf7498489671d5ab8a3d68ad6a41d91e4720feac6b4eb5bf40fe64";
        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice Expected call data and data to sign generated by manually running the UniFix template at block 8029861 on sepolia.
    /// Simulate from task directory (test/tasks/example/sep/004-replace-superchain-config/config.toml) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path "$(pwd)"/.env --justfile ../../../../../src/justfile simulate
    function testRegressionCallDataMatches_UniFix() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/004-replace-superchain-config/config.toml";
        string memory expectedCallData =
            "";
        MultisigTask multisigTask = new UniFix();
        address rootSafe = address(0xd363339eE47775888Df411A163c586a8BdEA9dbf); // Fake Rehearsal L1ProxyAdminOwner
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);
        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 8029861, "sepolia", multisigTask, allSafes);

        bytes memory rootSafeCalldata =
            _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);
        uint256 rootSafeNonce = allOriginalNonces[allOriginalNonces.length - 1];

        string memory expectedDataToSign =
            "0x19012fedecce87979400ff00d5cec4c77da942d43ab3b9db4a5ffc51bb2ef498f30bbd1fd892d80773da28cae7662bb39eef7c5783d531bfa9c596ee8f578a170b02";
        _assertDataToSignSingleMultisig(
            rootSafe, rootSafeCalldata, expectedDataToSign, rootSafeNonce, MULTICALL3_ADDRESS
        );
    }

    /// @notice Expected call data generated by manually running the DeputyPauseKeyRotationTemplate at block 8092613 on sepolia.
    /// Simulate from task directory (test/tasks/example/sep/007-deputy-pause-key-rotation/config.toml) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path "$(pwd)"/.env --justfile ../../../../../src/justfile simulate
    function testRegressionCallDataMatches_DeputyPauseKeyRotationTemplate() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/007-deputy-pause-key-rotation/config.toml";
        string memory expectedCallData =
            "0x174dea71000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c6f7c07047ba37116a3fdc444afb5018f6df575800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c4183b708b0000000000000000000000006a07d585eddba8f9a4e17587f4ea5378de1c3bac000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000413efc7828dc57f2137dbca8cfe74deb05a707ef8b0f62d4c67321dda5ac09c5ee7597bf41708c4cefbae0697a8455165ef7c61fc1ebcf23dad72669253723b3da1b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new DeputyPauseKeyRotationTemplate();
        address rootSafe = address(0x837DE453AD5F21E89771e3c06239d8236c0EFd5E); // FoundationOperationsSafe
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 8092613, "sepolia", multisigTask, allSafes);

        bytes memory rootSafeCalldata =
            _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);
        uint256 rootSafeNonce = allOriginalNonces[allOriginalNonces.length - 1];

        string memory expectedDataToSign =
            "0x1901e84ad8db37faa1651b140c17c70e4c48eaa47a635e0db097ddf4ce1cc14b9ecbfc232e99f109db09a90ec0a319406d8e3df078659b05aeac83b22bdc64a18801";
        _assertDataToSignSingleMultisig(
            rootSafe, rootSafeCalldata, expectedDataToSign, rootSafeNonce, MULTICALL3_ADDRESS
        );
    }

    /// @notice Expected call data generated by manually running the OPCMUpgradeV410Template at block 9167980 on sepolia.
    /// Simulate from task directory (test/tasks/example/sep/024-opcm-upgrade-v410/config.toml) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path "$(pwd)"/.env --justfile ../../../../../src/justfile simulate
    function testRegressionCallDataMatches_OPCMUpgradeV410Template() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/024-opcm-upgrade-v410/config.toml";

        string memory expectedCallData =
            "0x82ad56cb0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000003bb6437aba031afbf9cb3538fa064161e2bf2d780000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a4ff2dd5a100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000034edd2a225f7f429a63e0f1d2084b9e0a93b538000000000000000000000000189abaaaa82dfc015a588a7dbad6f13b1d3485bc03eb07101fbdeaf3f04d9fb76526362c1eea2824e4c6e970bdb19675b72e4fc800000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new OPCMUpgradeV410();
        address rootSafe = address(0x1Eb2fFc903729a0F03966B917003800b145F56E2);
        address nestedSafe = address(0xDEe57160aAfCF04c34C887B5962D0a69676d3C8B); // sepolia
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, nestedSafe);
        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 9167980, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        string[] memory expectedDataToSign = new string[](2);
        // Foundation
        expectedDataToSign[0] =
            "0x190137e1f5dd3b92a004a23589b741196c8a214629d4ea3a690ec8e41ae45c689cbb750e241919d95648b52ce00e5bfa1cbbf9a2cf94f52d4b578b0129204b3a8cac";
        // Security Council
        expectedDataToSign[1] =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b85334163196cb8ef182f1d2df7e7a463f470a1d488c18920e948b2014bb482e46ae7";
        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice Expected call data generated by manually running the OPCMUpgradeSuperchainConfigV410Template at block 9167980 on sepolia.
    /// Simulate from task directory (test/tasks/example/sep/025-opcm-upgrade-superchainconfig-v410/config.toml) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path "$(pwd)"/.env --justfile ../../../../../src/justfile simulate
    function testRegressionCallDataMatches_OPCMUpgradeSuperchainConfigV410Template() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/025-opcm-upgrade-superchainconfig-v410/config.toml";

        string memory expectedCallData =
            "0x82ad56cb0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000003bb6437aba031afbf9cb3538fa064161e2bf2d78000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044b0b807eb00000000000000000000000075435c995b5bb0bbf866fa968f67a0d6a40982da000000000000000000000000189abaaaa82dfc015a588a7dbad6f13b1d3485bc00000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new OPCMUpgradeSuperchainConfigV410();
        address rootSafe = address(0x1Eb2fFc903729a0F03966B917003800b145F56E2);
        address nestedSafe = address(0xDEe57160aAfCF04c34C887B5962D0a69676d3C8B); // sepolia
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, nestedSafe);
        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 9167980, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        string[] memory expectedDataToSign = new string[](2);
        // Foundation
        expectedDataToSign[0] =
            "0x190137e1f5dd3b92a004a23589b741196c8a214629d4ea3a690ec8e41ae45c689cbb7f5a0c576fc25d78004c4f7e5809c11563a52f4acf3552cf3deaa985e1291a5b";
        // Security Council
        expectedDataToSign[1] =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b8533b986b3d556ad13b4abe0443803f9d9b20ffb2c5c476870c410d2337380a21d4e";
        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice Expected call data and data to sign generated by manually running the RevenueShareV100UpgradePath template at block 23434662 on mainnet.
    /// Simulate from task directory (test/tasks/example/eth/015-revenue-share-upgrade/config.toml) with:
    /// just --dotenv-path $(pwd)/.env --justfile ../../../../../src/improvements/justfile simulate (foundation|council)
    function testRegressionCallDataMatches_RevenueShareV100UpgradePath() public {
        string memory taskConfigFilePath = "test/tasks/example/eth/015-revenue-share-upgrade/config.toml";
        string memory expectedCallData =
            "";
        MultisigTask multisigTask = new RevenueShareV100UpgradePath();
        address rootSafe = address(0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A); // L1PAO
        address securityCouncilChildMultisig = address(0xc2819DC788505Aac350142A7A707BF9D03E3Bd03);
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, securityCouncilChildMultisig);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 23434662, "mainnet", multisigTask, allSafes);
        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        string[] memory expectedDataToSign = new string[](2);
        // Foundation
        expectedDataToSign[0] =
            "0x1901a4a9c312badf3fcaa05eafe5dc9bee8bd9316c78ee8b0bebe3115bb21b732672c44bb44f324d271b9734a58c7a830677045c1de195cb8f48299584539b8bbdbd";
        // Security Council
        expectedDataToSign[1] =
            "0x1901df53d510b56e539b90b369ef08fce3631020fbf921e3136ea5f8747c20bce967c5c905636dd8d633390ce8159bb909cb8831f92949870769a8f0f0971cc03097";
        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice Expected call data and data to sign generated by manually running the DeployFeesDepositor template at block 23197819 on mainnet.
    /// Simulate from task directory (test/tasks/example/eth/016-deploy-fees-depositor/config.toml) with:
    /// just --dotenv-path $(pwd)/.env --justfile ../../../../../src/improvements/justfile simulate (foundation|council)
    function testRegressionCallDataMatches_DeployFeesDepositor() public {
        string memory taskConfigFilePath = "test/tasks/example/eth/016-deploy-fees-depositor/config.toml";
        string memory expectedCallData =
            "0x174dea7100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000010400000000000000000000000000000000000000000000000000000000000001e8000000000000000000000000013b0d85ccb8bf860b6b79af3029fca081ae9bef20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000f2466cfa0570000000000000000000000000000000000000000000000000000000000000000666565732d6465706f7369746f7200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000e9660a060405234801561001057600080fd5b50600160805261001e610023565b6100e3565b600054610100900460ff161561008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051610d9161010560003960008181610274015261048e0152610d916000f3fe6080604052600436106100cb5760003560e01c8063645006ca11610074578063a2a956171161004e578063a2a9561714610425578063dad544e014610445578063f68016b71461045a57600080fd5b8063645006ca1461038657806366125607146103c85780637b11936e146103e857600080fd5b80633e47158c116100a55780633e47158c146102fb57806352d84c621461031057806354fd4d501461033057600080fd5b80630de2db4d1461024057806338d38c97146102605780633cb747bf146102a357600080fd5b3661023b576040805134815247602082018190529133917f363f315f930a17d1266b86a20d6dd34b1cfbc5a9db9f13a65d06a689c3a2af8a910160405180910390a26001546bffffffffffffffffffffffff16811061023957600154600080546002546040517f3dbb202b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff6c0100000000000000000000000090950485166004820181905260606024830152606482019490945263ffffffff90911660448201529192620100009091041690633dbb202b9084906084016000604051808303818588803b1580156101ce57600080fd5b505af11580156101e2573d6000803e3d6000fd5b50505050508073ffffffffffffffffffffffffffffffffffffffff167f2acaf92365a0b69fb3570802396f62d51aabccd684036b72c3ce78699425e7ee8360405161022f91815260200190565b60405180910390a2505b005b600080fd5b34801561024c57600080fd5b5061023961025b366004610bde565b61048c565b34801561026c57600080fd5b5060405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020015b60405180910390f35b3480156102af57600080fd5b506000546102d69062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161029a565b34801561030757600080fd5b506102d661069e565b34801561031c57600080fd5b5061023961032b366004610c36565b6108a9565b34801561033c57600080fd5b506103796040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b60405161029a9190610c58565b34801561039257600080fd5b506001546103ab906bffffffffffffffffffffffff1681565b6040516bffffffffffffffffffffffff909116815260200161029a565b3480156103d457600080fd5b506102396103e3366004610ccb565b610928565b3480156103f457600080fd5b506001546102d6906c01000000000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1681565b34801561043157600080fd5b50610239610440366004610ce8565b6109af565b34801561045157600080fd5b506102d6610a2e565b34801561046657600080fd5b506002546104779063ffffffff1681565b60405163ffffffff909116815260200161029a565b7f0000000000000000000000000000000000000000000000000000000000000000600054610100900460ff161580156104cc575060005460ff8083169116105b61055c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840160405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001660ff831617610100179055610595610aab565b6000805473ffffffffffffffffffffffffffffffffffffffff8681166c01000000000000000000000000026bffffffffffffffffffffffff8916176001556002805463ffffffff87167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000009091161790557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9086166201000002167fffffffffffffffffffff000000000000000000000000000000000000000000ff9091161790556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989061068f90839060ff91909116815260200190565b60405180910390a15050505050565b6000806106c97fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b905073ffffffffffffffffffffffffffffffffffffffff8116156106ec57919050565b6040518060400160405280601a81526020017f4f564d5f4c3143726f7373446f6d61696e4d657373656e67657200000000000081525051600261072f9190610d03565b604080513060208201526000918101919091527f4f564d5f4c3143726f7373446f6d61696e4d657373656e676572000000000000919091179061078a906060015b604051602081830303815290604052805190602001205490565b146107c1576040517f54e433cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080513060208201526001918101919091526000906107e390606001610770565b905073ffffffffffffffffffffffffffffffffffffffff811615610877578073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561084c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108709190610d67565b9250505090565b6040517f332144db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108b1610b2e565b6002805463ffffffff8381167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000083168117909355604080519190921680825260208201939093527f84858bb3fb3ecf87e268ebef250ef9ad9cd53ef7973ef7a0ec9d89470bb00a8091015b60405180910390a15050565b610930610b2e565b6001805473ffffffffffffffffffffffffffffffffffffffff8381166c010000000000000000000000008181026bffffffffffffffffffffffff85161790945560408051949093049091168084526020840191909152917f158f04d12e0403fdd63fbced694e8f70d3b87d04d8e2dfad526f5fcf6e49bbcf910161091c565b6109b7610b2e565b600180546bffffffffffffffffffffffff8381167fffffffffffffffffffffffffffffffffffffffff00000000000000000000000083168117909355604080519190921680825260208201939093527f132832be4270c0d1573ca543c41517dd443fe9daf5f21a9c74940e6db282e229910161091c565b6000610a3861069e565b73ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa69190610d67565b905090565b33610ab461069e565b73ffffffffffffffffffffffffffffffffffffffff1614158015610af5575033610adc610a2e565b73ffffffffffffffffffffffffffffffffffffffff1614155b15610b2c576040517fc4050a2600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b33610b37610a2e565b73ffffffffffffffffffffffffffffffffffffffff1614610b2c576040517f7f12c64b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80356bffffffffffffffffffffffff81168114610ba057600080fd5b919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610bc757600080fd5b50565b803563ffffffff81168114610ba057600080fd5b60008060008060808587031215610bf457600080fd5b610bfd85610b84565b93506020850135610c0d81610ba5565b92506040850135610c1d81610ba5565b9150610c2b60608601610bca565b905092959194509250565b600060208284031215610c4857600080fd5b610c5182610bca565b9392505050565b600060208083528351808285015260005b81811015610c8557858101830151858201604001528201610c69565b81811115610c97576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600060208284031215610cdd57600080fd5b8135610c5181610ba5565b600060208284031215610cfa57600080fd5b610c5182610b84565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d62577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500290565b600060208284031215610d7957600080fd5b8151610c5181610ba556fea164736f6c634300080f000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013b0d85ccb8bf860b6b79af3029fca081ae9bef20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000d8466cfa0570000000000000000000000000000000000000000000000000000000000000000666565732d6465706f7369746f7200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000ce760806040523480156200001157600080fd5b5060405162000cc738038062000cc783398181016040528101906200003791906200016f565b62000048816200004f60201b60201c565b50620001df565b600062000061620000ce60201b60201c565b905060007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610360001b90508281557f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f8284604051620000c1929190620001b2565b60405180910390a1505050565b60008060007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610360001b905080549150819250505090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000137826200010a565b9050919050565b62000149816200012a565b81146200015557600080fd5b50565b60008151905062000169816200013e565b92915050565b60006020828403121562000188576200018762000105565b5b6000620001988482850162000158565b91505092915050565b620001ac816200012a565b82525050565b6000604082019050620001c96000830185620001a1565b620001d86020830184620001a1565b9392505050565b610ad880620001ef6000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100675780634f1ef286146100905780635c60da1b146100c05780638f283970146100eb578063f851a440146101145761005d565b3661005d5761005b61013f565b005b61006561013f565b005b34801561007357600080fd5b5061008e60048036038101906100899190610715565b6101dc565b005b6100aa60048036038101906100a591906107a7565b610268565b6040516100b791906108a0565b60405180910390f35b3480156100cc57600080fd5b506100d56103ae565b6040516100e291906108d1565b60405180910390f35b3480156100f757600080fd5b50610112600480360381019061010d9190610715565b61043d565b005b34801561012057600080fd5b506101296104c9565b60405161013691906108d1565b60405180910390f35b6000610149610558565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101b19061096f565b60405180910390fd5b3660008037600080366000845af43d6000803e806101d7573d6000fd5b3d6000f35b6101e461058f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806102495750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1561025c57610257816105c6565b610265565b61026461013f565b5b50565b606061027261058f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806102d75750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1561039e576102e5846105c6565b6000808573ffffffffffffffffffffffffffffffffffffffff16858560405161030f9291906109ce565b600060405180830381855af49150503d806000811461034a576040519150601f19603f3d011682016040523d82523d6000602084013e61034f565b606091505b509150915081610394576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038b90610a59565b60405180910390fd5b80925050506103a7565b6103a661013f565b5b9392505050565b60006103b861058f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061041d5750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b156104315761042a610558565b905061043a565b61043961013f565b5b90565b61044561058f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806104aa5750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b156104bd576104b881610638565b6104c6565b6104c561013f565b5b50565b60006104d361058f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806105385750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1561054c5761054561058f565b9050610555565b61055461013f565b5b90565b60008060007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905080549150819250505090565b60008060007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610360001b905080549150819250505090565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b90508181558173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a25050565b600061064261058f565b905060007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610360001b90508281557f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f82846040516106a0929190610a79565b60405180910390a1505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106e2826106b7565b9050919050565b6106f2816106d7565b81146106fd57600080fd5b50565b60008135905061070f816106e9565b92915050565b60006020828403121561072b5761072a6106ad565b5b600061073984828501610700565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261076757610766610742565b5b8235905067ffffffffffffffff81111561078457610783610747565b5b6020830191508360018202830111156107a05761079f61074c565b5b9250929050565b6000806000604084860312156107c0576107bf6106ad565b5b60006107ce86828701610700565b935050602084013567ffffffffffffffff8111156107ef576107ee6106b2565b5b6107fb86828701610751565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015610841578082015181840152602081019050610826565b83811115610850576000848401525b50505050565b6000601f19601f8301169050919050565b600061087282610807565b61087c8185610812565b935061088c818560208601610823565b61089581610856565b840191505092915050565b600060208201905081810360008301526108ba8184610867565b905092915050565b6108cb816106d7565b82525050565b60006020820190506108e660008301846108c2565b92915050565b600082825260208201905092915050565b7f50726f78793a20696d706c656d656e746174696f6e206e6f7420696e6974696160008201527f6c697a6564000000000000000000000000000000000000000000000000000000602082015250565b60006109596025836108ec565b9150610964826108fd565b604082019050919050565b600060208201905081810360008301526109888161094c565b9050919050565b600081905092915050565b82818337600083830152505050565b60006109b5838561098f565b93506109c283858461099a565b82840190509392505050565b60006109db8284866109a9565b91508190509392505050565b7f50726f78793a2064656c656761746563616c6c20746f206e657720696d706c6560008201527f6d656e746174696f6e20636f6e7472616374206661696c656400000000000000602082015250565b6000610a436039836108ec565b9150610a4e826109e7565b604082019050919050565b60006020820190508181036000830152610a7281610a36565b9050919050565b6000604082019050610a8e60008301856108c2565b610a9b60208301846108c2565b939250505056fea2646970667358221220e170e6bf8ee3cc199be5ea3ca30084b98725d89b560e407f600f4a174236633364736f6c634300080f00330000000000000000000000005a0aae59d09fccbddb6c6cceb07b7279367c3d2a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa7da4552791535ae416525d695a85743f40624300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001044f1ef28600000000000000000000000090a79d28ad7f6d472ad1cfe3bad65204ab2969a2000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000840de2db4d0000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000beb5fc579115071764c7423a4f12edde41f106ed00000000000000000000000000000000000000000000000000000000000493e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new DeployFeesDepositor();
        address rootSafe = address(0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A); // L1PAO
        address securityCouncilChildMultisig = address(0xc2819DC788505Aac350142A7A707BF9D03E3Bd03);
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, securityCouncilChildMultisig);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 23197819, "mainnet", multisigTask, allSafes);
        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        string[] memory expectedDataToSign = new string[](2);
        // Foundation
        expectedDataToSign[0] =
            "0x1901a4a9c312badf3fcaa05eafe5dc9bee8bd9316c78ee8b0bebe3115bb21b7326728b096f6bceaab1716dfe8e85bae705192df4b5dae6e3b94d58bdf567edb6bfef";
        // Security Council
        expectedDataToSign[1] =
            "0x1901df53d510b56e539b90b369ef08fce3631020fbf921e3136ea5f8747c20bce967e5d2666095a6ced42244873f800e6714389265e35cf0e8e9e5236e720601e2b6";
        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice Expected call data and data to sign generated by manually running the RevenueShareV100UpgradePath template at block 23434662 on mainnet (opt-out scenario).
    /// Simulate from task directory (test/tasks/example/eth/019-revenueshare-upgrade-opt-out/config.toml) with:
    /// just --dotenv-path $(pwd)/.env --justfile ../../../../../src/improvements/justfile simulate (foundation|council)
    function testRegressionCallDataMatches_RevenueShareV100UpgradePathOptOut() public {
        string memory taskConfigFilePath = "test/tasks/example/eth/019-revenueshare-upgrade-opt-out/config.toml";
        string memory expectedCallData =
            "";
        MultisigTask multisigTask = new RevenueShareV100UpgradePath();
        address rootSafe = address(0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A); // L1PAO
        address securityCouncilChildMultisig = address(0xc2819DC788505Aac350142A7A707BF9D03E3Bd03);
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, securityCouncilChildMultisig);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 23434662, "mainnet", multisigTask, allSafes);
        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        string[] memory expectedDataToSign = new string[](2);
        // Foundation
        expectedDataToSign[0] =
            "0x1901a4a9c312badf3fcaa05eafe5dc9bee8bd9316c78ee8b0bebe3115bb21b73267239c98a2190652e75765bd0ea126d17bac09e3b1d5fbc0279c907394fb2b84c19";
        // Security Council
        expectedDataToSign[1] =
            "0x1901df53d510b56e539b90b369ef08fce3631020fbf921e3136ea5f8747c20bce9670525b8e323c17ad930925c81e1673aaafc2005d19738ef733095ce585329714f";
        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice Expected call data and data to sign generated by manually running the GnosisSafeRotateSigner at block 9264006 on sepolia using script:
    /// forge script GnosisSafeRotateSigner --sig "simulate(string)" test/tasks/example/sep/016-gnosis-safe-remove-owner/config.toml --rpc-url sepolia --fork-block-number 9264006 -vv
    function testRegressionCallDataMatches_GnosisSafeRotateSigner() public {
        address rootSafe = address(0xf64bc17485f0B4Ea5F06A96514182FC4cB561977); // SecurityCouncil
        string memory taskConfigFilePath = "test/tasks/example/sep/026-rotate-signer/config.toml";
        // Calldata generated by manually running the GnosisSafeRotateSigner template at block 9264006 on sepolia.
        string memory expectedCallData =
            "0x174dea71000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f64bc17485f0b4ea5f06a96514182fc4cb5619770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000064e318b52b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000001084092ac2f04c866806cf3d4a385afa4f6a6c97000000000000000000000000ee9c9b799b3f53626ef70e4560080b8a686b768200000000000000000000000000000000000000000000000000000000";

        MultisigTask multisigTask = new GnosisSafeRotateSigner();

        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe);
        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 9264006, "sepolia", multisigTask, allSafes);

        bytes memory rootSafeCalldata =
            _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);
        uint256 rootSafeNonce = allOriginalNonces[allOriginalNonces.length - 1];

        // Data to sign generated by manually running the GnosisSafeRotateSigner at block 9264006 on sepolia.
        string memory expectedDataToSign =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b8533ebcc36652c8cd8109135b72be330b31ef2cf931da1361337a0341fb9dc7faca5";
        string memory dataToSign = vm.toString(
            GnosisSafeHashes.getEncodedTransactionData(rootSafe, rootSafeCalldata, 0, rootSafeNonce, MULTICALL3_ADDRESS)
        );
        // assert that the data to sign generated in simulate is the same as the expected data to sign
        assertEq(keccak256(bytes(dataToSign)), keccak256(bytes(expectedDataToSign)));
        _assertDataToSignSingleMultisig(
            rootSafe, rootSafeCalldata, expectedDataToSign, rootSafeNonce, MULTICALL3_ADDRESS
        );
    }

    /// @notice Expected call data and data to sign generated by manually running the AddGameType template at block 9431469 on Sepolia.
    /// Simulate from task directory (test/tasks/example/sep/012-add-game-type) with:
    /// SIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../../../src/improvements/single.just simulate <foundation|council>
    function testRegressionCalldataMatches_AddGameType() public {
        string memory taskConfigFilePath = "test/tasks/example/sep/012-add-game-type/config.toml";
        string memory expectedCallData =
            "0x82ad56cb0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000003bb6437aba031afbf9cb3538fa064161e2bf2d780000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002441661a2e900000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000004ca9608fef202216bc21d543798ec854539baad3000000000000000000000000ff9d236641962cebf9dbfb54e7b8e91f99f10db0000000000000000000000000b39c1730dff54f25f9e45667c119e0a8fee7315600000000000000000000000000000000000000000000000000000000000000000339db503776757491b9f3038bf6f1d37b7988a2f75e823fe2656c1352ef2f910000000000000000000000000000000000000000000000000000000000000049000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000002a300000000000000000000000000000000000000000000000000000000000049d40000000000000000000000000000000000000000000000000011c37937e08000000000000000000000000000007babe08ee4d07dba236530183b24055535a7011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000147468697320697320612073616c74206d6978657200000000000000000000000000000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new AddGameTypeTemplate();
        address rootSafe = address(0x1Eb2fFc903729a0F03966B917003800b145F56E2);
        address foundationChildMultisig = address(0xDEe57160aAfCF04c34C887B5962D0a69676d3C8B);
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, foundationChildMultisig);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 9431469, "sepolia", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        string[] memory expectedDataToSign = new string[](2);
        // Foundation
        expectedDataToSign[0] =
            "0x190137e1f5dd3b92a004a23589b741196c8a214629d4ea3a690ec8e41ae45c689cbb219585bec52931beea5abdd75155cfff7596dc1bc3697006ee74dcd3683a9062";
        // Security council
        expectedDataToSign[1] =
            "0x1901be081970e9fc104bd1ea27e375cd21ec7bb1eec56bfe43347c3e36c5d27b853367060414e1617ef70777db275e9b27086a8ad00395f28214b4b9d1099a6d99df";

        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice Expected call data and data to sign generated by manually running the L1PortalExecuteL2CallUpgradeGovernor template at block 23197819 on mainnet.
    /// Simulate from task directory (test/tasks/example/eth/014-noop-call-optimismportal/config.toml) with:
    /// just --dotenv-path $(pwd)/.env --justfile ../../../../../src/improvements/justfile simulate (foundation|council)
    function testRegressionCallDataMatches_L1PortalExecuteL2CallUpgradeGovernor() public {
        string memory taskConfigFilePath = "test/tasks/example/eth/014-noop-call-optimismportal/config.toml";
        string memory expectedCallData =
            "0x174dea71000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000beb5fc579115071764c7423a4f12edde41f106ed0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000104e9e05c42000000000000000000000000cdf27f107725988f2261ce2256bdfcde8b382b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007a120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000243659cfe6000000000000000000000000ecbf4ed9f47302f00f0f039a691e7db83bdd26240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        MultisigTask multisigTask = new L1PortalExecuteL2Call();
        address rootSafe = address(0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A); // L1PAO
        address securityCouncilChildMultisig = address(0xc2819DC788505Aac350142A7A707BF9D03E3Bd03);
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, securityCouncilChildMultisig);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 23197819, "mainnet", multisigTask, allSafes);
        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        string[] memory expectedDataToSign = new string[](2);
        // Foundation
        expectedDataToSign[0] =
            "0x1901a4a9c312badf3fcaa05eafe5dc9bee8bd9316c78ee8b0bebe3115bb21b73267229ea72d29d343d55ff76a6ce84cc8514d45683b4339b10bef5e956955bfe65c9";
        // Security Council
        expectedDataToSign[1] =
            "0x1901df53d510b56e539b90b369ef08fce3631020fbf921e3136ea5f8747c20bce9672b811a78d33f39e928848432a404247a2ab7c4a596b8586797a2e86b284b3b8b";
        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice Expected call data and data to sign generated by manually running the LateOptInRevenueShare template at block 23197819 on mainnet, using a custom calculator.
    /// Simulate from task directory (test/tasks/example/eth/017-opt-in-revenue-share-late-custom-calc/config.toml) with:
    /// just --dotenv-path $(pwd)/.env --justfile ../../../../../src/improvements/justfile simulate (foundation|council)
    function testRegressionCallDataMatches_LateOptInRevenueShare_CustomCalc() public {
        string memory taskConfigFilePath =
            "test/tasks/example/eth/017-opt-in-revenue-share-late-custom-calc/config.toml";
        string memory expectedCallData =
            "";
        MultisigTask multisigTask = new LateOptInRevenueShare();
        address rootSafe = address(0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A); // L1PAO
        address securityCouncilChildMultisig = address(0xc2819DC788505Aac350142A7A707BF9D03E3Bd03);
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, securityCouncilChildMultisig);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 23197819, "mainnet", multisigTask, allSafes);

        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        string[] memory expectedDataToSign = new string[](2);
        // Foundation
        expectedDataToSign[0] =
            "0x1901a4a9c312badf3fcaa05eafe5dc9bee8bd9316c78ee8b0bebe3115bb21b732672a5793047740ae1b9ea1c37eda19d998b3a90e44809af335f0bcc495e47eb4d21";
        // Security Council
        expectedDataToSign[1] =
            "0x1901df53d510b56e539b90b369ef08fce3631020fbf921e3136ea5f8747c20bce967f56abc4b8f183130242343082cae76b3e62b6f52685a168e2732eaf05cb6c44e";
        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice Expected call data and data to sign generated by manually running the LateOptInRevenueShare template at block 23197819 on mainnet, deploying default calculator for the fee splitter.
    /// Simulate from task directory (test/tasks/example/eth/018-opt-in-revenue-share-late/config.toml) with:
    /// just --dotenv-path $(pwd)/.env --justfile ../../../../../src/improvements/justfile simulate (foundation|council)
    function testRegressionCallDataMatches_LateOptInRevenueShare_NoCustomCalc() public {
        string memory taskConfigFilePath = "test/tasks/example/eth/018-opt-in-revenue-share-late/config.toml";
        string memory expectedCallData =
            "";
        MultisigTask multisigTask = new LateOptInRevenueShare();
        address rootSafe = address(0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A); // L1PAO
        address securityCouncilChildMultisig = address(0xc2819DC788505Aac350142A7A707BF9D03E3Bd03);
        address[] memory allSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, securityCouncilChildMultisig);

        (Action[] memory actions, uint256[] memory allOriginalNonces) =
            _setupAndSimulate(taskConfigFilePath, 23197819, "mainnet", multisigTask, allSafes);
        _assertCallDataMatches(multisigTask, actions, allSafes, allOriginalNonces, expectedCallData);

        string[] memory expectedDataToSign = new string[](2);
        // Foundation
        expectedDataToSign[0] =
            "0x1901a4a9c312badf3fcaa05eafe5dc9bee8bd9316c78ee8b0bebe3115bb21b73267220cc514da4d3453185f71d532f977e25936a19c71735dfe75baed111273774b7";
        // Security Council
        expectedDataToSign[1] =
            "0x1901df53d510b56e539b90b369ef08fce3631020fbf921e3136ea5f8747c20bce967d92b0c8089c7cca6b5d37412f4af8632697d8d5e12d342bcf7844741d7694226";
        _assertDataToSignNestedMultisig(multisigTask, actions, expectedDataToSign, MULTICALL3_ADDRESS, rootSafe);
    }

    /// @notice Internal function to set up the fork and run the simulate method. Requires a gas limit to be passed to it.
    function _setupAndSimulate(
        string memory taskConfigFilePath,
        uint256 blockNumber,
        string memory network,
        MultisigTask multisigTask,
        address[] memory allSafes
    ) internal returns (Action[] memory actions, uint256[] memory allOriginalNonces) {
        vm.createSelectFork(network, blockNumber);
        address[] memory childSafes;
        if (allSafes.length > 1) {
            // Take all safes except the last (root safe) as child safes.
            uint256 childCount = allSafes.length - 1;
            childSafes = new address[](childCount);
            for (uint256 i = 0; i < childCount; i++) {
                childSafes[i] = allSafes[i];
            }
        } else {
            childSafes = new address[](0);
        }
        allOriginalNonces = MultisigTaskTestHelper.getAllOriginalNonces(allSafes);
        (, actions,,) = multisigTask.simulate(taskConfigFilePath, childSafes);
    }

    /// @notice Assert that the call data generated by the multisig task matches the expected call data.
    function _assertCallDataMatches(
        MultisigTask multisigTask,
        Action[] memory actions,
        address[] memory allSafes,
        uint256[] memory allOriginalNonces,
        string memory expectedCallData
    ) internal view returns (bytes memory rootSafeCalldata) {
        bytes[] memory allCalldatas = multisigTask.transactionDatas(actions, allSafes, allOriginalNonces);
        rootSafeCalldata = allCalldatas[allCalldatas.length - 1];
        assertEq(keccak256(bytes(vm.toString(rootSafeCalldata))), keccak256(bytes(expectedCallData)));
    }

    /// @notice assert that the data to sign generated by the single multisig task matches the expected data to sign
    function _assertDataToSignSingleMultisig(
        address rootSafe,
        bytes memory rootSafeCalldata,
        string memory expectedDataToSign,
        uint256 originalNonce,
        address multicallAddress
    ) internal view {
        string memory dataToSign = vm.toString(
            GnosisSafeHashes.getEncodedTransactionData(rootSafe, rootSafeCalldata, 0, originalNonce, multicallAddress)
        );
        assertEq(keccak256(bytes(dataToSign)), keccak256(bytes(expectedDataToSign)));
    }

    /// @notice assert that the data to sign generated by the nested multisig task matches the expected data to sign
    /// for each child multisig
    function _assertDataToSignNestedMultisig(
        MultisigTask multisigTask,
        Action[] memory actions,
        string[] memory expectedDataToSign,
        address multicallAddress,
        address rootSafe
    ) internal {
        address[] memory owners = IGnosisSafe(rootSafe).getOwners();
        // Decrement the root safe by 1.
        MultisigTaskTestHelper.decrementNonceAfterSimulation(rootSafe);
        for (uint256 i = 0; i < owners.length; i++) {
            // Decrement the nonces by 1 because in the task simulation, child multisig nonces are incremented.
            MultisigTaskTestHelper.decrementNonceAfterSimulation(owners[i]);
            address[] memory tmpAllSafes = MultisigTaskTestHelper.getAllSafes(rootSafe, owners[i]);
            uint256[] memory tmpAllOriginalNonces = MultisigTaskTestHelper.getAllOriginalNonces(tmpAllSafes);
            bytes memory childSafeCalldata =
                multisigTask.transactionDatas(actions, tmpAllSafes, tmpAllOriginalNonces)[0];
            uint256 childSafeNonce = tmpAllOriginalNonces[0];
            string memory dataToSign = vm.toString(
                GnosisSafeHashes.getEncodedTransactionData(
                    owners[i], childSafeCalldata, 0, childSafeNonce, multicallAddress
                )
            );
            assertEq(keccak256(bytes(dataToSign)), keccak256(bytes(expectedDataToSign[i])));
        }
    }
}