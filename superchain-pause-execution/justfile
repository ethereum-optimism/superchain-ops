# Get private key from 1password CLI based on network
get-key:
  #!/usr/bin/env bash
  set -euo pipefail

  # Get the network
  network=$(just get-network)

  # Get the private key
  item=$(op item get "DeputyPauseModulePrivateKey" --vault "$network [shared]" --format json)
  pause_deputy_privatekey=$(echo "$item" | jq -r '.fields[] | select(.id == "password") | .value')
  
  # Make sure the private key is set
  if [[ -z "$pause_deputy_privatekey" ]]; then
    echo "ERROR: Unable to get the private key from the vault. Please check the vault and ensure the item is in the vault: '$network [shared]' and try again." >&2
    exit 1
  fi

  # Set the private key
  echo "$pause_deputy_privatekey"

# Get network name from chain ID
get-network:
  #!/usr/bin/env bash
  # Make sure the ETH_RPC_URL is set
  if [ -z "$ETH_RPC_URL" ]; then
    echo "ETH_RPC_URL is not set" >&2
    exit 1
  fi

  # Get the chain ID
  chain_id=$(cast chain-id --rpc-url $ETH_RPC_URL)

  # Return the network name
  if [ "$chain_id" = "1" ]; then
    echo "mainnet"
  elif [ "$chain_id" = "11155111" ]; then
    echo "sepolia"
  else
    echo "Unsupported network chain ID: $chain_id" >&2
    exit 1
  fi

# Ensure the network is set
ensure-network:
  #!/usr/bin/env bash
  set -euo pipefail

  # Get the network, but don't print it
  just get-network > /dev/null

# Ensure the private key of the executor is set
ensure-executor-private-key:
  #!/usr/bin/env bash
  # Ensure the private key of the executor is set
  if [ -z "$EXECUTOR_PRIVATE_KEY" ]; then
    echo "$EXECUTOR_PRIVATE_KEY is not set" >&2
    exit 1
  fi

# Generate a random 32-byte nonce
make-nonce:
  #!/usr/bin/env bash
  set -euo pipefail

  # Generate a random 32-byte nonce
  echo "0x$(openssl rand -hex 32)"

# Parse the signature from script output
parse-sig output:
  #!/usr/bin/env bash
  set -euo pipefail

  # Get the output
  output={{output}}

  # Parse the signature
  sig=$(echo "$output" | tr -d '[:space:]')
  if ! [[ "$sig" =~ ^0x[0-9a-fA-F]{130}$ ]]; then
    echo "Error: Expected 0x-prefixed 65-byte signature, got: $sig" >&2
    exit 1
  fi

  # Return the parsed signature
  echo "$sig"

# Sign auth message for new module
auth-sig-new creator:
  #!/usr/bin/env bash
  set -euo pipefail

  # Ensure network is set (no private key needed)
  just ensure-network

  # Generate auth signature
  export PAUSE_DEPUTY_PRIVATE_KEY=$(just get-key)
  export CREATE_NEW_MODULE=true
  export DEPUTY_PAUSE_MODULE_CREATOR_ADDRESS={{creator}}
  output=$(forge script ./script/SuperchainPause.s.sol --sig "signAuthMessage()" --rpc-url $ETH_RPC_URL)
  ret=$(echo "$output" | tail -n1)
  sig=$(just parse-sig $ret)
  echo "$sig"

# Sign auth message for existing module
auth-sig module:
  #!/usr/bin/env bash
  set -euo pipefail

  # Ensure network is set (no private key needed)
  just ensure-network

  # Generate pause signature
  export PAUSE_DEPUTY_PRIVATE_KEY=$(just get-key)
  export CREATE_NEW_MODULE=false
  export DEPUTY_PAUSE_MODULE_ADDRESS={{module}}
  output=$(forge script ./script/SuperchainPause.s.sol --sig "signAuthMessage()" --rpc-url $ETH_RPC_URL)
  ret=$(echo "$output" | tail -n1)
  sig=$(just parse-sig $ret)
  echo "$sig"

# Generate pause signature
pause-sig module nonce:
  #!/usr/bin/env bash
  set -euo pipefail

  # Ensure network is set (no private key needed)
  just ensure-network

  # Generate pause signature
  # export PAUSE_DEPUTY_PRIVATE_KEY=$(just get-key) # Not needed for pause since we call from "pause" that will require this var. 
  export CREATE_NEW_MODULE=false
  export DEPUTY_PAUSE_MODULE_ADDRESS={{module}}
  output=$(forge script ./script/SuperchainPause.s.sol --sig "signPauseMessage(bytes32)" {{nonce}} --rpc-url $ETH_RPC_URL)
  ret=$(echo "$output" | tail -n1)
  sig=$(just parse-sig $ret)
  echo "$sig"

# Execute pause with provided signature
pause-raw module nonce sig:
  #!/usr/bin/env bash
  set -euo pipefail

  # Ensure network and private key are set
  just ensure-network
  just ensure-executor-private-key

  # Make sure user wants to continue
  network=$(just get-network)
  echo "üö® YOU ARE EXECUTING THE SUPERCHAIN-WIDE PAUSE ON >>${network}<<"
  echo "üö® THIS IS A PRODUCTION NETWORK"
  echo "üö® THIS IS YOUR >>FINAL<< OPPORTUNITY TO CANCEL"
  echo "üö® THIS ACTION CARRIES SERIOUS CONSEQUENCES"
  echo "üö® ARE YOU SURE YOU WANT TO CONTINUE?"
  read -p "üö® Enter the network name to execute the pause: " answer
  if [ "${answer}" != "${network}" ]; then
    echo "Aborting..."
    exit 1
  fi

  # Execute pause
  export PAUSE_DEPUTY_PRIVATE_KEY=$(just get-key)
  export CREATE_NEW_MODULE=false
  export DEPUTY_PAUSE_MODULE_ADDRESS={{module}}
  forge script ./script/SuperchainPause.s.sol --sig "pause(bytes32,bytes)" {{nonce}} {{sig}} --rpc-url ${ETH_RPC_URL} --broadcast --private-key $EXECUTOR_PRIVATE_KEY 
  

# Complete pause flow
pause module *no-1password: # in the future create a flag --no-1password to specify the key through "PAUSE_DEPUTY_PRIVATE_KEY". 
  #!/usr/bin/env bash
  set -euo pipefail

  if [ "true" == "{{no-1password}}" ]; then
    echo "üö® Skipping 1password lookup, and reading from the environment var ($PAUSE_DEPUTY_PRIVATE_KEY)"
    if [ -z "$PAUSE_DEPUTY_PRIVATE_KEY" ]; then
      echo "ERROR: PAUSE_DEPUTY_PRIVATE_KEY is not set" 
      exit 1
    fi
  else
    echo "üîë Getting private key from 1password"
    export PAUSE_DEPUTY_PRIVATE_KEY=$(just get-key)
  fi
  # Generate nonce
  nonce=$(just make-nonce)
  echo "‚úÖ Nonce generated successfully"
  # Generate signature
  sig=$(just pause-sig {{module}} $nonce)
  echo "‚úÖ Pause signature generated successfully"

  # Execute pause
  just pause-raw {{module}} $nonce $sig
  ## retrieve the superchainConfig address
  superchainConfig_address=$(cast call {{module}} 'superchainConfig()(address)' --rpc-url $ETH_RPC_URL)
  ## Print the superchainConfig display status command.
  echo -e "To verify the superchain is paused correctly please use this command:\n=========================================================================\ncast call $superchainConfig_address 'paused()(bool)' --rpc-url $ETH_RPC_URL\n=========================================================================\nThe command above should return -> 'true'"

# Simulation flow for checking script is functional
simulate module:
  #!/usr/bin/env bash
  set -euo pipefail

  # Ensure network and private key are set
  just ensure-network
  just ensure-executor-private-key

  # We're simulating
  echo "‚ö†Ô∏è THIS IS A SIMULATION ‚ö†Ô∏è"
  echo "‚ö†Ô∏è NOT TRIGGERING PAUSE ‚ö†Ô∏è"

  # Generate nonce
  nonce=$(just make-nonce)

  # Generate signature
  sig=$(just pause-sig {{module}} $nonce)
  echo "‚úÖ Pause signature generated successfully"

  # Ok!
  echo "Simulation successful"
